<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuthon&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yuthon.com/"/>
  <updated>2016-09-18T03:40:37.000Z</updated>
  <id>http://www.yuthon.com/</id>
  
  <author>
    <name>Yusu Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redmine configuration on Ubuntu 14.04</title>
    <link href="http://www.yuthon.com/2016/09/15/Redmine-Configuration-on-Ubuntu-14-04/"/>
    <id>http://www.yuthon.com/2016/09/15/Redmine-Configuration-on-Ubuntu-14-04/</id>
    <published>2016-09-15T11:02:37.000Z</published>
    <updated>2016-09-18T03:40:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近实验室要搞团队协作与项目管理，所以梅老板派我去装个 Redmine。</p>
<p>本文参考了 <a href="[http://www.redmine.org/projects/redmine/wiki/HowTo_Install_Redmine_on_Ubuntu_step_by_step](http://www.redmine.org/projects/redmine/wiki/HowTo_Install_Redmine_on_Ubuntu_step_by_step">HowTo Install Redmine on Ubuntu step by step</a>) 这篇官网的文章，并且根据实际情况有所改动。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先自然是安装 Redmine 以及相关依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install apache2 libapache2-mod-passenger</div><div class="line">$ sudo apt-get install mysql-server mysql-client</div><div class="line">$ sudo apt-get install redmine redmine-mysql</div></pre></td></tr></table></figure>
<p>只得注意的是，安装 MySQL 的时候会要求设置数据库<code>root</code>用户的密码，这个密码在之后安装 Redmine 的时候需要。</p>
<a id="more"></a>
<p>同时注意安装<code>bundler</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo gem update</div><div class="line">$ sudo gem install bundler</div></pre></td></tr></table></figure>
<p>这时候 Redmine 应该已经可用了，可以到<code>/usr/share/redmine</code>下直接用 WEBrick 来测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ sudo bundle exec ruby script/rails server webrick -e production</div><div class="line">=&gt; Booting WEBrick</div><div class="line">=&gt; Rails 3.2.16 application starting in production on http://0.0.0.0:3000</div><div class="line">=&gt; Call with -d to detach</div><div class="line">=&gt; Ctrl-C to shutdown server</div><div class="line">[2016-09-15 00:18:34] INFO  WEBrick 1.3.1</div><div class="line">[2016-09-15 00:18:34] INFO  ruby 1.9.3 (2013-11-22) [x86_64-linux]</div><div class="line">[2016-09-15 00:18:34] INFO  WEBrick::HTTPServer#start: pid=12337 port=3000</div></pre></td></tr></table></figure>
<p>能用的话，我们接下来来配置 Apache。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol>
<li><p>首先打开<code>/etc/apache2/mods-available/passenger.conf</code>，加一行<code>PassengerDefaultUser www-data</code>。之后整个文件看起来是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_passenger.c&gt;</div><div class="line">  PassengerDefaultUser www-data</div><div class="line">  PassengerRoot /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini</div><div class="line">  PassengerDefaultRuby /usr/bin/ruby</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>然后创建软链接，把 Redmine 的文件目录和 Apache 的根目录连起来</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ln -s /usr/share/redmine/public /var/www/html/redmine</div></pre></td></tr></table></figure>
</li>
<li><p>接下来编辑<code>/etc/apache2/sites-available/000-default.conf</code>，把以下内容插在<code>&lt;VirtualHost&gt;...&lt;/VirtualHost&gt;</code>之间。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /var/www/html/redmine&gt;</div><div class="line">    RailsBaseURI /redmine</div><div class="line">    PassengerResolveSymlinksInDocumentRoot on</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
<p>由于我手上的这台服务器的 80 端口被 Gitlab 占着，所以还需要换个端口，比如1234（不要忘了同时修改<code>/etc/apache2/ports.conf</code>中的监听端口号）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:1234&gt;</div></pre></td></tr></table></figure>
<p>同时，还可以设置服务器的地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ServerName localhost</div></pre></td></tr></table></figure>
<p>最后改完的<code>/etc/apache2/sites-available/000-default.conf</code>看起来如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:1234&gt;</div><div class="line">        ServerAdmin webmaster@localhost</div><div class="line">        DocumentRoot /var/www</div><div class="line">        ServerName localhost</div><div class="line">        </div><div class="line">        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</div><div class="line">        CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</div><div class="line">        </div><div class="line">        &lt;Directory /var/www/html/redmine&gt;</div><div class="line">                RailsBaseURI /redmine</div><div class="line">                PassengerResolveSymlinksInDocumentRoot on</div><div class="line">        &lt;/Directory&gt;</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>创建并修改Gemfile.lock的权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo touch /usr/share/redmine/Gemfile.lock</div><div class="line">$ sudo chown www-data:www-data /usr/share/redmine/Gemfile.lock</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>/etc/apache2/apache2.conf</code>，添加一行设置 Passenger 的根目录。不然只能访问到 Redmine 下的文件目录。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PassengerAppRoot /usr/share/redmine</div></pre></td></tr></table></figure>
</li>
<li><p>重启 Apache：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service apache2 restart</div></pre></td></tr></table></figure>
</li>
<li><p>此时已经可以直接通过浏览器访问 <a href="http://127.0.0.1:1234" target="_blank" rel="external">http://127.0.0.1:1234</a> 了。</p>
</li>
</ol>
<p>后续配置持续更新中</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近实验室要搞团队协作与项目管理，所以梅老板派我去装个 Redmine。&lt;/p&gt;
&lt;p&gt;本文参考了 &lt;a href=&quot;[http://www.redmine.org/projects/redmine/wiki/HowTo_Install_Redmine_on_Ubuntu_step_by_step](http://www.redmine.org/projects/redmine/wiki/HowTo_Install_Redmine_on_Ubuntu_step_by_step&quot;&gt;HowTo Install Redmine on Ubuntu step by step&lt;/a&gt;) 这篇官网的文章，并且根据实际情况有所改动。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;首先自然是安装 Redmine 以及相关依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install apache2 libapache2-mod-passenger&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install mysql-server mysql-client&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo apt-get install redmine redmine-mysql&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只得注意的是，安装 MySQL 的时候会要求设置数据库&lt;code&gt;root&lt;/code&gt;用户的密码，这个密码在之后安装 Redmine 的时候需要。&lt;/p&gt;
    
    </summary>
    
      <category term="Experience" scheme="http://www.yuthon.com/categories/Experience/"/>
    
    
      <category term="Redmine" scheme="http://www.yuthon.com/tags/Redmine/"/>
    
      <category term="Apache2" scheme="http://www.yuthon.com/tags/Apache2/"/>
    
      <category term="MySQL" scheme="http://www.yuthon.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Machine Learning - Week 6</title>
    <link href="http://www.yuthon.com/2016/09/10/Coursera-Machine-Learning-Week-6/"/>
    <id>http://www.yuthon.com/2016/09/10/Coursera-Machine-Learning-Week-6/</id>
    <published>2016-09-10T07:18:41.000Z</published>
    <updated>2016-09-21T14:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Advice-for-Applying-Machine-Learning"><a href="#Advice-for-Applying-Machine-Learning" class="headerlink" title="Advice for Applying Machine Learning"></a>Advice for Applying Machine Learning</h1><h2 id="Evaluating-a-Learning-Algorithm"><a href="#Evaluating-a-Learning-Algorithm" class="headerlink" title="Evaluating a Learning Algorithm"></a>Evaluating a Learning Algorithm</h2><h3 id="Deciding-What-to-Try-Next"><a href="#Deciding-What-to-Try-Next" class="headerlink" title="Deciding What to Try Next"></a>Deciding What to Try Next</h3><p>Errors in your predictions can be troubleshooted by:</p>
<ul>
<li>Getting more training examples</li>
<li>Trying smaller sets of features</li>
<li>Trying additional features</li>
<li>Trying adding polynomial features</li>
<li>Increasing or decreasing $\lambda$</li>
</ul>
<p>Don’t just pick one of these avenues at random. We’ll explore diagnostic techniques for choosing one of the above solutions in the following sections.</p>
<p>In the next few sections, We’ll first talk about how evaluate your learning algorithms and after that we’ll talk about some of these diagnostics which will hopefully let you much more effectively select more of the useful things to try mixing if your goal to improve the machine learning system. </p>
<a id="more"></a>
<h3 id="Evaluating-a-Hypothesis"><a href="#Evaluating-a-Hypothesis" class="headerlink" title="Evaluating a Hypothesis"></a>Evaluating a Hypothesis</h3><p>A hypothesis may have low error for the training examples but still be inaccurate (because of overfitting). And it may fail to generalize to new examples not in training set.</p>
<p>With a given dataset of training examples, we can split up the data into two sets: a <strong>training set</strong> and a <strong>test set</strong>. (normally 70% for training set and 30% for test set)</p>
<p>The training/testing procedure using these two sets is then:</p>
<ol>
<li><p>Learn $\Theta$ and minimize $J_{train}(\Theta)$ using the training set</p>
</li>
<li><p>Compute the test set error $J_{test}(\Theta)$</p>
<ul>
<li><p>For linear regression: $J_{test}(\Theta) = \dfrac{1}{2m_{test}} \sum_{i=1}^{m_{test}}(h_\Theta(x^{(i)}_{test}) - y^{(i)}_{test})^2$</p>
</li>
<li><p>For classification ~ Misclassification error (aka 0/1 misclassification error): </p>
<p>$err(h_\Theta(x),y) = \begin{cases} 1 &amp; \mbox{if } h_\Theta(x) \geq 0.5\ and\ y = 0\ or\ h_\Theta(x) &lt; 0.5\ and\ y = 1 \\ 0 &amp; otherwise \end{cases}$</p>
<ul>
<li>This gives us a binary 0 or 1 error result based on a misclassification.</li>
</ul>
</li>
<li><p>The average test error for the test set is</p>
<p>$\text{Test Error} = \dfrac{1}{m_{test}} \sum^{m_{test}}_{i=1} err(h_\Theta(x^{(i)}_{test}), y^{(i)}_{test})$</p>
<ul>
<li>This gives us the proportion of the test data that was misclassified.</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Model-Selection-and-Train-Validation-Test-Sets"><a href="#Model-Selection-and-Train-Validation-Test-Sets" class="headerlink" title="Model Selection and Train/Validation/Test Sets"></a>Model Selection and Train/Validation/Test Sets</h3><p>Once parameters $\theta _0, \theta _1, \dots , \theta _4$ were fit to some set of data (training set), the error of the parameters as measured on that data (the training error $J(\theta)$ ) is likely to be lower than the actual generalization error.</p>
<ul>
<li>Just because a learning algorithm fits a training set well, that does not mean it is a good hypothesis.</li>
<li>The error of your hypothesis as measured on the data set with which you trained the parameters will be lower than any other data set.</li>
</ul>
<p>In order to choose the model of your hypothesis, you can test each degree of polynomial and look at the error result.</p>
<p><strong>Without the Validation Set (bad method)</strong></p>
<ol>
<li>Optimize the parameters in $\Theta$ using the training set for each polynomial degree.</li>
<li>Find the polynomial degree d with the least error using the test set.</li>
<li>Estimate the generalization error also using the test set with $J_{test}(\Theta^{(d)})$, (d = theta from polynomial with lower error);</li>
</ol>
<p>In this case, we have trained one variable, d, or the degree of the polynomial, using the test set. I.e., our extra parameter is fit to the test set. This will cause our error value to be greater for any other set of data. <u>Then the performance of the fitted model on the training set is not predictive of how well the hypothesis will generalize to new examples.</u></p>
<p><strong>Use of the CV set</strong></p>
<p>To solve this, we can introduce a third set, the <strong>Cross Validation Set</strong> (交叉验证集), to serve as an intermediate set that we can train d with. Then our test set will give us an accurate, non-optimistic error.</p>
<p>One example way to break down our dataset into the three sets is:</p>
<ul>
<li>Training set: 60%</li>
<li>Cross validation set: 20%</li>
<li>Test set: 20%</li>
</ul>
<p>We can now calculate three separate error values for the three different sets.</p>
<p><strong>With the Validation Set (note: this method presumes we do not also use the CV set for regularization)</strong></p>
<ol>
<li>Optimize the parameters in $\Theta$ using the training set for each polynomial degree.</li>
<li>Find the polynomial degree d with the least error using the cross validation set.</li>
<li>Estimate the generalization error using the test set with $J_{test}(\Theta^{(d)})$, (d = theta from polynomial with lower error);</li>
</ol>
<p>This way, <u>the degree of the polynomial d has not been trained using the test set.</u></p>
<blockquote>
<p>Be aware that using the CV set to select ‘d’ means that we cannot also use it for the validation curve process of setting the lambda value.</p>
</blockquote>
<h2 id="Bias-vs-Variance"><a href="#Bias-vs-Variance" class="headerlink" title="Bias vs. Variance"></a>Bias vs. Variance</h2><h3 id="Diagnosing-Bias-vs-Variance"><a href="#Diagnosing-Bias-vs-Variance" class="headerlink" title="Diagnosing Bias vs. Variance"></a>Diagnosing Bias vs. Variance</h3><p>We’ll examine the relationship between the degree of the polynomial $d$ and the underfitting or overfitting of our hypothesis.</p>
<ul>
<li>We need to distinguish whether <strong>bias</strong> (偏差) or <strong>variance</strong> (方差) is the problem contributing to bad predictions.</li>
<li><u>High bias is underfitting and high variance is overfitting.</u> We need to find a golden mean between these two.</li>
</ul>
<p>The training error will tend to <strong>decrease</strong> as we increase the degree d of the polynomial.</p>
<p>At the same time, the cross validation error will tend to <strong>decrease</strong> as we increase d up to a point, and then it will <strong>increase</strong> as d is increased, forming a convex curve.</p>
<ul>
<li><strong>High bias (underfitting)</strong>: both $J_{train}(\Theta)$ and $J_{CV}(\Theta)$ will be high, and $J_{CV}(\Theta) \approx J_{train}(\Theta)$.</li>
<li><strong>High variance (overfitting)</strong>: $J_{train}(\Theta)$ will be low but $J_{CV}(\Theta)$ will be high. And $J_{CV}(\Theta) \gg J_{train}(\Theta)$.</li>
</ul>
<p><img src="/images/Features-and-polynom-degree.png" alt="Features-and-polynom-degree"></p>
<h3 id="Regularization-and-Bias-Variance"><a href="#Regularization-and-Bias-Variance" class="headerlink" title="Regularization and Bias/Variance"></a>Regularization and Bias/Variance</h3><p>The relationship of $\lambda$ to the training set and the variance set is as follows:</p>
<ul>
<li><strong>Low $\lambda$ (High variance, overfitting)</strong>: $J_{train}(\Theta)$ is low and $J_{CV}(\Theta)$ is high (high variance/overfitting).</li>
<li><strong>Intermediate λ</strong>: $J_{train}(\Theta)$ and $J_{CV}(\Theta)$ are somewhat low and Jtrain(Θ)≈JCV(Θ).</li>
<li><strong>Large $\lambda$ (High bias, underfitting)</strong>: both $J_{train}(\Theta)$ and $J_{CV}(\Theta)$ will be high (underfitting/high bias)<ul>
<li>A large lambda heavily penalizes all the $\Theta$ parameters, which greatly simplifies the line of our resulting function, so causes underfitting.</li>
</ul>
</li>
</ul>
<p><img src="/images/Features-and-polynom-degree-fix.png" alt="Features-and-polynom-degree-fix.png"></p>
<p>In order to choose the model and the regularization $\lambda$, we need:</p>
<ol>
<li>Create a list of lambda (i.e. $\lambda \in {0,0.01,0.02,0.04,0.08,0.16,0.32,0.64,1.28,2.56,5.12,10.24}$);</li>
<li>Select a lambda to compute;</li>
<li>Create a model set like degree of the polynomial or others;</li>
<li>Select a model to learn $\Theta$;</li>
<li>Learn the parameter $\Theta$ for the model selected, using $J_{train}(\Theta)$ <strong>with</strong> $\lambda$ selected (this will learn $\Theta$ for the next step);</li>
<li>Compute the train error using the learned $\Theta$ (computed with λ ) on the $J_{train}(\Theta)$ <strong>without</strong> regularization or $\lambda = 0$;</li>
<li>Compute the cross validation error using the learned $\Theta$ (computed with λ) on the $J_{CV}(\Theta)​$ <strong>without</strong> regularization or $\lambda = 0$;</li>
<li>Do this for the entire model set and lambdas, then <u>select the best combo that produces the lowest error on the cross validation set</u>;</li>
<li>Now if you need visualize to help you understand your decision, you can plot to the figure like above with: ($\lambda$ x Cost $J_{train}(\Theta)$) and ($\lambda$ x Cost $J_{CV}(\Theta)$);</li>
<li>Now using the best combo $\Theta$ and $\lambda$, apply it on Jtest(Θ) to see if it has a good generalization of the problem.</li>
<li>To help decide the best polynomial degree and $\lambda$ to use, we can diagnose with the learning curves, that is the next subject.</li>
</ol>
<h3 id="Learning-Curves"><a href="#Learning-Curves" class="headerlink" title="Learning Curves"></a>Learning Curves</h3><p>Supposed we use $h_\theta(x) = \theta_0 + \theta_1x + \theta_2x^2$, it’s clear that when $m=1, 2, 3$, we’ll get $0$ errors because we can always find a quadratic curve that exactly touches given points.</p>
<ul>
<li>As the training set gets larger, the error for a quadratic function increases.</li>
<li>The error value will plateau out after a certain m, or training set size.</li>
</ul>
<p><img src="/images/learning-curves-m.png" alt="learning-curves-m.png"></p>
<p><img src="/images/typical-learning-curve.png" alt="typical-learning-curve.png"></p>
<h4 id="High-Bias"><a href="#High-Bias" class="headerlink" title="High Bias"></a>High Bias</h4><ul>
<li><strong>Low training set size</strong>:  $J_{train}(\Theta)$ will be low and $J_{CV}(\Theta)$ will be high.</li>
<li><strong>Large training set size</strong>: both $J_{train}(\Theta)$ and $J_{CV}(\Theta)$ will be high with $J_{train}(\Theta) \approx J_{CV}(\Theta)$.</li>
</ul>
<p>If a learning algorithm is suffering from <strong>high bias</strong>, getting more training data <strong>will not (by itself) help much</strong>.</p>
<p><img src="/images/learning-curves-high-bias.png" alt="learning-curves-high-bias"></p>
<p><img src="/images/typical-learning-curve-for-high-bias.png" alt="typical-learning-curve-for-high-bias"></p>
<h4 id="High-Variance"><a href="#High-Variance" class="headerlink" title="High Variance"></a>High Variance</h4><ul>
<li><strong>Low training set size</strong>:  $J_{train}(\Theta)$ will be low and $J_{CV}(\Theta)$ will be high.</li>
<li><strong>Large training set size</strong>: $J_{train}(\Theta)$  increases with training set size and $J_{CV}(\Theta)$ continues to decrease without leveling off. Also, $J_{train}(\Theta) &lt; J_{CV}(\Theta)$ but the difference between them remains significant.</li>
</ul>
<p>If a learning algorithm is suffering from <strong>high variance</strong>, getting more training data is <strong>likely to help.</strong></p>
<p><img src="/images/learning-curves-high-variance.png" alt="learning-curves-high-variance"></p>
<p><img src="/images/typical-learning-curve-for-high-variance.png" alt="typical-learning-curve-for-high-variance"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Advice-for-Applying-Machine-Learning&quot;&gt;&lt;a href=&quot;#Advice-for-Applying-Machine-Learning&quot; class=&quot;headerlink&quot; title=&quot;Advice for Applying Machine Learning&quot;&gt;&lt;/a&gt;Advice for Applying Machine Learning&lt;/h1&gt;&lt;h2 id=&quot;Evaluating-a-Learning-Algorithm&quot;&gt;&lt;a href=&quot;#Evaluating-a-Learning-Algorithm&quot; class=&quot;headerlink&quot; title=&quot;Evaluating a Learning Algorithm&quot;&gt;&lt;/a&gt;Evaluating a Learning Algorithm&lt;/h2&gt;&lt;h3 id=&quot;Deciding-What-to-Try-Next&quot;&gt;&lt;a href=&quot;#Deciding-What-to-Try-Next&quot; class=&quot;headerlink&quot; title=&quot;Deciding What to Try Next&quot;&gt;&lt;/a&gt;Deciding What to Try Next&lt;/h3&gt;&lt;p&gt;Errors in your predictions can be troubleshooted by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting more training examples&lt;/li&gt;
&lt;li&gt;Trying smaller sets of features&lt;/li&gt;
&lt;li&gt;Trying additional features&lt;/li&gt;
&lt;li&gt;Trying adding polynomial features&lt;/li&gt;
&lt;li&gt;Increasing or decreasing $\lambda$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don’t just pick one of these avenues at random. We’ll explore diagnostic techniques for choosing one of the above solutions in the following sections.&lt;/p&gt;
&lt;p&gt;In the next few sections, We’ll first talk about how evaluate your learning algorithms and after that we’ll talk about some of these diagnostics which will hopefully let you much more effectively select more of the useful things to try mixing if your goal to improve the machine learning system. &lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="Coursera" scheme="http://www.yuthon.com/tags/Coursera/"/>
    
      <category term="Machine Learning" scheme="http://www.yuthon.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Machine Learning - Week 5</title>
    <link href="http://www.yuthon.com/2016/08/17/Coursera-Machine-Learning-Week-5/"/>
    <id>http://www.yuthon.com/2016/08/17/Coursera-Machine-Learning-Week-5/</id>
    <published>2016-08-17T03:57:03.000Z</published>
    <updated>2016-09-10T07:20:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Neural-Networks-Learning"><a href="#Neural-Networks-Learning" class="headerlink" title="Neural Networks: Learning"></a>Neural Networks: Learning</h1><h2 id="Cost-Function-and-Backpropagation"><a href="#Cost-Function-and-Backpropagation" class="headerlink" title="Cost Function and Backpropagation"></a>Cost Function and Backpropagation</h2><h3 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h3><p>Let’s first define a few variables that we will need to use:</p>
<ul>
<li>$L$ = total number of layers in the network</li>
<li>$s_l$ = number of units (not counting bias unit) in layer $l$</li>
<li>$K$ = number of output units/classes</li>
</ul>
<p>Recall that the cost function for regularized logistic regression was:</p>
<p>$J(\theta) = - \frac{1}{m} \sum_{i=1}^m \large[ y^{(i)}\ \log (h_\theta (x^{(i)})) + (1 - y^{(i)})\ \log (1 - h_\theta(x^{(i)}))\large] + \frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2$</p>
<p>For neural networks, it is going to be slightly more complicated:</p>
<p>$J(\Theta) = - \frac{1}{m} \sum_{i=1}^m \sum_{k=1}^K \left[y^{(i)}_k \log ((h_\Theta (x^{(i)}))_k) + (1 - y^{(i)}_k)\log (1 - (h_\Theta(x^{(i)}))_k)\right] + \frac{\lambda}{2m}\sum_{l=1}^{L-1} \sum_{i=1}^{s_l} \sum_{j=1}^{s_{l+1}} ( \Theta_{j,i}^{(l)})^2$</p>
<a id="more"></a>
<ul>
<li>$h_\Theta (x) \in R^K$, $(h_\Theta (x))_i$ = $i^{th}$ output</li>
<li><u>In the first part of the equation</u>, the double sum simply adds up the logistic regression costs calculated for each cell in the output layer</li>
<li><u>In the regularization part</u>, the triple sum simply adds up the squares of all the individual $\Theta$s in the entire network.<ul>
<li><u>The number of columns</u> in our current theta matrix is equal to the number of nodes in our current layer (<u>including</u> the bias unit).</li>
<li><u>The number of rows</u> in our current theta matrix is equal to the number of nodes in the next layer (<u>excluding</u> the bias unit).<ul>
<li>This is like a bias unit and by analogy to what we were doing for logistic progression, we won’t sum over those terms in our regularization term because <u>we don’t want to regularize them</u> and string their values as zero. </li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Backpropagation-Algorithm"><a href="#Backpropagation-Algorithm" class="headerlink" title="Backpropagation Algorithm"></a>Backpropagation Algorithm</h3><p><strong>“Backpropagation” (后向搜索)</strong> is neural-network terminology for minimizing our cost function, just like what we were doing with gradient descent in logistic and linear regression.</p>
<p>Our goal is try to find parameters $\Theta$ to try to minimize $J(\Theta)$. </p>
<p>In order to use either gradient descent or one of the advance optimization algorithms. What we need to do therefore is to write code that takes this input the parameters theta and computes $J(\Theta)$ and $\dfrac{\partial}{\partial \Theta_{i,j}^{(l)}}J(\Theta)$.</p>
<h4 id="Gradient-compuation"><a href="#Gradient-compuation" class="headerlink" title="Gradient compuation"></a>Gradient compuation</h4><p>Given one training example $(x,y)$</p>
<p><img src="/images/gradient_computation.png" alt="gradient_computation"></p>
<p>Forward propagation:</p>
<ul>
<li>$a^{(1)} = x$</li>
<li>$z^{(2)} = \Theta ^{(1)} a ^{(1)}$</li>
<li>$a^{(2)} = g(z^{(2)})\ (add\ a^{(2)}_0)$</li>
<li>$z^{(3)} = \Theta ^{(1)} a ^{(2)}$</li>
<li>$a^{(3)} = g(z^{(3)})\ (add\ a^{(3)}_0)$</li>
<li>$z^{(4)} = \Theta ^{(3)} a ^{(3)}$</li>
<li>$a^{(2)} = h_\Theta (x) =  g(z^{(3)})$</li>
</ul>
<p>In backpropagation we’re going to compute for every node:</p>
<p>$\delta_j^{(l)}$ = “error” of node j in layer $l$ ($s_{l+1}$ elements vector)</p>
<p>For each output unit (layer $L = 4$):</p>
<p>$\delta ^{(4)} = a^{(4)} - y$</p>
<p>To get the delta values of the layers before the last layer, we can use an equation that steps us back from right to left:</p>
<p>$\delta^{(l)} = ((\Theta^{(l)})^T \delta^{(l+1)})\ .*\ g’(z^{(l)})$</p>
<p>The g-prime derivative terms can also be written out as:</p>
<p>$g’(z^{(l)}) = a^{(l)}\ .*\ (1 - a^{(l)})$</p>
<p>There is no $\delta ^{(1)}$ term, because the first layer corresponds to the input layer and that’s just the feature we observed in our training sets, so that doesn’t have any error associated with that.</p>
<p>It’s possible to prove that if you ignore regularation, then the partial derivative terms you want are exactly given by the activations and these delta terms. </p>
<p>$\dfrac{\partial J(\Theta)}{\partial \Theta_{i,j}^{(l)}} = a^{(i)}_j \delta^{(l+1)}_i\ (\text{ignoring }\lambda)$</p>
<h4 id="Backpropagation-Algorithm-1"><a href="#Backpropagation-Algorithm-1" class="headerlink" title="Backpropagation Algorithm"></a>Backpropagation Algorithm</h4><ul>
<li>Training set $\lbrace (x^{(1)}, y^{(1)}) \cdots (x^{(m)}, y^{(m)})\rbrace$</li>
<li>Set $\Delta^{(l)}_{i,j} := 0$ (for all $l, i, j$)</li>
<li>For $i=1$ to $m$<ul>
<li>Set $a^{(1)} := x^{(t)}$</li>
<li>Perform forward propagation to compute $a^{(l)}$ for $l = 2,3,\dots ,L$</li>
<li>Using $y^{(i)}$, compute $\delta^{(L)} = a^{(L)} - y^{(t)}$</li>
<li>Compute $\delta^{(L-1)}, \delta^{(L-2)},\dots,\delta^{(2)}$</li>
<li>$\Delta^{(l)}_{i,j} := \Delta^{(l)}_{i,j} + a_j^{(l)} \delta_i^{(l+1)}$  or with vectorization, $\Delta^{(l)} := \Delta^{(l)} + \delta^{(l+1)}(a^{(l)})^T$</li>
</ul>
</li>
<li>$D^{(l)}_{i,j} := \dfrac{1}{m}\left(\Delta^{(l)}_{i,j} + \lambda\Theta^{(l)}_{i,j}\right)$ <strong>If</strong> $j\ne 0$ </li>
<li>$D^{(l)}_{i,j} := \dfrac{1}{m}\Delta^{(l)}_{i,j}$ <strong>If</strong> $j = 0$</li>
</ul>
<p>The capital-delta matrix is used as an “accumulator” to add up our values as we go along and eventually compute our partial derivative.</p>
<p> the $D_{i,j}^{(l)}$ terms are the partial derivatives and the results we are looking for:</p>
<p>$\dfrac{\partial J(\Theta)}{\partial \Theta_{i,j}^{(l)}} = D_{i,j}^{(l)}$</p>
<h3 id="Backpropagation-Intuition"><a href="#Backpropagation-Intuition" class="headerlink" title="Backpropagation Intuition"></a>Backpropagation Intuition</h3><h4 id="Forward-propagation"><a href="#Forward-propagation" class="headerlink" title="Forward propagation"></a>Forward propagation</h4><p><img src="/images/forward_propagation_intuition.png" alt="forward_propagation_intuition.png"></p>
<h4 id="What’s-backpropagation-doing"><a href="#What’s-backpropagation-doing" class="headerlink" title="What’s backpropagation doing?"></a>What’s backpropagation doing?</h4><p>The cost function is:</p>
<p>$J(\theta) = - \frac{1}{m} \sum_{t=1}^m\sum_{k=1}^K  \left[ y^{(t)}_k \ \log (h_\theta (x^{(t)}))_k + (1 - y^{(t)}_k)\ \log (1 - h_\theta(x^{(t)})_k)\right] + \frac{\lambda}{2m}\sum_{l=1}^{L-1} \sum_{i=1}^{s_l} \sum_{j=1}^{s_l+1} ( \theta_{j,i}^{(l)})^2$</p>
<p>Focusing on  a single example $x^{(i)}, y^{(i)}$, the case of 1 output unit, and ignoring regularization ($\lambda = 0$), </p>
<p>$cost(t) =y^{(t)} \ \log (h_\theta (x^{(t)})) + (1 - y^{(t)})\ \log (1 - h_\theta(x^{(t)}))$</p>
<p>Intuitively, $\theta ^{(l)}_j$ is the “error” for $a ^{(l)}_j$ (unit $j$ in layer $l$). More formally, the delta values are actually the derivative of the cost function:</p>
<p>$\delta_j^{(l)} = \dfrac{\partial}{\partial z_j^{(l)}} cost(t)$</p>
<p><img src="/images/backward_propagation_intuition.png" alt="backward_propagation_intuition.png"></p>
<p>In above, we can compute</p>
<p>$\delta ^{(4)}_1 = y^{(i)} - a^{(4)}_1$</p>
<p>$\delta ^{(3)}_2 = \Theta ^{(3)}_{12} \delta^{(4)}_1$</p>
<p>$\delta ^{(2)}_2 = \Theta ^{(2)}_{12} \delta^{(3)}_1 + \Theta ^{(2)}_{22} \delta^{(3)}_2$</p>
<h2 id="Backpropagation-in-Practice"><a href="#Backpropagation-in-Practice" class="headerlink" title="Backpropagation in Practice"></a>Backpropagation in Practice</h2><h3 id="Implementation-Note-Unrolling-Parameters"><a href="#Implementation-Note-Unrolling-Parameters" class="headerlink" title="Implementation Note: Unrolling Parameters"></a>Implementation Note: Unrolling Parameters</h3><p>We use following code to get the optimisation theta.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function [jVal, gradient] = costFunction(theta)</div><div class="line">  ...</div><div class="line">optTheta = fminunc(@costFunction, initialTheta, options)</div></pre></td></tr></table></figure>
<p>Where <code>gradient</code>, <code>theta</code>, <code>initialTheta</code> are vectors of $n+1$ dimension.</p>
<p>In order to use optimizing functions such as <code>fminunc()</code>, we will want to “unroll” all the elements and put them into one long vector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">thetaVec = [Theta1(:); Theta2(:); Theta3(:)];</div><div class="line">DVec = [D1(:); D2(:); D3(:)];</div></pre></td></tr></table></figure>
<p>If the dimensions of <code>Theta1</code> is $10\times11$, <code>Theta2</code> is $10\times 11$ and <code>Theta3</code> is $1\times 11$, then we can get back our original matrices from the “unrolled” versions as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Theta1 = reshape(thetaVector(1:110),10,11)</div><div class="line">Theta2 = reshape(thetaVector(111:220),10,11)</div><div class="line">Theta3 = reshape(thetaVector(221:231),1,11)</div></pre></td></tr></table></figure>
<h3 id="Gradient-Checking"><a href="#Gradient-Checking" class="headerlink" title="Gradient Checking"></a>Gradient Checking</h3><p>Gradient checking will assure that our backpropagation works as intended.</p>
<h4 id="Numerical-estimation-of-gradients"><a href="#Numerical-estimation-of-gradients" class="headerlink" title="Numerical estimation of gradients"></a>Numerical estimation of gradients</h4><p><img src="/images/numerical_estimation_of_gradients.png" alt="numerical_estimation_of_gradients.png"></p>
<p>We can approximate the derivative of our cost function with:</p>
<p>$\dfrac{\partial}{\partial\Theta}J(\Theta) \approx \dfrac{J(\Theta + \epsilon) - J(\Theta - \epsilon)}{2\epsilon}$</p>
<p><strong>Implement</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradApprox = (J(theta + EPSILON) - J(theta - EPSILON)) / (@ * EPSILON);</div></pre></td></tr></table></figure>
<h4 id="Gradient-Checking-1"><a href="#Gradient-Checking-1" class="headerlink" title="Gradient Checking"></a>Gradient Checking</h4><p>With multiple theta matrices, we can approximate the derivative <strong>with respect to</strong> $\Theta _J$ as follows:</p>
<p>$\dfrac{\partial}{\partial\Theta_j}J(\Theta) \approx \dfrac{J(\Theta_1, \dots, \Theta_j + \epsilon, \dots, \Theta_n) - J(\Theta_1, \dots, \Theta_j - \epsilon, \dots, \Theta_n)}{2\epsilon}$</p>
<p>A good small value for ϵ (epsilon), guarantees the math above to become true. If the value be much smaller, may we will end up with numerical problems. The professor Andrew usually uses the value $\epsilon = 10^{-4}$.</p>
<p><strong>Implement</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">epsilon = 1e-4;</div><div class="line">for i = 1 : n,</div><div class="line">  thetaPlus = theta;</div><div class="line">  thetaPlus(i) += epsilon;</div><div class="line">  thetaMinus = theta;</div><div class="line">  thetaMinus(i) -= epsilon;</div><div class="line">  gradApprox(i) = (J(thetaPlus) - J(thetaMinus))/(2*epsilon)</div><div class="line">end;</div></pre></td></tr></table></figure>
<p>We then want to check that <code>gradApprox</code> $\approx$ <code>deltaVector</code>.</p>
<h4 id="Implement-Note"><a href="#Implement-Note" class="headerlink" title="Implement Note"></a>Implement Note</h4><ul>
<li>Implement backprop to compute <code>DVec</code> (unrolled $D^{(1)}, D^{(2)}, D^{(3)}$).</li>
<li>Implement numerical gradient check to compute <code>gradApprox</code>.</li>
<li>Make sure they give similar values.</li>
<li>Turn off gradient checking. Using backprop code for learning.</li>
</ul>
<h4 id="Important"><a href="#Important" class="headerlink" title="Important"></a>Important</h4><ul>
<li>Be sure to disable your gradient checking code before training your classifier. If you run numerical gradient computation on every iteration of gradient descent (or in the inner loop of <code>costFunction(...)</code>), your code will be <u>very</u> slow.</li>
</ul>
<h3 id="Random-Initialization"><a href="#Random-Initialization" class="headerlink" title="Random Initialization"></a>Random Initialization</h3><p>Initializing all theta weights to zero does not work with neural networks. When we backpropagate, all nodes will update to the same value repeatedly.</p>
<p>Instead we can randomly initialize our weights to break symmetry.</p>
<ul>
<li>Initialize each $\Theta^{(l)}_{ij}$ to a random value between $[-\epsilon, \epsilon]$<ul>
<li>$\epsilon = \dfrac{\sqrt{6}}{\sqrt{\mathrm{Loutput} + \mathrm{Linput}}}$</li>
<li>$\Theta^{(l)} = 2\epsilon\ rand(Loutput, Linput+1)-\epsilon$</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">% If the dimensions of Theta1 is 10x11, Theta2 is 10x11 and Theta3 is 1x11.</div><div class="line"></div><div class="line">Theta1 = rand(10,11) * (2 * INIT_EPSILON) - INIT_EPSILON;</div><div class="line">Theta2 = rand(10,11) * (2 * INIT_EPSILON) - INIT_EPSILON;</div><div class="line">Theta3 = rand(1,11) * (2 * INIT_EPSILON) - INIT_EPSILON;</div></pre></td></tr></table></figure>
<blockquote>
<p>Note: this epsilon is unrelated to the epsilon from Gradient Checking</p>
</blockquote>
<h3 id="Putting-It-Together"><a href="#Putting-It-Together" class="headerlink" title="Putting It Together"></a>Putting It Together</h3><p>First, pick a network architecture; choose the layout of your neural network, including how many hidden units in each layer and how many layers total.</p>
<ul>
<li>Number of input units = dimension of features $x^{(i)}$</li>
<li>Number of output units = number of classes</li>
<li>Number of hidden units per layer = usually more the better (must balance with cost of computation as it increases with more hidden units)</li>
<li>Defaults: 1 hidden layer. If more than 1 hidden layer, then the same number of units in every hidden layer.</li>
</ul>
<p><strong>Training a Neural Network</strong></p>
<ol>
<li>Randomly initialize the weights</li>
<li>Implement forward propagation to get $h_\theta(x^{(i)})$</li>
<li>Implement the cost function</li>
<li>Implement backpropagation to compute partial derivatives</li>
<li>Use gradient checking to confirm that your backpropagation works. Then disable gradient checking.</li>
<li>Use gradient descent or a built-in optimization function to minimize the cost function with the weights in theta.</li>
</ol>
<p>When we perform forward and back propagation, we loop on every training example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for i = 1:m,</div><div class="line">   Perform forward propagation and backpropagation using example (x(i),y(i))</div><div class="line">   (Get activations a(l) and delta terms d(l) for l = 2,...,L</div></pre></td></tr></table></figure>
<h1 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h1><ol>
<li>You are training a three layer neural network and would like to use backpropagation to compute the gradient of the cost function. In the backpropagation algorithm, one of the steps is to update $\Delta^{(2)}<em>{ij} := \Delta^{(2)}</em>{ij} +  \delta^{(3)}_i * (a^{(2)})_j$ for every $i,j$. Which of the following is a correct vectorization of this step?<ul>
<li>$\Delta(2) :=\Delta(2)+(a(3))^T \ast\delta(2)$</li>
<li>$\Delta(2) :=\Delta(2)+\delta(3) \ast (a(3))^T$</li>
<li>$\Delta(2) :=\Delta(2)+(a(2))^T \ast \delta(3)$</li>
<li><u>$\Delta(2) :=\Delta(2)+\delta(3) \ast (a(2))^T$</u></li>
</ul>
</li>
<li>Suppose <code>Theta1</code> is a $5\times 3$ matrix, and <code>Theta2</code> is a $4\times 6$ matrix. You set <code>thetaVec=[Theta1(:);Theta2(:)]</code>. Which of the following correctly recovers <code>Theta2</code>?<ul>
<li><u><code>reshape(thetaVec(16:39),4,6)</code></u></li>
<li><code>reshape(thetaVec(15:38),4,6)</code></li>
<li><code>reshape(thetaVec(16:24),4,6)</code></li>
<li><code>reshape(thetaVec(15:39),4,6)</code></li>
<li><code>reshape(thetaVec(16:39),6,4)</code></li>
</ul>
</li>
<li>Let $J(\theta) = 3\theta^3 + 2$. Let $\theta=1$, and $\epsilon=0.01$. Use the formula $\frac{J(\theta+\epsilon)-J(\theta-\epsilon)}{2\epsilon}$ to numerically compute an approximation to the derivative at $\theta=1$. What value do you get? (When $\theta=1$, the true/exact derivative is $ \frac{d J(\theta)}{ d\theta}=9$.)<ul>
<li>9</li>
<li>8.9997</li>
<li>11</li>
<li><u>9.0003</u></li>
</ul>
</li>
<li><p>Which of the following statements are true? Check all that apply.</p>
<ul>
<li>Computing the gradient of the cost function in a neural network has the same efficiency when we use backpropagation or when we numerically compute it using the method of gradient checking.</li>
<li><u>For computational efficiency, after we have performed gradient checking to verify that our backpropagation code is correct, we usually disable gradient checking before using backpropagation to train the network.</u></li>
<li><u>Using gradient checking can help verify if one’s implementation of backpropagation is bug-free.</u></li>
<li>Gradient checking is useful if we are using one of the advanced optimization methods (such as in fminunc) as our optimization algorithm. However, it serves little purpose if we are using gradient descent.</li>
<li>Using a large value of $\lambda$ cannot hurt the performance of your neural network; the only reason we do not set $\lambda$ to be too large is to avoid numerical problems.</li>
<li><u>If our neural network overfits the training set, one reasonable step to take is to increase the regularization parameter $\lambda$.</u></li>
<li>Gradient checking is useful if we are using gradient descent as our optimization algorithm. However, it serves little purpose if we are using one of the advanced optimization methods (such as in fminunc).</li>
</ul>
</li>
<li><p>Which of the following statements are true? Check all that apply.</p>
<ul>
<li>Suppose that the parameter $\theta(1)$ is a square matrix (meaning the number of rows equals the number of columns). If we replace $\theta(1)$ with its transpose ($\theta(1)^T$), then we have not changed the function that the network is computing.</li>
<li><u>Suppose we have a correct implementation of backpropagation, and are training a neural network using gradient descent. Suppose we plot $J(\theta)$ as a function of the number of iterations, and find that it is increasing rather than decreasing. One possible cause of this is that the learning rate $\alpha$ is too large.</u></li>
<li><u>If we are training a neural network using gradient descent, one reasonable “debugging” step to make sure it is working is to plot $J(\theta)$ as a function of the number of iterations, and make sure it is decreasing (or at least non-increasing) after each iteration.</u></li>
<li>Suppose we are using gradient descent with learning rate $\alpha$. For logistic regression and linear regression, $J(\theta)$ was a convex optimization problem and thus we did not want to choose a learning rate $\alpha$ that is too large. For a neural network however, $J(\theta)$ may not be convex, and thus choosing a very large value of $\alpha$ can only speed up convergence.</li>
<li>Suppose you have a three layer network with parameters $\theta(1)$ (controlling the function mapping from the inputs to the hidden units) and $\theta(2)$ (controlling the mapping from the hidden units to the outputs). If we set all the elements of $\theta(1)$ to be 0, and all the elements of $\theta(2)$ to be 1, then this suffices for symmetry breaking, since the neurons are no longer all computing the same function of the input.</li>
<li>If we initialize all the parameters of a neural network to ones instead of zeros, this will suffice for the purpose of “symmetry breaking” because the parameters are no longer symmetrically equal to zero.</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Neural-Networks-Learning&quot;&gt;&lt;a href=&quot;#Neural-Networks-Learning&quot; class=&quot;headerlink&quot; title=&quot;Neural Networks: Learning&quot;&gt;&lt;/a&gt;Neural Networks: Learning&lt;/h1&gt;&lt;h2 id=&quot;Cost-Function-and-Backpropagation&quot;&gt;&lt;a href=&quot;#Cost-Function-and-Backpropagation&quot; class=&quot;headerlink&quot; title=&quot;Cost Function and Backpropagation&quot;&gt;&lt;/a&gt;Cost Function and Backpropagation&lt;/h2&gt;&lt;h3 id=&quot;Cost-Function&quot;&gt;&lt;a href=&quot;#Cost-Function&quot; class=&quot;headerlink&quot; title=&quot;Cost Function&quot;&gt;&lt;/a&gt;Cost Function&lt;/h3&gt;&lt;p&gt;Let’s first define a few variables that we will need to use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$L$ = total number of layers in the network&lt;/li&gt;
&lt;li&gt;$s_l$ = number of units (not counting bias unit) in layer $l$&lt;/li&gt;
&lt;li&gt;$K$ = number of output units/classes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recall that the cost function for regularized logistic regression was:&lt;/p&gt;
&lt;p&gt;$J(\theta) = - \frac{1}{m} \sum_{i=1}^m \large[ y^{(i)}\ \log (h_\theta (x^{(i)})) + (1 - y^{(i)})\ \log (1 - h_\theta(x^{(i)}))\large] + \frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2$&lt;/p&gt;
&lt;p&gt;For neural networks, it is going to be slightly more complicated:&lt;/p&gt;
&lt;p&gt;$J(\Theta) = - \frac{1}{m} \sum_{i=1}^m \sum_{k=1}^K \left[y^{(i)}_k \log ((h_\Theta (x^{(i)}))_k) + (1 - y^{(i)}_k)\log (1 - (h_\Theta(x^{(i)}))_k)\right] + \frac{\lambda}{2m}\sum_{l=1}^{L-1} \sum_{i=1}^{s_l} \sum_{j=1}^{s_{l+1}} ( \Theta_{j,i}^{(l)})^2$&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="Coursera" scheme="http://www.yuthon.com/tags/Coursera/"/>
    
      <category term="Machine Learning" scheme="http://www.yuthon.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Machine Learning - Week 4</title>
    <link href="http://www.yuthon.com/2016/08/15/Coursera-Machine-Learning-Week-4/"/>
    <id>http://www.yuthon.com/2016/08/15/Coursera-Machine-Learning-Week-4/</id>
    <published>2016-08-15T09:05:54.000Z</published>
    <updated>2016-08-16T14:21:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Neural-Networks-Representation"><a href="#Neural-Networks-Representation" class="headerlink" title="Neural Networks: Representation"></a>Neural Networks: Representation</h1><h2 id="Motivations"><a href="#Motivations" class="headerlink" title="Motivations"></a>Motivations</h2><h3 id="Non-linear-Hypotheses"><a href="#Non-linear-Hypotheses" class="headerlink" title="Non-linear Hypotheses"></a>Non-linear Hypotheses</h3><p><u>Performing linear regression with a complex set of data with many features is very unwieldy.</u> For 100 features, if we wanted to make them quadratic we would get 5050 resulting new features.</p>
<p>We can approximate the growth of the number of new features we get with all quadratic terms with $\mathcal{O}(n^2/2)$. And if you wanted to include all cubic terms in your hypothesis, the features would grow asymptotically at $\mathcal{O}(n^3)$. <u>These are very steep growths, so as the number of our features increase, the number of quadratic or cubic features increase very rapidly and becomes quickly impractical</u>.</p>
<p><strong>Example</strong>: let our training set be a collection of 50x50 pixel black-and-white photographs, and our goal will be to classify which ones are photos of cars. Our feature set size is then n=2500 if we compare every pair of pixels (7500 if RGB). Now let’s say we need to make a quadratic hypothesis function. With quadratic features, our growth is $\mathcal{O}(n^2/2)$. So our total features will be about 25002/2=3125000, which is very impractical.</p>
<p><img src="/images/car-examle.png" alt="car example"></p>
<a id="more"></a>
<h3 id="Neurons-and-the-Brain"><a href="#Neurons-and-the-Brain" class="headerlink" title="Neurons and the Brain"></a>Neurons and the Brain</h3><p>Origins: Algorithms that try to mimic the brain.</p>
<ul>
<li>Was very widely used in 80s and early 90s; popularity diminished in late 90s.</li>
<li>Recent resurgence: State-of-the-art technique for mant applications</li>
</ul>
<h4 id="The-“one-learning-algorithm”-hypothesis"><a href="#The-“one-learning-algorithm”-hypothesis" class="headerlink" title="The “one learning algorithm” hypothesis"></a>The “one learning algorithm” hypothesis</h4><p>There is evidence that the brain uses only one “learning algorithm” for all its different functions. Scientists have tried cutting (in an animal brain) the connection between the ears and the auditory cortex and rewiring the optical nerve with the auditory cortex to find that the auditory cortex literally learns to see.</p>
<p><img src="/images/The_one_learning_algorithm_hypothesis.png" alt="The &quot;one learning algorithm&quot; hypothesis"></p>
<p><img src="/images/sensor_representations_in_the_brain.png" alt="Sensor representations in the brain"></p>
<h2 id="Neural-Networks"><a href="#Neural-Networks" class="headerlink" title="Neural Networks"></a>Neural Networks</h2><h3 id="Model-Representation-I"><a href="#Model-Representation-I" class="headerlink" title="Model Representation I"></a>Model Representation I</h3><h4 id="Neuron-in-the-brain"><a href="#Neuron-in-the-brain" class="headerlink" title="Neuron in the brain"></a>Neuron in the brain</h4><p>At a very simple level, neurons are basically computational units that take input (<strong>dendrites</strong>, 树突) as electrical input (called “spikes”) that are channeled to outputs (<strong>axons</strong>, 轴突).</p>
<p><img src="/images/neruon_in_the_brain.png" alt="neruon_in_the_brain"></p>
<h4 id="Neuron-model-Logistic-unit"><a href="#Neuron-model-Logistic-unit" class="headerlink" title="Neuron model: Logistic unit"></a>Neuron model: Logistic unit</h4><ul>
<li>In our model, our dendrites are like the input features ($x_1 \cdots x_n$), and the output is the result of our hypothesis function $h_\theta (x)$:</li>
<li>In this model our $x_0$ input node is sometimes called the “<strong>bias unit</strong>.” It is always equal to 1.</li>
<li>In neural networks, we use the same logistic function as in classification: $\frac{1}{1 + e^{-\theta^Tx}}$. In neural networks however we sometimes call it a sigmoid (logistic) <strong>activation function</strong>.</li>
<li>Our $\theta$ parameters are sometimes instead called “<strong>weights</strong>“ in the neural networks model.</li>
</ul>
<p><img src="/images/neuron_model_logistic_unit.png" alt="neuron_model_logistic_unit"></p>
<h4 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h4><ul>
<li>The first layer is called the “<strong>input layer</strong>“ and the final layer the “<strong>output layer</strong>“, which gives the final value computed on the hypothesis.</li>
<li>We can have intermediate layers of nodes between the input and output layers called the “<strong>hidden layer</strong>“.</li>
<li>$a_i^{(j)}$ = “activation” of unit $i$ in layer $j$<ul>
<li>$a_1^{(2)} = g(\Theta_{10}^{(1)}x_0 + \Theta_{11}^{(1)}x_1 + \Theta_{12}^{(1)}x_2 + \Theta_{13}^{(1)}x_3)$</li>
<li>$a_2^{(2)} = g(\Theta_{20}^{(1)}x_0 + \Theta_{21}^{(1)}x_1 + \Theta_{22}^{(1)}x_2 + \Theta_{23}^{(1)}x_3)$</li>
<li>$a_3^{(2)} = g(\Theta_{30}^{(1)}x_0 + \Theta_{31}^{(1)}x_1 + \Theta_{32}^{(1)}x_2 + \Theta_{33}^{(1)}x_3)$</li>
<li>$h_\Theta(x) = a_1^{(3)} = g(\Theta_{10}^{(2)}a_0^{(2)} + \Theta_{11}^{(2)}a_1^{(2)} + \Theta_{12}^{(2)}a_2^{(2)} + \Theta_{13}^{(2)}a_3^{(2)})$</li>
</ul>
</li>
<li>$\Theta^{(j)}$ = matrix of weights controlling function mapping from layer $j$ to layer $j+1$<ul>
<li>If network has $s<em>j$ units in layer $j$ and $s</em>{j+1}$ units in layer $j+1$, then $\Theta ^{(j)}$ will be of dimension $s<em>{j+1}×(s</em>{j}+1)$.</li>
</ul>
</li>
</ul>
<p><img src="/images/neural_network.png" alt="neural_network"></p>
<h3 id="Model-Representation-II"><a href="#Model-Representation-II" class="headerlink" title="Model Representation II"></a>Model Representation II</h3><h4 id="Forward-propagation-Vectorized-implementation"><a href="#Forward-propagation-Vectorized-implementation" class="headerlink" title="Forward propagation: Vectorized implementation"></a>Forward propagation: Vectorized implementation</h4><p>The vector representation of $x$ and $z^{(j)}$ is:</p>
<p>$x = \begin{bmatrix}x_0 \\ x_1 \\ \cdots \\ x_n\end{bmatrix} , z^{(j)} = \begin{bmatrix}z_1^{(j)} \\ z_2^{(j)} \\ \cdots \\ z_n^{(j)}\end{bmatrix}$</p>
<p>Setting $x=a^{(1)}$, we can rewrite the equation as:</p>
<p>$z^{(j)} = \Theta^{(j-1)}a^{(j-1)}$</p>
<p>Now we can get a vector of our activation nodes for layer $j$ as follows:</p>
<p>$a^{(j)} = g(z^{(j)})$</p>
<blockquote>
<p>We can then add a bias unit (equal to 1) to layer $j$ after we have computed $a^{(j)}$. This will be element $a^{(j)}_0$ and will be equal to 1.</p>
</blockquote>
<p>We then get our final result with:</p>
<p>$h_\Theta(x) = a^{(j+1)} = g(z^{(j+1)})$</p>
<blockquote>
<p>This last theta matrix ($\Theta ^{(j)}$) will have only <strong>one row</strong> so that our result is a single number.</p>
</blockquote>
<p>All of this is called <strong>Forward propagation</strong> (前向传播). The forward propagation step in a neural network works where you start from the activations of the input layer and forward propagate that to the first hidden layer, then the second hidden layer, and then finally the output layer.</p>
<h4 id="Neural-Network-learning-its-own-features"><a href="#Neural-Network-learning-its-own-features" class="headerlink" title="Neural Network learning its own features"></a>Neural Network learning its own features</h4><p>The neural network, instead of being constrained to feed the features $x_1$, $x_2$, $x_3$ to logistic regression. It gets to learn its own features, $a_1$, $a_2$, $a_3$, to feed into the logistic regression.</p>
<p>Depending on what parameters it chooses for $\Theta _1$, you can learn some pretty interesting and complex features and therefore you can end up with a better hypotheses than using the raw features.</p>
<h2 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h2><h3 id="Examples-and-Intuitions-I"><a href="#Examples-and-Intuitions-I" class="headerlink" title="Examples and Intuitions I"></a>Examples and Intuitions I</h3><h4 id="AND-function"><a href="#AND-function" class="headerlink" title="AND function"></a>AND function</h4><p><img src="/images/and_function.png" alt="AND function"></p>
<p>We have:</p>
<ul>
<li>$x_1, x_2 \in {0,1}$</li>
<li>$y=x_1\ AND\ x_2$</li>
<li>$\Theta^{(1)} =\begin{bmatrix}-30 &amp; 20 &amp; 20\end{bmatrix}$</li>
</ul>
<p>And we know the plot of sigmoid function</p>
<p><img src="/images/sigmod_function_value.png" alt="sigmod_function_value"></p>
<p>So the results of $h_\Theta(x) = g(-30 + 20x_1 + 20x_2)$ are</p>
<table>
<thead>
<tr>
<th style="text-align:center">$x_1$</th>
<th style="text-align:center">$x_2$</th>
<th style="text-align:center">$h_\Theta (x)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">$g(-30) \approx 0$</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">$g(-10) \approx 0$</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">$g(-10) \approx 0$</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">$g(10) \approx 1$</td>
</tr>
</tbody>
</table>
<h4 id="OR-function"><a href="#OR-function" class="headerlink" title="OR function"></a>OR function</h4><p>$\Theta^{(1)} =\begin{bmatrix}-10 &amp; 20 &amp; 20\end{bmatrix}$</p>
<p><img src="/images/or_function.png" alt="OR function"></p>
<table>
<thead>
<tr>
<th style="text-align:center">$x_1$</th>
<th style="text-align:center">$x_2$</th>
<th style="text-align:center">$h_\Theta (x)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">$g(-10) \approx 0$</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">$g(10) \approx 1$</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">$g(10) \approx 1$</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">$g(10) \approx 1$</td>
</tr>
</tbody>
</table>
<h3 id="Examples-and-Intuitions-II"><a href="#Examples-and-Intuitions-II" class="headerlink" title="Examples and Intuitions II"></a>Examples and Intuitions II</h3><h4 id="Negation-NOT-function"><a href="#Negation-NOT-function" class="headerlink" title="Negation (NOT function)"></a>Negation (NOT function)</h4><p>$\Theta^{(1)} =\begin{bmatrix}10 &amp; -20\end{bmatrix}$</p>
<p><img src="/images/not_function.png" alt="NOT function"></p>
<table>
<thead>
<tr>
<th style="text-align:center">$x_1$</th>
<th style="text-align:center">$h_\Theta (x)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">$g(10) \approx 1$</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">$g(-10) \approx 0$</td>
</tr>
</tbody>
</table>
<h4 id="NOR-function"><a href="#NOR-function" class="headerlink" title="NOR function"></a>NOR function</h4><p>$\Theta^{(1)} = \begin{bmatrix}10 &amp; -20 &amp; -20\end{bmatrix}$</p>
<p><img src="/images/nor_function.png" alt="NOR function"></p>
<table>
<thead>
<tr>
<th style="text-align:center">$x_1$</th>
<th style="text-align:center">$x_2$</th>
<th style="text-align:center">$h_\Theta (x)$</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">$g(10) \approx 1$</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">$g(-10) \approx 0$</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">$g(-10) \approx 0$</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">$g(-30) \approx 0$</td>
</tr>
</tbody>
</table>
<h4 id="XNOR-function"><a href="#XNOR-function" class="headerlink" title="XNOR function"></a>XNOR function</h4><p><img src="/images/xnor_function.png" alt="XNOR function"></p>
<h3 id="Multiclass-Classification"><a href="#Multiclass-Classification" class="headerlink" title="Multiclass Classification"></a>Multiclass Classification</h3><p>To classify data into multiple classes, we let our hypothesis function return a vector of values. Say we wanted to classify our data into one of four final resulting classes:</p>
<p><img src="/images/NN_one_vs_all.png" alt="Multiple output units"></p>
<p>Our final layer of nodes, when multiplied by its theta matrix, will result in another vector, on which we will apply the $g()$ logistic function to get a vector of hypothesis values.</p>
<p>Our resulting hypothesis for one set of inputs may look like:</p>
<p>$h_\Theta(x) = \begin{bmatrix}0 \\ 0 \\ 1 \\ 0 \\ \end{bmatrix}$</p>
<p>In which case our resulting class is the third one down, or $h_\Theta (x)_3$.</p>
<p>We can define our set of resulting classes as $y$:</p>
<p>$y^{(i)} = \begin{bmatrix}1\\ 0\\ 0\\ 0\end{bmatrix},\ \begin{bmatrix}0 \\ 1\\ 0\\ 0\end{bmatrix},\ \begin{bmatrix}0\\ 0\\ 1\\ 0\end{bmatrix},\ \begin{bmatrix}0\\ 0\\ 0\\ 1\end{bmatrix}$</p>
<p>Our final value of our hypothesis for a set of inputs will be one of the elements in $y$.</p>
<h2 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h2><ol>
<li><p>Which of the following statements are true? Check all that apply.</p>
<ul>
<li><strong>TRUE</strong> If a neural network is overfitting the data, one solution would be to increase the regularization parameter $\lambda$.</li>
<li><strong>FALSE</strong> If a neural network is overfitting the data, one solution would be to decrease the regularization parameter $\lambda$.</li>
<li><strong>FALSE</strong> Suppose you have a multi-class classification problem with three classes, trained with a 3 layer network. Let $a^{(3)}_1 = (h_\Theta(x))_1$ be the activation of the first output unit, and similarly $a^{(3)}_2 = (h_\Theta(x))_2$ and $a^{(3)}_3 = (h_\Theta(x))_3$. Then for any input x, it must be the case that $a^{(3)}_1 + a^{(3)}_2 + a^{(3)}_3 = 1$.<ul>
<li>The outputs of a neural network are not probabilities, so their sum need not be 1.</li>
</ul>
</li>
<li><strong>TRUE</strong> In a neural network with many layers, we think of each successive layer as being able to use the earlier layers as features, so as to be able to compute increasingly complex functions.</li>
</ul>
</li>
<li><p>Consider the following neural network which takes two binary-valued inputs $x_1,x_2\in {0,1}$ and outputs $h_\Theta (x)$. Which of the following logical functions does it (approximately) compute?</p>
<p><img src="/images/quiz_4-2.png" alt="quiz_4-2"></p>
<ul>
<li>OR</li>
</ul>
</li>
<li><p>Consider the neural network given below. Which of the following equations correctly computes the activation $a{(3)}_1$? Note: $g(z)$ is the sigmoid activation function.</p>
<p><img src="/images/quiz_4-3.png" alt="quiz_4-3"></p>
<ul>
<li>$a_1^{(3)} = g(\Theta_{1,0}^{(2)}a_0^{(2)} + \Theta_{1,1}^{(2)}a_1^{(2)} + \Theta_{1,2}^{(2)}a_2^{(2)})$</li>
</ul>
</li>
<li><p>You have the following neural network:</p>
<p><img src="/images/quiz_4-4.png" alt="quiz_4-4"></p>
<p>You’d like to compute the activations of the hidden layer $a^{(2)}\in R^3$. One way to do so is the following Octave code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">% Theta1 is Theta with superscript &quot;(1)&quot; from lecture</div><div class="line">% ie, the matrix of parmeters for the mapping from layer 1 (input) to layer 2</div><div class="line">% Theta1 has size 3x3</div><div class="line">% Assume &apos;sigmoid&apos; is a built-in function to compute 1 / (1 + exp(-z))</div><div class="line"></div><div class="line">a2 = zeros(3, 1);</div><div class="line">for i = 1:3</div><div class="line">  for j = 1:3</div><div class="line">    a2(i) = a2(i) + x(j) * Theta1(i, j);</div><div class="line">  end</div><div class="line">  a2(i) = sigmoid(a2(i));</div><div class="line">end</div></pre></td></tr></table></figure>
<p>You want to have a vectorized implementation of this (i.e., one that does not use for loops). Which of the following implementations correctly compute $a^{(2)}$? Check all that apply.</p>
<ul>
<li><code>a2 = sigmoid (Theta1 * x);</code></li>
</ul>
</li>
<li><p>You are using the neural network pictured below and have learned the parameters $\Theta^{(1)} = \begin{bmatrix} 1 &amp; 0.5 &amp; 1.9 \\ 1 &amp; 1.2 &amp; 2.7 \end{bmatrix}$ and $\Theta^{(2)} = \begin{bmatrix} 1 &amp;  -0.2 &amp; -1.7 \end{bmatrix}$. Suppose you swap the parameters for the first hidden layer between its two units so $\Theta^{(1)} = \begin{bmatrix} 1 &amp; 1.2 &amp; 2.7 \\ 1  &amp; 0.5 &amp; 1.9 \end{bmatrix}$ and also swap the output layer so $\Theta^{(2)} = \begin{bmatrix} 1 &amp; -1.7 &amp; -0.2 \end{bmatrix}$. How will this change the value of the output $h_\Theta (x)$?</p>
<p><img src="/images/quiz_4-5.png" alt="quiz_4-5"></p>
<ul>
<li>It will stay the same.</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Neural-Networks-Representation&quot;&gt;&lt;a href=&quot;#Neural-Networks-Representation&quot; class=&quot;headerlink&quot; title=&quot;Neural Networks: Representation&quot;&gt;&lt;/a&gt;Neural Networks: Representation&lt;/h1&gt;&lt;h2 id=&quot;Motivations&quot;&gt;&lt;a href=&quot;#Motivations&quot; class=&quot;headerlink&quot; title=&quot;Motivations&quot;&gt;&lt;/a&gt;Motivations&lt;/h2&gt;&lt;h3 id=&quot;Non-linear-Hypotheses&quot;&gt;&lt;a href=&quot;#Non-linear-Hypotheses&quot; class=&quot;headerlink&quot; title=&quot;Non-linear Hypotheses&quot;&gt;&lt;/a&gt;Non-linear Hypotheses&lt;/h3&gt;&lt;p&gt;&lt;u&gt;Performing linear regression with a complex set of data with many features is very unwieldy.&lt;/u&gt; For 100 features, if we wanted to make them quadratic we would get 5050 resulting new features.&lt;/p&gt;
&lt;p&gt;We can approximate the growth of the number of new features we get with all quadratic terms with $\mathcal{O}(n^2/2)$. And if you wanted to include all cubic terms in your hypothesis, the features would grow asymptotically at $\mathcal{O}(n^3)$. &lt;u&gt;These are very steep growths, so as the number of our features increase, the number of quadratic or cubic features increase very rapidly and becomes quickly impractical&lt;/u&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;: let our training set be a collection of 50x50 pixel black-and-white photographs, and our goal will be to classify which ones are photos of cars. Our feature set size is then n=2500 if we compare every pair of pixels (7500 if RGB). Now let’s say we need to make a quadratic hypothesis function. With quadratic features, our growth is $\mathcal{O}(n^2/2)$. So our total features will be about 25002/2=3125000, which is very impractical.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/car-examle.png&quot; alt=&quot;car example&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="Coursera" scheme="http://www.yuthon.com/tags/Coursera/"/>
    
      <category term="Machine Learning" scheme="http://www.yuthon.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Machine Learning - Week 3</title>
    <link href="http://www.yuthon.com/2016/08/05/Coursera-Machine-Learning-Week-3/"/>
    <id>http://www.yuthon.com/2016/08/05/Coursera-Machine-Learning-Week-3/</id>
    <published>2016-08-05T04:16:08.000Z</published>
    <updated>2016-08-15T05:47:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Logistic-Regression"><a href="#Logistic-Regression" class="headerlink" title="Logistic Regression"></a>Logistic Regression</h1><h2 id="Classification-and-Representation"><a href="#Classification-and-Representation" class="headerlink" title="Classification and Representation"></a>Classification and Representation</h2><h3 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h3><ul>
<li>Calssification Problem<ul>
<li>$y\in {0,1}$<ul>
<li>0: “Negative Class”,  负类</li>
<li>1: “Positive Class”, 正类</li>
</ul>
</li>
<li>One method is to use linear regression and map all predictions greater than 0.5 as a 1 and all less than 0.5 as a 0. This method doesn’t work well because classification is not actually a linear function.</li>
</ul>
</li>
<li>Logistic Regression (逻辑回归) : $0\le h_\theta \le 1$</li>
</ul>
<a id="more"></a>
<h3 id="Hypothesis-Representation"><a href="#Hypothesis-Representation" class="headerlink" title="Hypothesis Representation"></a>Hypothesis Representation</h3><h4 id="Logistic-Regression-Model"><a href="#Logistic-Regression-Model" class="headerlink" title="Logistic Regression Model"></a>Logistic Regression Model</h4><p>$h_\theta (x) = \frac{1}{1+e^{-\theta ^T x}}​$</p>
<ul>
<li><p>Want $0\le h_\theta(x)\le 1$</p>
<ul>
<li><p>$h_\theta (x) = g(\theta ^T x)$</p>
</li>
<li><p>$g(z) = \frac{1}{1+e^{-z}}$</p>
<ul>
<li><p>Called “Sigmod function” or “Logistic function”</p>
<p><img src="/images/sigmod_function.png" alt="sigmod function"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Interpretation-of-Hypothesis-Output"><a href="#Interpretation-of-Hypothesis-Output" class="headerlink" title="Interpretation of Hypothesis Output"></a>Interpretation of Hypothesis Output</h4><ul>
<li>$h_\theta (x)$ = estimated probability that $y=1$ on input $x$<ul>
<li>$h_\theta (x) = P(y=1|x; \theta)$<ul>
<li>probability that $y=1$, given $x$, parameterised by $\theta$.</li>
</ul>
</li>
<li>$P(y=0|x;\theta ) = 1 - P(y=1|x;\theta )$</li>
</ul>
</li>
</ul>
<h3 id="Decision-Boundary"><a href="#Decision-Boundary" class="headerlink" title="Decision Boundary"></a>Decision Boundary</h3><p>In order to get our discrete 0 or 1 classification, we can suppose</p>
<ul>
<li>$h_\theta(x) \geq 0.5 \rightarrow y = 1$</li>
<li>$h_\theta(x) &lt; 0.5 \rightarrow y = 0$</li>
</ul>
<p>The way our logistic function $g$ behaves is that when its input is greater than or equal to zero, its output is greater than or equal to 0.5:</p>
<ul>
<li>$g(z) \ge 0.5$ when $z\ge 0$, i.e., $\theta ^T x \ge 0$</li>
</ul>
<p>In conclusion, we can now say:</p>
<ul>
<li>$\theta^T x \geq 0 \Rightarrow y = 1$</li>
<li>$\theta^T x &lt; 0 \Rightarrow y = 0$</li>
</ul>
<h4 id="Decision-boundaries"><a href="#Decision-boundaries" class="headerlink" title="Decision boundaries"></a>Decision boundaries</h4><p>The <strong>decision boundary</strong> is the line that separates the area where $y=0$ and where $y=1$. It is created by our hypothesis function $\theta^T x = 0$.</p>
<p><img src="/images/dicision_boundary.png" alt="Disicion Boundary"></p>
<p>The decision boundary is a property, not of the trading set, but of the hypothesis $h_\theta(x)$ under the parameters. As long as we’re given parameter vector $\theta$, that defines the decision boundary. <u>But the training set is not what we use to define the decision boundary.</u></p>
<h4 id="Non-linear-decision-boundaries"><a href="#Non-linear-decision-boundaries" class="headerlink" title="Non-linear decision boundaries"></a>Non-linear decision boundaries</h4><p>The input to the sigmoid function $g(z)$ (e.g. $\theta ^T x$) doesn’t need to be linear, and could be a function that describes a circle (e.g. $z = \theta_0 + \theta _1 x_1 + \theta _2 x_2 + \theta _3 x_1^2 + \theta _4 x_2^2$) or any shape to fit our data.</p>
<p><img src="/images/nonlinear_decision_boundary.png" alt="nonlinear decision boundary"></p>
<h2 id="Logistic-Regression-Model-1"><a href="#Logistic-Regression-Model-1" class="headerlink" title="Logistic Regression Model"></a>Logistic Regression Model</h2><h3 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h3><p>We cannot use the same cost function that we use for linear regression because the Logistic Function will cause the output to be wavy, causing many local optima. In other words, it will not be a convex function (凸函数).</p>
<p><img src="/images/non-convex_and_convex_function.png" alt="non-convex and convex function"></p>
<p>Instead, our cost function for logistic regression looks like:</p>
<p>$J(\theta) = \dfrac{1}{m} \sum<em>{i=1}^m \mathrm{Cost}(h</em>\theta(x^{(i)}),y^{(i)})$</p>
<p>$\mathrm{Cost}(h<em>\theta(x),y) = \begin{cases}-\log(h</em>\theta(x)) ,&amp;\text{if y = 1}\newline -\log(1-h_\theta(x)) ,&amp;\text{if y = 0}\end{cases}$</p>
<ul>
<li>$\mathrm{Cost} = 0$ if $y=1, h_\theta (x)=1$</li>
<li>But as $h_\theta (x) \to 0, \mathrm{Cost} \to \infty$<ul>
<li>Captures intuition that if $h_\theta (x) = 0$ (predict $P(y=1|x;\theta ) = 0$), but $y=1$, we’ll <strong>penalise</strong> learning algorithm by a very large cost.</li>
</ul>
</li>
</ul>
<p><img src="/images/Logistic_regression_cost_function_positive_class.png" alt="Logistic_regression_cost_function_positive_class"></p>
<p><img src="/images/Logistic_regression_cost_function_negative_class.png" alt="Logistic_regression_cost_function_negative_class"></p>
<h3 id="Simplified-Cost-Function-and-Gradient-Descent"><a href="#Simplified-Cost-Function-and-Gradient-Descent" class="headerlink" title="Simplified Cost Function and Gradient Descent"></a>Simplified Cost Function and Gradient Descent</h3><h4 id="Simplified-Cost-Function"><a href="#Simplified-Cost-Function" class="headerlink" title="Simplified Cost Function"></a>Simplified Cost Function</h4><p>We can compress our cost function’s two conditional cases into one case:</p>
<p>$\mathrm{Cost}(h_\theta(x),y) = - y \log(h_\theta(x)) - (1 - y) \log(1 - h_\theta(x))$</p>
<p>We can fully write out our entire cost function as follows:</p>
<p>$J(\theta) = - \frac{1}{m} \sum_{i=1}^m [y^{(i)}\log (h_\theta (x^{(i)})) + (1 - y^{(i)})\log (1 - h_\theta(x^{(i)}))]$</p>
<ul>
<li>This cost function can be derived from statistics using the principle of maximum likelihood estimation (极大似然估计). Which is an idea in statistics for how to efficiently find parameters’ data for different models.</li>
<li>And it also has a nice property that it is convex.</li>
</ul>
<p>A vectorized implementation is:</p>
<p>$h = g(X\theta)$</p>
<p>$ J(\theta)  = \frac{1}{m} \cdot \left(-y^{T}\log(h)-(1-y)^{T}\log(1-h)\right)$</p>
<h4 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h4><p>$Repeat \lbrace \\ \theta_j := \theta_j - \alpha \dfrac{\partial}{\partial \theta_j}J(\theta)= \theta_j - \frac{\alpha}{m} \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)}) x_j^{(i)} \\ \rbrace$</p>
<ul>
<li><p>Notice that this algorithm is identical to the one we used in linear regression (only $h_\theta (x)$ changes). We still have to simultaneously update all values in theta.</p>
</li>
<li><p>A vectorized implementation is:</p>
<p>$\theta := \theta - \frac{\alpha}{m} X^{T} (g(X \theta ) - \vec{y})$</p>
</li>
<li><p>To make sure th learning rate $\alpha$ is set properly, you can plot $J(\theta)$ as a function of the number of iterations and make sure $J(\theta )$ is decreasing on every iteration.</p>
</li>
</ul>
<h3 id="Advanced-Optimization"><a href="#Advanced-Optimization" class="headerlink" title="Advanced Optimization"></a>Advanced Optimization</h3><p>Optimization algorithms</p>
<ul>
<li>Gradient descent</li>
<li>Conjugate gradient</li>
<li>BFGS</li>
<li>L-BFGS</li>
</ul>
<p>The avdantage of last three algorithms:</p>
<ul>
<li>No need to manually pick $\alpha$</li>
<li>Often faster than gradient descent</li>
</ul>
<p>Disadvantages:</p>
<ul>
<li>More complex</li>
</ul>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>We first need to provide a function that evaluates the following two functions for a given input value $\theta$ :</p>
<ul>
<li>$J(\theta )$</li>
<li>$\frac{\partial}{\partial \theta _j} J(\theta )$</li>
</ul>
<p>We can write a single function that returns both of these:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function [jVal, gradient] = costFunction(theta)</div><div class="line">  jVal = [...code to compute J(theta)...];</div><div class="line">  gradient = [...code to compute derivative of J(theta)...];</div><div class="line">end</div></pre></td></tr></table></figure>
<p>Then we can use octave’s “fminunc()” optimization algorithm along with the “optimset()” function that creates an object containing the options we want to send to “fminunc()”.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">options = optimset(&apos;GradObj&apos;, &apos;on&apos;, &apos;MaxIter&apos;, 100);</div><div class="line">initialTheta = zeros(2,1);</div><div class="line">[optTheta, functionVal, exitFlag] = fminunc(@costFunction, initialTheta, options);</div></pre></td></tr></table></figure>
<h2 id="Multiclass-Classification-One-vs-all"><a href="#Multiclass-Classification-One-vs-all" class="headerlink" title="Multiclass Classification: One-vs-all"></a>Multiclass Classification: One-vs-all</h2><p>Instead of $y = {0,1}$, we will expand our definition so that $y = {1,2…n}$. In this case we divide our problem into $n$ binary classification problems; in each one, we predict the probability that ‘y’ is a member of one of our classes.</p>
<p>That is, we can train a logistic regression classifier $h_\theta ^{(i)} (x)$ for each class $i$ to predict the probability that $y=i$.</p>
<p>$h_\theta^{(i)}(x) = P(y = i | x ; \theta)\ \ \ \  (i=1,2,3,\dots , n+1)$</p>
<p>On a new input $x$, to make a prediction, pick the class $i$ that maximizes $h_\theta ^{(i)} (x)$.</p>
<p><img src="/images/one_vs_all.png" alt="One-vs-all"></p>
<h1 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h1><h2 id="Solving-the-Problem-of-Overfitting"><a href="#Solving-the-Problem-of-Overfitting" class="headerlink" title="Solving the Problem of Overfitting"></a>Solving the Problem of Overfitting</h2><h3 id="The-Problem-of-Overfitting"><a href="#The-Problem-of-Overfitting" class="headerlink" title="The Problem of Overfitting"></a>The Problem of Overfitting</h3><p><img src="/images/overfitting.png" alt="overfitting"></p>
<ul>
<li><strong>High bias</strong> or <strong>underfitting</strong> is when the form of our hypothesis function h maps poorly to the trend of the data. It is usually caused by a function that is too simple or uses too few features. eg. if we take $h_\theta (x)=\theta _0+\theta _1x_1+\theta _2x_2$ then we are making an initial assumption that a linear model will fit the training data well and will be able to generalize but that may not be the case.</li>
<li>At the other extreme, <strong>overfitting</strong> or <strong>high variance</strong> is caused by a hypothesis function that fits the available data but does not generalize (泛化) well to predict new data. It is usually caused by a complicated function that creates a lot of unnecessary curves and angles unrelated to the data.</li>
</ul>
<p>This terminology is applied to both linear and logistic regression.</p>
<p><img src="/images/overfitting_2.png" alt="overfitting_2"></p>
<p>There are <strong>two</strong> main options to address the issue of overfitting:</p>
<ol>
<li>Reduce the number of features.<ul>
<li>Manually select which features to keep.</li>
<li>Use a model selection algorithm (later in the course).</li>
</ul>
</li>
<li>Regularization (正则化)<ul>
<li>Keep all the features, but reduce the parameters $\theta _j$.</li>
</ul>
</li>
</ol>
<p>Regularization works well when we have a lot of slightly useful features.</p>
<h3 id="Cost-Function-1"><a href="#Cost-Function-1" class="headerlink" title="Cost Function"></a>Cost Function</h3><h4 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h4><p>If we have overfitting from our hypothesis function, we can reduce the weight that some of the terms in our function carry by increasing their cost.</p>
<p>Say we wanted to make the following function more quadratic:</p>
<p>$\theta_0 + \theta_1x + \theta_2x^2 + \theta_3x^3 + \theta_4x^4$</p>
<p>We’ll want to eliminate the influence of $\theta _3x_3​$ and $\theta _4x_4​$. Without actually getting rid of these features or changing the form of our hypothesis, we can instead modify our <strong>cost function</strong>:</p>
<p>$min_\theta\ \dfrac{1}{2m} \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})^2 + 1000\cdot \theta _3^2 + 1000\cdot \theta _4^2$</p>
<p>We’ve added two extra terms at the end to inflate the cost of $\theta_3$ and $\theta_4$. Now, in order for the cost function to get close to zero, we will have to reduce the values of $\theta_3$ and $\theta_4$ to near zero. This will in turn greatly reduce the values of $\theta _3x_3$ and $\theta _4x_4$ in our hypothesis function.</p>
<p><img src="/images/regularization_intuition.png" alt="regularization_intuition"></p>
<h4 id="Regularization-1"><a href="#Regularization-1" class="headerlink" title="Regularization"></a>Regularization</h4><p>We could also regularize all of our theta parameters in a single summation:</p>
<p>$min_\theta \dfrac{1}{2m}\ \left[ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})^2 + \lambda\ \sum_{j=1}^n \theta_j^2 \right]$</p>
<p>The $\lambda$, or lambda, is the <strong>regularization parameter</strong>. It determines how much the costs of our theta parameters are inflated. </p>
<ul>
<li>Using the above cost function with the extra summation, we can smooth the output of our hypothesis function to reduce overfitting. </li>
<li>If lambda is chosen to be too large, it may smooth out the function too much and cause underfitting. (fails to fit even the training set).</li>
</ul>
<h3 id="Regularized-Linear-Regression"><a href="#Regularized-Linear-Regression" class="headerlink" title="Regularized Linear Regression"></a>Regularized Linear Regression</h3><h4 id="Gradient-Descent-1"><a href="#Gradient-Descent-1" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h4><p>We will modify our gradient descent function to separate out $\theta_0$ from the rest of the parameters because <strong>we do not want to penalize $\theta_0$.</strong></p>
<p>$\text{Repeat}\ \lbrace \\ \ \ \ \ \theta_0 := \theta_0 - \alpha\ \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} \\ \ \ \ \ \theta_j := \theta_j - \alpha\ \left[ \left( \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} \right) + \frac{\lambda}{m}\theta_j \right] \ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2…n\rbrace \\ \rbrace$</p>
<ul>
<li>The term $\frac{\lambda}{m}\theta_j$ performs our regularization.</li>
</ul>
<p>With some manipulation our update rule can also be represented as:</p>
<p>$\theta_j := \theta_j(1 - \alpha\frac{\lambda}{m}) - \alpha\frac{1}{m}\sum_{i=1}^m(h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)}$</p>
<ul>
<li>The first term in the above equation, $1 - \alpha\frac{\lambda}{m}$ will always be less than 1. Intuitively you can see it as reducing the value of $\theta _j$ by some amount on every update.</li>
<li>Notice that the second term is now exactly the same as it was before.</li>
</ul>
<h4 id="Normal-Equation"><a href="#Normal-Equation" class="headerlink" title="Normal Equation"></a>Normal Equation</h4><p>To add in regularization, the equation is the same as our original, except that we add another term inside the parentheses:</p>
<p>$\theta = \left( X^TX + \lambda \cdot L \right)^{-1} X^Ty$</p>
<p>$L = \begin{bmatrix} 0 &amp; &amp; &amp; &amp; \\ &amp; 1 &amp; &amp; &amp; \\ &amp; &amp; 1 &amp; &amp; \\ &amp; &amp; &amp; \ddots &amp; \\ &amp; &amp; &amp; &amp; 1 \\ \end{bmatrix}$</p>
<p>$L$ should have dimension $(n+1)\times (n+1)$. Intuitively, this is the identity matrix (though we are not including $x_0$), multiplied with a single real number $\lambda$.</p>
<p>Recall that if $m\le n$, then $X^TX$ is non-invertible. However, when we add the term $\lambda \cdot L$, then $X^TX + \lambda \cdot L$ becomes invertible.</p>
<h3 id="Regularized-Logistic-Regression"><a href="#Regularized-Logistic-Regression" class="headerlink" title="Regularized Logistic Regression"></a>Regularized Logistic Regression</h3><h4 id="Cost-Function-2"><a href="#Cost-Function-2" class="headerlink" title="Cost Function"></a>Cost Function</h4><p>We can regularize this equation by adding a term to the end:</p>
<p>$J(\theta) = - \frac{1}{m} \sum_{i=1}^m \large[ y^{(i)}\ \log (h_\theta (x^{(i)})) + (1 - y^{(i)})\ \log (1 - h_\theta(x^{(i)}))\large] + \frac{\lambda}{2m}\sum_{j=1}^n \theta_j^2$</p>
<p><strong>Note Well:</strong> The second sum, $\sum_{j=1}^n \theta_j^2$ <strong>means to explicitly exclude</strong> the bias term, $\theta _0$. I.e. the $\theta$ vector is indexed from 0 to n (holding $n+1$ values, $\theta _0$ through $\theta _n$), and this sum explicitly skips $\theta _0$, by running from 1 to n, skipping 0.</p>
<h4 id="Gradient-Descent-2"><a href="#Gradient-Descent-2" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h4><p>$\text{Repeat}\ \lbrace \\ \ \ \ \ \theta_0 := \theta_0 - \alpha\ \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_0^{(i)} \\\ \ \ \ \ \theta_j := \theta_j - \alpha\ \left[ \left( \frac{1}{m}\ \sum_{i=1}^m (h_\theta(x^{(i)}) - y^{(i)})x_j^{(i)} \right) + \frac{\lambda}{m}\theta_j \right] \ \ \ \ \ \ \ \ \ \ j \in \lbrace 1,2…n\rbrace\\\ \rbrace$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Logistic-Regression&quot;&gt;&lt;a href=&quot;#Logistic-Regression&quot; class=&quot;headerlink&quot; title=&quot;Logistic Regression&quot;&gt;&lt;/a&gt;Logistic Regression&lt;/h1&gt;&lt;h2 id=&quot;Classification-and-Representation&quot;&gt;&lt;a href=&quot;#Classification-and-Representation&quot; class=&quot;headerlink&quot; title=&quot;Classification and Representation&quot;&gt;&lt;/a&gt;Classification and Representation&lt;/h2&gt;&lt;h3 id=&quot;Classification&quot;&gt;&lt;a href=&quot;#Classification&quot; class=&quot;headerlink&quot; title=&quot;Classification&quot;&gt;&lt;/a&gt;Classification&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Calssification Problem&lt;ul&gt;
&lt;li&gt;$y\in {0,1}$&lt;ul&gt;
&lt;li&gt;0: “Negative Class”,  负类&lt;/li&gt;
&lt;li&gt;1: “Positive Class”, 正类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One method is to use linear regression and map all predictions greater than 0.5 as a 1 and all less than 0.5 as a 0. This method doesn’t work well because classification is not actually a linear function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logistic Regression (逻辑回归) : $0\le h_\theta \le 1$&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="Coursera" scheme="http://www.yuthon.com/tags/Coursera/"/>
    
      <category term="Machine Learning" scheme="http://www.yuthon.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Exercise in Machine Learning</title>
    <link href="http://www.yuthon.com/2016/08/05/Coursera-Machine-Learning-Exercise/"/>
    <id>http://www.yuthon.com/2016/08/05/Coursera-Machine-Learning-Exercise/</id>
    <published>2016-08-05T04:12:54.000Z</published>
    <updated>2016-08-05T04:15:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>My exercise files and notes are put in <a href="https://github.com/corenel/Notes-for-Machine-Learning-in-Coursera" target="_blank" rel="external">Github</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My exercise files and notes are put in &lt;a href=&quot;https://github.com/corenel/Notes-for-Machine-Learning-in-Coursera&quot; target=&quot;_blank&quot; rel=&quot;e
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="Coursera" scheme="http://www.yuthon.com/tags/Coursera/"/>
    
      <category term="Machine Learning" scheme="http://www.yuthon.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Machine Learning - Week 2</title>
    <link href="http://www.yuthon.com/2016/07/27/Coursera-Machine-Learning-Week-2/"/>
    <id>http://www.yuthon.com/2016/07/27/Coursera-Machine-Learning-Week-2/</id>
    <published>2016-07-27T02:30:35.000Z</published>
    <updated>2016-08-01T13:40:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linear-Regression-with-Multiple-Variables"><a href="#Linear-Regression-with-Multiple-Variables" class="headerlink" title="Linear Regression with Multiple Variables"></a>Linear Regression with Multiple Variables</h1><h2 id="Multivariate-Linear-Regression"><a href="#Multivariate-Linear-Regression" class="headerlink" title="Multivariate Linear Regression"></a>Multivariate Linear Regression</h2><ul>
<li>Multiple features (variables)<ul>
<li>$n$ = number of features</li>
<li>$x^{(i)}$ = input (features) of $i^{th}$ training example.</li>
<li>$x^{(i)}_j$ = value of feature $j$ in $i^{th}$ training example.</li>
</ul>
</li>
<li>Hypotesis<ul>
<li>Previously: $h_\theta (x) = \theta_0 + \theta_1 x$</li>
<li>$h_\theta (x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2 + \cdots + \theta_n x_n$<ul>
<li>For convenience of notation, define $x_0=1$</li>
<li>$x=\begin{bmatrix}x_0 \\ x_1 \\ x_2 \\ \vdots \\ x_n \end{bmatrix}, \theta = \begin{bmatrix}\theta_0 \\ \theta_1 \\ \theta_2 \\ \vdots \\ \theta_n \end{bmatrix}, h_\theta (x) = \theta^T x​$</li>
</ul>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="Gradient-Descent-for-Multiple-Variables"><a href="#Gradient-Descent-for-Multiple-Variables" class="headerlink" title="Gradient Descent for Multiple Variables"></a>Gradient Descent for Multiple Variables</h2><ul>
<li><p>Hypothesis: $h_\theta(x)=\theta^Tx=\theta_0 x_0 + \theta_1 x_1 + \theta_2 x_2 + \cdots + \theta_n x_n$</p>
</li>
<li><p>Parameters: $\theta_0, \theta_1, \dots ,\theta_n$</p>
</li>
<li><p>Cost function: $J(\theta_0, \theta_1, \dots, \theta_n) = \frac{1}{2m} \sum^m_{i=1}\left(h_\theta (x^{(i)})-y^{(i)}\right)^2$</p>
<ul>
<li>or $J(\theta) = \frac{1}{2m}\sum_{i=1}^{m}(\theta^T x^{(i)} - y^{(i)})^2$</li>
</ul>
</li>
<li><p>Gradient descent</p>
<blockquote>
<p>repeat {</p>
<p>  $\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j} J(\theta_0, \dots ,\theta_n)$</p>
<p>  (simultaneously update for every $j=0,\dots,n$)</p>
<p>}</p>
</blockquote>
<p>or</p>
<blockquote>
<p>repeat {</p>
<p>  $\theta_j := \theta_j - \alpha \frac{1}{m} \sum^m_{i=1}\left(h_\theta(x^{(i)})-y^{(i)}\right) x^{(i)}_j$ </p>
<p>  (simultaneously update for every $j=0,\dots,n$)</p>
<p>}</p>
</blockquote>
</li>
</ul>
<h2 id="Gradient-Descent-in-Practice"><a href="#Gradient-Descent-in-Practice" class="headerlink" title="Gradient Descent in Practice"></a>Gradient Descent in Practice</h2><h3 id="Feature-Normalization"><a href="#Feature-Normalization" class="headerlink" title="Feature Normalization"></a>Feature Normalization</h3><p>Idea: Make sure featueres are on a similar scale.</p>
<ul>
<li>We can speed up gradient descent by having each of our input values in roughly the same range. This is because $\theta$ will descend quickly on small ranges and slowly on large ranges, and so will oscillate inefficiently down to the optimum when the variables are very uneven.</li>
<li>The way to prevent this is to modify the ranges of our input variables so that they are all roughly the same.</li>
</ul>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><ul>
<li>$x_1$ = size (0-2000 $feet^2$)</li>
<li>$x_2$ = number of bedrooms (1-5)</li>
</ul>
<p>$x_1$ has a much larger range of values than $x_2$. So the $J(\theta_1, \theta_2)$ can be a very very skewed elliptical shape. And if you run gradient descents on this cost function, your gradients may end up taking a long time and can oscillate back and forth and take a long time before it can finally find its way to the global minimum. </p>
<h4 id="Feature-scaling"><a href="#Feature-scaling" class="headerlink" title="Feature scaling"></a>Feature scaling</h4><p>Get every feature into approcimately $-1\le x_i \le 1$ range.</p>
<ul>
<li>Feature scaling involves dividing the input values by the range (i.e. the maximum value minus the minimum value) of the input variable, resulting in a new range of just 1.</li>
<li>These aren’t exact requirements; we are only trying to speed things up.</li>
</ul>
<ul>
<li>$-3\le x_i \le 3$ or $ -\frac{1}{3} \le x_i \le \frac{1}{3}$ just is fine.</li>
</ul>
<h4 id="Mean-normalization"><a href="#Mean-normalization" class="headerlink" title="Mean normalization"></a>Mean normalization</h4><p>Replace $x_i$ with $x_i - \mu _i$ to make features have approximately zero mean (Do not apply to $x_0 = 1$)</p>
<ul>
<li>E.g. $x_1 = \frac{size -1000}{2000}, x_2 = \frac{bedrooms - 2}{5}$</li>
<li>$x_i = \frac{x_i - \mu _i}{s_i}$<ul>
<li>$\mu _i$ is the average value of $x_i$ in training set.</li>
<li>$s_i$ is the range ($x_{imax}-x_{imin}$) or standard deviation ($\sigma$)</li>
</ul>
</li>
</ul>
<h3 id="Learning-Rate"><a href="#Learning-Rate" class="headerlink" title="Learning Rate"></a>Learning Rate</h3><ul>
<li>“Debugging”: <strong>How to make sure gradient descent is working correctly</strong><ul>
<li>Make a plot with <em>number of iterations</em> on the x-axis. Now plot the cost function, $J(\theta)$ over the number of iterations of gradient descent.<ul>
<li>For sufficient small $\alpha$, $J(\theta)$ should decreases on every iteration.</li>
<li>But if $\alpha$ is too small, gradient descent can be slow to converge.</li>
<li>If $J(\theta)$ ever increases, then you probably need to use smaller $\alpha$.</li>
</ul>
</li>
<li>Example automatic convergence test<ul>
<li>Declare convergence if $J(\theta)$ decreases by less than $\epsilon$ (e.g., $10^{-3})$ in one iteration.</li>
</ul>
</li>
</ul>
</li>
<li><strong>How to choose learing rate $\alpha$</strong><ul>
<li>So just try running gradient descent with a range of values for $\alpha$, like 0.001 and 0.01. And for these different values of $\alpha$ are just plot $J(\theta)$ as a function of number of iterations, and then pick the value of $\alpha$ that seems to be causing $J(\theta)$to decrease rapidly.</li>
<li>Andrew Ng recommends decreasing $\alpha$ by multiples of 3. And then try to pick the largest possible value, or just something slightly smaller than the largest reasonable value.</li>
<li>E.g. $\dots, 0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1, \dots$</li>
</ul>
</li>
</ul>
<h2 id="Features-and-Polynomial-Regression"><a href="#Features-and-Polynomial-Regression" class="headerlink" title="Features and Polynomial Regression"></a>Features and Polynomial Regression</h2><h3 id="Choice-of-features"><a href="#Choice-of-features" class="headerlink" title="Choice of features"></a>Choice of features</h3><ul>
<li>We can improve our features and the form of our hypothesis function in a couple different ways.</li>
<li>We can <strong>combine</strong> multiple features into one. For example, we can combine $x_1​$ and $x_2​$ into a new feature $x_3​$ by taking $x_1\cdot x_2​$. (E.g. $House Area = Frontage \times Depth​$)</li>
</ul>
<h3 id="Polynomial-Regression"><a href="#Polynomial-Regression" class="headerlink" title="Polynomial Regression"></a>Polynomial Regression</h3><p>Our hypothesis function need not be linear (a straight line) if that does not fit the data well.</p>
<ul>
<li><p>We can <strong>change the behavior or curve</strong> of our hypothesis function by making it a quadratic, cubic or square root function (or any other form).</p>
<ul>
<li><p>For example, if our hypothesis function is $h_\theta(x) = \theta_0 + \theta_1 x_1$ then we can create additional features based on $x_1$, to get the quadratic function $h_\theta(x) = \theta_0 + \theta_1 x_1 + \theta_2 x_1^2$ or the cubic function $h_\theta(x) = \theta_0 + \theta_1 x_1 + \theta_2 x_1^2 + \theta_3 x_1^3$.</p>
</li>
<li><p>In the cubic version, we have created new features $x_2$ and $x_3$ where $x_2 = x_1^2$ and $x_3=x^3_1$.</p>
</li>
<li><p>To make it a square root function, we could do: $h_\theta(x) = \theta_0 + \theta_1 x_1 + \theta_2 \sqrt{x_1}$</p>
</li>
<li><p>Note that at 2:52 and through 6:22 in the “Features and Polynomial Regression” video, the curve that Prof Ng discusses about “doesn’t ever come back down” is in reference to the hypothesis function that uses the <code>sqrt()</code> function (shown by the solid purple line), not the one that uses $size^2$ (shown with the dotted blue line). The quadratic form of the hypothesis function would have the shape shown with the blue dotted line if $\theta _2$ was negative.</p>
<p><img src="/images/polynomial_regression.png" alt="polynomial_regression"></p>
</li>
</ul>
</li>
<li>One important thing to keep in mind is, if you choose your features this way then <strong>feature scaling becomes very important</strong>.<ul>
<li>E.g. if $x_1$ has range $1 - 1000$ then range of $x^2_1$ becomes $1 - 1000000$ and that of $x^3_1$ becomes $1 - 1000000000$</li>
<li>So you should scale $x_1$ before using polynomial regression.</li>
</ul>
</li>
</ul>
<h2 id="Computing-Parameters-Analytically"><a href="#Computing-Parameters-Analytically" class="headerlink" title="Computing Parameters Analytically"></a>Computing Parameters Analytically</h2><h3 id="Normal-Equation"><a href="#Normal-Equation" class="headerlink" title="Normal Equation"></a>Normal Equation</h3><p>The “Normal Equation” (正规方程) is a method of finding the optimum $\theta$ <strong>without iteration.</strong></p>
<blockquote>
<p>There is <strong>no need</strong> to do feature scaling with the normal equation.</p>
</blockquote>
<h4 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h4><ul>
<li>$\theta \in R^{n+1} , J(\theta _0, \theta _1, \dots , \theta_m) = \frac{1}{2m} \sum ^m_{i=1} \left( h_\theta (x^{(i)}) - y^{(i)} \right) ^2$</li>
<li>Set $\frac{\partial }{\partial \theta _j} J(\theta ) = \cdots = 0$ (for every $j$), solve for $\theta _0, \theta _1, \dots , \theta _m$</li>
</ul>
<h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><p>We have $m$ examples $(x^{(1)}, y^{(1)}), \dots , (x^{(m)}, y^{(m)})$ and $n$ features. (Note that $x^{(i)}_0 = 0$)</p>
<p>$$x^{(i)} = \begin{bmatrix}x^{(i)}_0 \\ x^{(i)}_1 \\ x^{(i)}_2 \\ \vdots \\ x^{(i)}_n \end{bmatrix}$$</p>
<p>And construct the $m \times (n+1)$ matrix $X$</p>
<p>$$X = \begin{bmatrix} (x^{(1)})^T \\ (x^{(2)})^T \\ \vdots \\ (x^{(m)})^T \end{bmatrix}$$</p>
<p>And the $m$-dimension vector $y$</p>
<p>$$y = \begin{bmatrix}y^{(i)} \\ y^{(i)} \\ y^{(i)} \\ \vdots \\ y^{(m)} \end{bmatrix}$$</p>
<p>Finally, we can get</p>
<p>$$ \theta = (X^T X)^{-1}X^T y $$</p>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><p>Suppose you have the training in the table below:</p>
<table>
<thead>
<tr>
<th style="text-align:center">age ($x_1$)</th>
<th style="text-align:center">height in cm ($x_2$)</th>
<th style="text-align:center">weight in kg ($y$)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">89</td>
<td style="text-align:center">16</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">124</td>
<td style="text-align:center">28</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">103</td>
<td style="text-align:center">20</td>
</tr>
</tbody>
</table>
<p>You would like to predict a child’s weight as a function of his age and height with the model</p>
<p>$$weight = \theta _0 + \theta _1 age + \theta _2 height$$</p>
<p>Then you can construct $X$ and $y$</p>
<p>$$X = \begin{bmatrix} 1 &amp; 4 &amp; 89 \\ 1 &amp; 9 &amp; 124 \\ 1 &amp; 5 &amp; 103 \end{bmatrix}$$</p>
<p>$$Y = \begin{bmatrix} 16 \\ 28 \\ 20 \end{bmatrix}$$</p>
<h4 id="Usage-in-Octave"><a href="#Usage-in-Octave" class="headerlink" title="Usage in Octave"></a>Usage in Octave</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pinv (X&apos;*X)*X&apos;*y</div></pre></td></tr></table></figure>
<h4 id="Comparison-of-gradient-descent-and-the-normal-equation"><a href="#Comparison-of-gradient-descent-and-the-normal-equation" class="headerlink" title="Comparison of gradient descent and the normal equation"></a>Comparison of gradient descent and the normal equation</h4><p>$m$ training examples and $n$ features.</p>
<table>
<thead>
<tr>
<th>Gradient Descent</th>
<th>Normal Equation</th>
</tr>
</thead>
<tbody>
<tr>
<td>Need to choose $\alpha$</td>
<td>No need to choose $\alpha$</td>
</tr>
<tr>
<td>Needs many iterations</td>
<td>No need to iterate</td>
</tr>
<tr>
<td>$O (kn^2)$</td>
<td>$O (n^3)$, need to calculate  $(X^TX)^{-1}$</td>
</tr>
<tr>
<td>Works well when $n$ is large</td>
<td>Slow if $n$ is very large</td>
</tr>
</tbody>
</table>
<p>With the normal equation, computing the inversion has complexity $O(n^3)$. So if we have a very large number of features, the normal equation will be slow. In practice, <strong>when $n$ exceeds 10,000 it might be a good time to go from a normal solution to an iterative process.</strong></p>
<h3 id="Normal-Equation-Noninvertibility"><a href="#Normal-Equation-Noninvertibility" class="headerlink" title="Normal Equation Noninvertibility"></a>Normal Equation Noninvertibility</h3><p>$$ \theta = (X^T X)^{-1}X^T y $$</p>
<ul>
<li>What if $X^TX$ is non-invertible (不可逆的) ? (singular/ degenerate)</li>
<li>Octave: <code>pinv(X&#39;*X)*X&quot;*y</code><ul>
<li>There’s two functions in Octave for inverting matrices, <code>pinv</code> (pseudo-inverse, 伪逆) and <code>inv</code> (inverse).</li>
<li>As long as you use the <code>pinv</code> function then this will actually compute the value of data that you want even if X transpose X is non-invertible.</li>
<li>So when implementing the normal equation in octave we want to use the <code>pinv</code> function rather than <code>inv</code>.</li>
</ul>
</li>
<li>$X^TX$ may be <strong>noninvertible</strong>. The common causes are:<ul>
<li>Redundant features, where two features are very closely related (i.e. they are linearly dependent)<ul>
<li>E.g. $x_1$ = size in $feet^2$, and $x_2$ = size in $m^2$. So you’ll always have $x_1 = (3.28)^2 x_2$</li>
</ul>
</li>
<li>Too many features (e.g. $m\le n$). <ul>
<li>In this case, delete some features or use “regularization”.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Octave-Matlab-Tutorial"><a href="#Octave-Matlab-Tutorial" class="headerlink" title="Octave/Matlab Tutorial"></a>Octave/Matlab Tutorial</h1><h2 id="Basic-Operations"><a href="#Basic-Operations" class="headerlink" title="Basic Operations"></a>Basic Operations</h2><ul>
<li>Print specific decimals: <code>disp(sprintf(&#39;6 decimals: %0.6f&#39;, a)) // 6 decimals: 3.141593</code></li>
<li><code>v = 1:0.2:2 // [1.0 1.2 1.4 1.6 1.8 2.0]</code></li>
<li><code>ones</code>, <code>zeros</code>, <code>rand</code>, <code>randn</code> (生成正态分布的随机数矩阵), <code>eye</code> (生成单位矩阵)</li>
<li><code>hist</code> (直方图，第二个参数课自定义条数)</li>
<li><code>size</code> (返回矩阵的行数与列数 [m n] )</li>
<li><code>length</code> (返回向量的维数)</li>
</ul>
<h2 id="Moving-Data-Around"><a href="#Moving-Data-Around" class="headerlink" title="Moving Data Around"></a>Moving Data Around</h2><ul>
<li><p>Use <code>load</code> to load data set.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">load featureX.dat</div><div class="line">load(&apos;priceY.dat&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p>Use <code>who</code> to show all variables in Octave workspace</p>
<ul>
<li><p><code>whos</code> for detail information</p>
</li>
<li><p><code>clear</code> to delete a variable</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clear featureX</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Get first ten elements of a matrix</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">v = priceY(1:10)</div></pre></td></tr></table></figure>
</li>
<li><p>Use <code>save</code> to save your variable</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">save hello.mat v</div></pre></td></tr></table></figure>
<ul>
<li><p>By default the data is saved in binary. You can save it to ASCII by</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">save hello.txt v -ascii</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Use <code>A(3, 2)</code> to get $A_{32}$, or <code>A(2, :)</code> to get every element along the second row</p>
<ul>
<li><code>A([1, 3], :)</code> to get everything in the first and third rows</li>
<li><code>A(:, 2) = [10; 11; 12]</code> to change the value of elements in second column.</li>
<li><code>A = [A, [100; 101; 102]]</code> to append another column vector to right</li>
<li><code>A(:)</code> to put all elements of $A$ into a single vector</li>
</ul>
</li>
</ul>
<h2 id="Computing-on-Data"><a href="#Computing-on-Data" class="headerlink" title="Computing on Data"></a>Computing on Data</h2><ul>
<li><p>Use <code>max</code> to get the largest element in a vector</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = [1 15 2 0.5];</div><div class="line">[val, ind] = max(a); // val = 15, ind = 2</div></pre></td></tr></table></figure>
<ul>
<li><p>If you do <code>max(A)</code>, where $A$ is a matrix, what this does is this actually does the column wise maximum.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">A = [1 2; 3 4; 5 6];</div><div class="line">max(A) // [5 6]</div><div class="line"></div><div class="line">A = [8 1 6; 3 5 7; 4 9 2];</div><div class="line">max(A, [], 1) // [8 9 7] (get the column wise maximum)</div><div class="line">max(A, [], 2) // [8 7 9] (get the row wise maximum)</div><div class="line">max(max(A)) // 9</div><div class="line">max(A(:)) // 9</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>a &lt; 3</code>  does the element wise operation, you’ll get <code>[1 0 1 1]</code></p>
<ul>
<li><code>find(a&lt;3)</code> gets <code>[1 3 4]</code></li>
</ul>
</li>
<li><p><code>magic(3)</code> gets a 3x3 magic matrix</p>
</li>
<li><p><code>sum</code>, <code>prod</code>, <code>floor</code>, <code>ceil</code>, <code>flipud</code></p>
</li>
</ul>
<h2 id="Plotting-Data"><a href="#Plotting-Data" class="headerlink" title="Plotting Data"></a>Plotting Data</h2><ul>
<li><code>plot</code></li>
<li><code>hold on</code>, <code>figure</code>, <code>subplot</code></li>
<li><code>xlabel</code>, <code>ylabel</code>, <code>legend</code>, <code>title</code>, <code>axis</code></li>
<li><code>print -dpng &#39;myPlot.png&#39;</code></li>
<li><code>imagesc(A)</code> to visualize a matrix<ul>
<li><code>imagesc(A), colorer, colormap gray</code> to be in gray scale.</li>
</ul>
</li>
</ul>
<h2 id="Control-Statements-for-while-if-statement"><a href="#Control-Statements-for-while-if-statement" class="headerlink" title="Control Statements: for, while, if statement"></a>Control Statements: for, while, if statement</h2><h2 id="Vectorization"><a href="#Vectorization" class="headerlink" title="Vectorization"></a>Vectorization</h2><p>Vectorization is the process of taking code that relies on <strong>loops</strong> and converting it into <strong>matrix operations</strong>. It is more efficient, more elegant, and more concise.</p>
<p>As an example, let’s compute our prediction from a hypothesis. Theta is the vector of fields for the hypothesis and x is a vector of variables.</p>
<p>With loops ($h_\theta (x) =\theta_0 x_0 + \theta_1 x_1 + \theta_2 x_2 + \cdots + \theta_n x_n$):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">prediction = 0.0;</div><div class="line">for j = 1:n+1,</div><div class="line">  prediction += theta(j) * x(j);</div><div class="line">end;</div></pre></td></tr></table></figure>
<p>With vectorization ($h_\theta (x) = \theta^T x$):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prediction = theta&apos; * x;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linear-Regression-with-Multiple-Variables&quot;&gt;&lt;a href=&quot;#Linear-Regression-with-Multiple-Variables&quot; class=&quot;headerlink&quot; title=&quot;Linear Regression with Multiple Variables&quot;&gt;&lt;/a&gt;Linear Regression with Multiple Variables&lt;/h1&gt;&lt;h2 id=&quot;Multivariate-Linear-Regression&quot;&gt;&lt;a href=&quot;#Multivariate-Linear-Regression&quot; class=&quot;headerlink&quot; title=&quot;Multivariate Linear Regression&quot;&gt;&lt;/a&gt;Multivariate Linear Regression&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Multiple features (variables)&lt;ul&gt;
&lt;li&gt;$n$ = number of features&lt;/li&gt;
&lt;li&gt;$x^{(i)}$ = input (features) of $i^{th}$ training example.&lt;/li&gt;
&lt;li&gt;$x^{(i)}_j$ = value of feature $j$ in $i^{th}$ training example.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hypotesis&lt;ul&gt;
&lt;li&gt;Previously: $h_\theta (x) = \theta_0 + \theta_1 x$&lt;/li&gt;
&lt;li&gt;$h_\theta (x) = \theta_0 + \theta_1 x_1 + \theta_2 x_2 + \cdots + \theta_n x_n$&lt;ul&gt;
&lt;li&gt;For convenience of notation, define $x_0=1$&lt;/li&gt;
&lt;li&gt;$x=\begin{bmatrix}x_0 \\ x_1 \\ x_2 \\ \vdots \\ x_n \end{bmatrix}, \theta = \begin{bmatrix}\theta_0 \\ \theta_1 \\ \theta_2 \\ \vdots \\ \theta_n \end{bmatrix}, h_\theta (x) = \theta^T x​$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="Coursera" scheme="http://www.yuthon.com/tags/Coursera/"/>
    
      <category term="Machine Learning" scheme="http://www.yuthon.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Machine Learning - Week 1</title>
    <link href="http://www.yuthon.com/2016/07/26/Coursera-Machine-Learning-Week-1/"/>
    <id>http://www.yuthon.com/2016/07/26/Coursera-Machine-Learning-Week-1/</id>
    <published>2016-07-26T03:55:36.000Z</published>
    <updated>2016-07-29T08:21:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linear-Regression-with-One-Variable"><a href="#Linear-Regression-with-One-Variable" class="headerlink" title="Linear Regression with One Variable"></a>Linear Regression with One Variable</h1><h2 id="Model-and-Cost-Function"><a href="#Model-and-Cost-Function" class="headerlink" title="Model and Cost Function"></a>Model and Cost Function</h2><h3 id="Model-Representation"><a href="#Model-Representation" class="headerlink" title="Model Representation"></a>Model Representation</h3><ul>
<li><strong>Supervised Learning (监督学习)</strong>: Given the “right answer” for each example in the data.<ul>
<li><strong>Regression Problem (回归问题)</strong>: Predict real-valued output. </li>
<li><strong>Classification Problem (分类问题)</strong>: Predict discrete-valued output.</li>
</ul>
</li>
<li><strong>Training set (训练集)</strong><ul>
<li><strong>m</strong>: number of training examples</li>
<li><strong>x</strong>‘s: “input” variable / features</li>
<li><strong>y</strong>‘s: “output” variable / “target” variable</li>
<li><strong>$(x, y)$</strong>: one training example</li>
<li><strong>$(x^i, y^i)$</strong>: $i^{th}$ training example</li>
</ul>
</li>
</ul>
<ul>
<li>Training Set -&gt; Learning Algorithm -&gt; <strong>h(hypothesis, 假设)</strong><ul>
<li>h is a function maps from x’s to y’s</li>
<li>e.g. Size of house -&gt; h -&gt; Estimated price</li>
</ul>
</li>
</ul>
<ul>
<li><strong>Linear regression with one variable</strong><ul>
<li>$h_\theta (x) = \theta_0 + \theta_1 x$<ul>
<li>Shorthand: $h(x)$</li>
</ul>
</li>
<li>Or named Univariate linear regression (单变量线性回归)</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h3><ul>
<li><p><strong>Hypothesis</strong>: $h_\theta (x) = \theta_0 + \theta_1 x$</p>
<ul>
<li>$\theta_i$’s: Parameters (模型参数)</li>
<li>How to choose $\theta_i$’s ?<ul>
<li>Idea: Choose $\theta_0, \theta_1$ so that $h_\theta (x)$ is close to $y$ for our training example $(x,y)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>Cost function (代价函数)</strong><ul>
<li>$J(\theta_0, \theta_1) = \frac{1}{2m} \sum_{i=1}^m \left(h_\theta(x^{(i)})-y^{(i)}\right)^2$</li>
<li>Sometimes called Square error function (平方误差代价函数)</li>
</ul>
</li>
</ul>
<ul>
<li>Goal: minimise $J(\theta_0, \theta_1)$</li>
</ul>
<h2 id="Parameter-Learning"><a href="#Parameter-Learning" class="headerlink" title="Parameter Learning"></a>Parameter Learning</h2><h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><ul>
<li><p><strong>Gradient Descent (梯度下降)</strong></p>
<ul>
<li>Goal<ul>
<li>Have some function $J(\theta_0, \theta_1)$</li>
<li>Want $\theta_0, \theta_1$ of $min J(\theta_0, \theta_1)$</li>
</ul>
</li>
<li>Outline<ul>
<li>Start with some $\theta_0, \theta_1$, usually all set to $0$.</li>
<li>Keep changing $\theta_0, \theta_1$ to reduce $J(\theta_0, \theta_1)$ until we hopefully end up at minimum</li>
</ul>
</li>
</ul>
</li>
<li><p>Gradient descent algorithm</p>
<blockquote>
<p>repeat until convergence (收敛) {<br>​    $\theta_j := \theta_j - \alpha \frac{\partial}{\partial \theta_j} J(\theta_0, \theta_j)$  (for $j=0$ and $j=1$)<br>}</p>
</blockquote>
<ul>
<li><p><code>:=</code> denotes assignment</p>
</li>
<li><p>$\alpha$ denotes learning rate</p>
<ul>
<li>if too small, gradient descent can be slow</li>
<li>If too large, gradient descent can overshoot the minimum. It may fail to converge or even diverge.</li>
</ul>
</li>
<li><p>You should <u>simultaneously</u> update $\theta_0$ and $\theta_1$</p>
<ul>
<li><p>That is, you should compute the right-hand sides of $\theta_0$ and $\theta_1$, then save them to temporary variables, and finally update $\theta_0$ and $\theta_1$.</p>
<blockquote>
<p>$temp0 := \theta_0 - \alpha \frac{\partial}{\partial \theta_0} J(\theta_0, \theta_j)$</p>
<p>$temp1 := \theta_1 - \alpha \frac{\partial}{\partial \theta_1} J(\theta_0, \theta_j)$</p>
<p>$\theta_0 := temp0$</p>
<p>$\theta_1 :=temp1$</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h3><ul>
<li><p>If $\theta_1$ at local optima, it leaves $\theta_1$ unchanged.</p>
</li>
<li><p><u>gradient descent can converge to a local minimum, even with the learning rate $\alpha$ fixed.</u></p>
<ul>
<li>As we approach a local minimum, gradient descent will automatically take smaller steps. So, no need to decrease $\alpha$ over time.</li>
</ul>
</li>
</ul>
<h3 id="Gradient-Descent-For-Linear-Regression"><a href="#Gradient-Descent-For-Linear-Regression" class="headerlink" title="Gradient Descent For Linear Regression"></a>Gradient Descent For Linear Regression</h3><p>We can compute that</p>
<p>$\frac{\partial}{\partial \theta_0} J(\theta_0, \theta_1) = \frac{1}{m} \sum^m_{i=1}\left(h_\theta(x^{(i)})-y^{(i)}\right)$</p>
<p>$\frac{\partial}{\partial \theta_1} J(\theta_0, \theta_1) = \frac{1}{m} \sum^m_{i=1}\left(h_\theta(x^{(i)})-y^{(i)}\right) \cdot x^{(i)}$</p>
<p>Thus the Gradient descent algorithm can be expressed as</p>
<blockquote>
<p> repeat until convergence {<br>   $\theta_0 := \theta_0 - \alpha \frac{1}{m} \sum^m_{i=1}\left(h_\theta(x^{(i)})-y^{(i)}\right)​$</p>
<p>   $\theta_1 := \theta_1 - \alpha \frac{1}{m} \sum^m_{i=1}\left(h_\theta(x^{(i)})-y^{(i)}\right) \cdot x^{(i)}$<br> }</p>
</blockquote>
<p>And the cost funciton of linear refression is always a convex function (凸函数), or called Bowl-shaped function (弓形函数). <u>It doesn’t have any local optima except for the one global optimum.</u></p>
<h4 id="“Batch”-Gradient-Descent"><a href="#“Batch”-Gradient-Descent" class="headerlink" title="“Batch” Gradient Descent"></a>“Batch” Gradient Descent</h4><ul>
<li>The algorithm that we just went over is sometimes called <strong>Batch Gradient Descent (批量梯度下降)</strong>.</li>
<li>“Batch”: Each step of gradient descent uses all th etraining examples.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linear-Regression-with-One-Variable&quot;&gt;&lt;a href=&quot;#Linear-Regression-with-One-Variable&quot; class=&quot;headerlink&quot; title=&quot;Linear Regression with One Variable&quot;&gt;&lt;/a&gt;Linear Regression with One Variable&lt;/h1&gt;&lt;h2 id=&quot;Model-and-Cost-Function&quot;&gt;&lt;a href=&quot;#Model-and-Cost-Function&quot; class=&quot;headerlink&quot; title=&quot;Model and Cost Function&quot;&gt;&lt;/a&gt;Model and Cost Function&lt;/h2&gt;&lt;h3 id=&quot;Model-Representation&quot;&gt;&lt;a href=&quot;#Model-Representation&quot; class=&quot;headerlink&quot; title=&quot;Model Representation&quot;&gt;&lt;/a&gt;Model Representation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Supervised Learning (监督学习)&lt;/strong&gt;: Given the “right answer” for each example in the data.&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Regression Problem (回归问题)&lt;/strong&gt;: Predict real-valued output. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classification Problem (分类问题)&lt;/strong&gt;: Predict discrete-valued output.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Training set (训练集)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;m&lt;/strong&gt;: number of training examples&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt;‘s: “input” variable / features&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;y&lt;/strong&gt;‘s: “output” variable / “target” variable&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$(x, y)$&lt;/strong&gt;: one training example&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$(x^i, y^i)$&lt;/strong&gt;: $i^{th}$ training example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Training Set -&amp;gt; Learning Algorithm -&amp;gt; &lt;strong&gt;h(hypothesis, 假设)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;h is a function maps from x’s to y’s&lt;/li&gt;
&lt;li&gt;e.g. Size of house -&amp;gt; h -&amp;gt; Estimated price&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linear regression with one variable&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;$h_\theta (x) = \theta_0 + \theta_1 x$&lt;ul&gt;
&lt;li&gt;Shorthand: $h(x)$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Or named Univariate linear regression (单变量线性回归)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="Coursera" scheme="http://www.yuthon.com/tags/Coursera/"/>
    
      <category term="Machine Learning" scheme="http://www.yuthon.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>OS X 10.11.4 on XPS 15 9550</title>
    <link href="http://www.yuthon.com/2016/05/16/OS-X-10-11-4-on-XPS-15-9550/"/>
    <id>http://www.yuthon.com/2016/05/16/OS-X-10-11-4-on-XPS-15-9550/</id>
    <published>2016-05-16T12:20:08.000Z</published>
    <updated>2016-07-26T03:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Thanks to the <a href="http://www.tonymacx86.com/threads/guide-wip-dell-xps-15-9550-skylake-gtx960m-ssd-via-clover-uefi.192598/" target="_blank" rel="external">guide</a> and its participants, I successfully installed OS X 10.11.4 on my XPS 15 9550.</p>
<p> <img src="/images/OS-X-10-11-4-on-XPS-15-9550.jpg" alt="OS-X-10-11-4-on-XPS-15-9550"></p>
<p>The guide is considerably perfect. Just follow the steps and you’ll get a well-done Hackintosh.</p>
<p>My Clover directory, DSDT &amp; SSDT and Kexts are uploaded to <a href="https://github.com/corenel/XPS9550-OSX" target="_blank" rel="external">Github</a>, for reference only. </p>
<p><strong>Update</strong>: Now I upgrade to 10.11.5, and everything is fine.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Thanks to the &lt;a href=&quot;http://www.tonymacx86.com/threads/guide-wip-dell-xps-15-9550-skylake-gtx960m-ssd-via-clover-uefi.192598/&quot; target=&quot;
    
    </summary>
    
    
      <category term="OS X" scheme="http://www.yuthon.com/tags/OS-X/"/>
    
      <category term="XPS" scheme="http://www.yuthon.com/tags/XPS/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Code School - Shaping up with Angular.js</title>
    <link href="http://www.yuthon.com/2016/04/14/CodeSchool-Shaping-up-with-Angular.js/"/>
    <id>http://www.yuthon.com/2016/04/14/CodeSchool-Shaping-up-with-Angular.js/</id>
    <published>2016-04-14T13:19:22.000Z</published>
    <updated>2016-05-16T11:51:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flatlander’s-Gem-Store"><a href="#Flatlander’s-Gem-Store" class="headerlink" title="Flatlander’s Gem Store"></a>Flatlander’s Gem Store</h1><h2 id="Ramp-up"><a href="#Ramp-up" class="headerlink" title="Ramp up"></a>Ramp up</h2><p><strong>Why Angular?</strong></p>
<p>If you?re using JavaScript to create a dynamic website, Angular is a good choice.</p>
<ul>
<li>Angular helps you organize your JavaScript</li>
<li>Angular helps create responsive (as in fast) websites.</li>
<li>Angular plays well with jQuery.</li>
<li>Angular is easy to test.</li>
</ul>
<a id="more"></a>
<p><strong>Traditional Page-Refresh</strong></p>
<p> <img src="/images/traditional-page-refresh.png" alt="traditional-page-refresh"></p>
<p><strong>A “responsive “website using Angular</strong></p>
<p> <img src="/images/a-responsive-website-using-angular.png" alt="a-responsive-website-using-angular"></p>
<p><strong>What is Angular JS?</strong></p>
<p>A client-side JavaScript Framework for adding interactivity to HTML.</p>
<h3 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h3><p>A Directive is a marker on a HTML tag that tells Angular to run or reference some JavaScript code.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"StoreController"</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">StoreController</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert(<span class="string">'Welcome, Gregg!'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><ul>
<li>Where we write pieces of our Angular application.</li>
</ul>
<ul>
<li>Makes our code more maintainable, testable, and readable.</li>
</ul>
<ul>
<li>Where we define dependencies for our app.</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"store"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.min.css"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="comment">// Application Name and Dependencies</span></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'store'</span>, [ ]);</div></pre></td></tr></table></figure>
<h3 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h3><p>Allow you to insert dynamic values into your HTML.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Numerical Operations --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  I am &#123;&#123;4 + 6&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- String Operations --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  &#123;&#123;"hello" + " you"&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Index-HTML-Setup"><a href="#Index-HTML-Setup" class="headerlink" title="Index HTML Setup"></a>Index HTML Setup</h2><h3 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h3><p>Controllers are where we define our app?s behavior by defining functions and values.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="comment">// Wrapping your Javascript in a closure is a good habit!</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> app = angular.module(<span class="string">'store'</span>, [ ]);</div><div class="line">  <span class="comment">// Notice that controller is attached to (inside) our app.</span></div><div class="line">  app.controller(<span class="string">'StoreController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.product = gem;</div><div class="line">  &#125;);</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> gem = &#123;</div><div class="line">    name: <span class="string">'Dodecahedron'</span>,</div><div class="line">    price: <span class="number">2.95</span>,</div><div class="line">    description: <span class="string">'. . .'</span>,</div><div class="line">  &#125;.</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"store"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.min.css"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"StoreController as store"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123;ore.product.name&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span> $&#123;&#123;store.product.price&#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123;store.product.description&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Using-Built-in-Directives"><a href="#Using-Built-in-Directives" class="headerlink" title="Using Built-in Directives"></a>Using Built-in Directives</h2><h3 id="ng-show-Directive"><a href="#ng-show-Directive" class="headerlink" title="ng-show Directive"></a>ng-show Directive</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"store"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.min.css"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"StoreController as store"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123;store.product.name&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span> $&#123;&#123;store.product.price&#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123;store.product.description&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Will only show the element if the value of the Expression is</span></div><div class="line">true --&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-show</span>=<span class="string">"store.product.canPurchase"</span>&gt;</span> Add to Cart <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">var</span> gem = &#123;</div><div class="line">  name: <span class="string">'Dodecahedron'</span>,</div><div class="line">  price: <span class="number">2.95</span>,</div><div class="line">  description: <span class="string">'. . .'</span>,</div><div class="line">&#125;.</div></pre></td></tr></table></figure>
<h3 id="ng-hide-Directive"><a href="#ng-hide-Directive" class="headerlink" title="ng-hide Directive"></a>ng-hide Directive</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"StoreController as store"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-hide</span>=<span class="string">"store.product.soldOut"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123;store.product.name&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> $&#123;&#123;store.product.price&#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123;store.product.description&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-show</span>=<span class="string">"store.product.canPurchase"</span>&gt;</span> Add to Cart <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  . . .</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">var</span> gem = &#123;</div><div class="line">  name: <span class="string">'Dodecahedron'</span>,</div><div class="line">  price: <span class="number">2.95</span>,</div><div class="line">  description: <span class="string">'. . .'</span>,</div><div class="line">  canPurchase: <span class="literal">true</span>,</div><div class="line">  <span class="comment">// If the product is sold out, we want to hide it.</span></div><div class="line">  soldOut: <span class="literal">true</span>,</div><div class="line">&#125;.</div></pre></td></tr></table></figure>
<h3 id="ng-repeat-Directive"><a href="#ng-repeat-Directive" class="headerlink" title="ng-repeat Directive"></a>ng-repeat Directive</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"StoreController as store"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"product in store.products"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span> &#123;&#123;product.name&#125;&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span> $&#123;&#123;product.price&#125;&#125; <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span> &#123;&#123;product.description&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-show</span>=<span class="string">"product.canPurchase"</span>&gt;</span>Add to Cart<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  . . .</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line">app.controller(<span class="string">'StoreController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.products = gems;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> gems = [</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">"Dodecahedron"</span>,</div><div class="line">    price: <span class="number">2.95</span>,</div><div class="line">    description: <span class="string">". . ."</span>,</div><div class="line">    canPurchase: <span class="literal">true</span>,</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    name: <span class="string">"Pentagonal Gem"</span>,</div><div class="line">    price: <span class="number">5.95</span>,</div><div class="line">    description: <span class="string">". . ."</span>,</div><div class="line">    canPurchase: <span class="literal">false</span>,</div><div class="line">  &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<h1 id="Build-in-Directives"><a href="#Build-in-Directives" class="headerlink" title="Build-in Directives"></a>Build-in Directives</h1><h2 id="Filters-and-a-new-Directive"><a href="#Filters-and-a-new-Directive" class="headerlink" title="Filters and a new Directive"></a>Filters and a new Directive</h2><h3 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h3>
{{ data | filter:options }}

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// date</span></div><div class="line">&#123;&#123;<span class="string">'1388123412323'</span> | date:<span class="string">'MM/dd/yyyy @ h:mma'</span>&#125;&#125; <span class="comment">// 12/27/2013 @ 12:50AM</span></div><div class="line"></div><div class="line"><span class="comment">// uppercase &amp; lowercase</span></div><div class="line">&#123;&#123;<span class="string">'octagon gem'</span> | uppercase&#125;&#125; <span class="comment">// OCTAGON GEM</span></div><div class="line"></div><div class="line"><span class="comment">// limitTo</span></div><div class="line">&#123;&#123;<span class="string">'My Description'</span> | limitTo:<span class="number">8</span>&#125;&#125; <span class="comment">// My Descr</span></div><div class="line">&lt;li ng-repeat=<span class="string">"product in store.products | limitTo:3"</span>&gt;</div><div class="line">  </div><div class="line"><span class="comment">// orderBy</span></div><div class="line"><span class="comment">// Will list products by descending price.</span></div><div class="line"><span class="comment">// Without the  - products would list in ascending order.</span></div><div class="line">&lt;li ng-repeat=<span class="string">"product in store.products | orderBy:'-price'"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="Using-ng-src-for-Images"><a href="#Using-ng-src-for-Images" class="headerlink" title="Using ng-src for Images"></a>Using ng-src for Images</h3><p>Using Angular Expressions inside a src attribute causes an error! Because the browser tries to load the image before the Expression evaluates.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;body ng-controller=<span class="string">"StoreController as store"</span>&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> <span class="attr">ng-repeat</span>=<span class="string">"product in store.products"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span> </div><div class="line">        &#123;&#123;product.name&#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span> &#123;&#123;product.price | currency&#125;&#125; <span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line">        // NG-SOURCEto the rescue!</div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-src</span>=<span class="string">"&#123;&#123;product.images[0].full&#125;&#125;"</span>/&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Tabs-Inside-Out"><a href="#Tabs-Inside-Out" class="headerlink" title="Tabs Inside Out"></a>Tabs Inside Out</h2><ul>
<li><code>ng-click</code></li>
<li><code>ng-init</code></li>
<li><code>ng-class</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">ng-conrtoller</span>=<span class="string">"PanelController as panel"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:panel.isSelected(1)&#125;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span> <span class="attr">ng-click</span>=<span class="string">"panel.selectTab(1)"</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:panel.isSelected(3)&#125;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span> <span class="attr">ng-click</span>=<span class="string">"panel.selectTab(1)"</span>&gt;</span>Specifications<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:panel.isSelected(3)&#125;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span> <span class="attr">ng-click</span>=<span class="string">"panel.selectTab(3)"</span>&gt;</span>Reviews<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span> <span class="attr">ng-show</span>=<span class="string">"panel.isSelected(1)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Description <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;product.description&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">"PanelController"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.tab = <span class="number">1</span>;</div><div class="line">  <span class="keyword">this</span>.selectTab = <span class="function"><span class="keyword">function</span>(<span class="params">setTab</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.tab = setTab;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.isSelected = <span class="function"><span class="keyword">function</span>(<span class="params">checkTab</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.tab === checkTab;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="Forms-Models-and-Validations"><a href="#Forms-Models-and-Validations" class="headerlink" title="Forms, Models, and Validations"></a>Forms, Models, and Validations</h1><h2 id="Forms-and-Models"><a href="#Forms-and-Models" class="headerlink" title="Forms and Models"></a>Forms and Models</h2><h3 id="Introducing-ng-model"><a href="#Introducing-ng-model" class="headerlink" title="Introducing ng-model"></a>Introducing ng-model</h3><p><code>ng-model</code> binds the form element value to the property.</p>
<p>So we can have live previrew.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"reviewForm"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>Stars: &#123;&#123;review.stars&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">    &#123;&#123;review.body&#125;&#125; </div><div class="line">    <span class="tag">&lt;<span class="name">cite</span>&gt;</span>by: &#123;&#123;review.author&#125;&#125;<span class="tag">&lt;/<span class="name">cite</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"review.stars"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1 star<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>2 stars<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    . . .</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">textarea</span> &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>by:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"review.body"</span> <span class="attr">type</span>=<span class="string">"email"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"review.author"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Two More Binding Examples</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- With a Checkbox --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Sets value to true or false --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"review.terms"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span> I agree to the terms</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With Radio Buttons --&gt;</span></div><div class="line"><span class="comment">&lt;!-- Sets the proper value based on which is selected --&gt;</span></div><div class="line">What color would you like? </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"review.color"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"red"</span> /&gt;</span> Red </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"review.color"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"blue"</span> /&gt;</span> Blue </div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"review.color"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"green"</span> /&gt;</span> Green</div></pre></td></tr></table></figure>
<h2 id="Accepting-Submissions"><a href="#Accepting-Submissions" class="headerlink" title="Accepting Submissions"></a>Accepting Submissions</h2><p><code>ng-submit</code> directive.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">"ReviewController"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.review = &#123;&#125;;</div><div class="line">  <span class="keyword">this</span>.addReview = <span class="function"><span class="keyword">function</span>(<span class="params">product</span>) </span>&#123;</div><div class="line">    product.reviews.push(<span class="keyword">this</span>.review);</div><div class="line">    <span class="keyword">this</span>.review = &#123;&#125;;</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"reviewForm"</span> <span class="attr">ng-controller</span>=<span class="string">"ReviewController as reviewCtrl"</span></span></div><div class="line"><span class="attr">ng-submit</span>=<span class="string">"reviewCtrl.addReview(product)"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>Stars: &#123;&#123;reviewCtrl.review.stars&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">    &#123;&#123;reviewCtrl.review.body&#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">cite</span>&gt;</span>by: &#123;&#123;reviewCtrl.review.author&#125;&#125;<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Form-Validations-101"><a href="#Form-Validations-101" class="headerlink" title="Form Validations 101"></a>Form Validations 101</h2><p>We don?t want the form to submit when it?s invalid.</p>
<p><strong>Turn Off Default HTML Validation</strong></p>
<ul>
<li><code>novalidate</code>: Turn Off Default HTML Validation</li>
<li><code>required</code>: Mark Required Fields</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"reviewForm"</span> <span class="attr">ng-controller</span>=<span class="string">"ReviewController as reviewCtrl"</span></span></div><div class="line"><span class="attr">ng-submit</span>=<span class="string">"reviewCtrl.addReview(product)"</span> &gt;</div><div class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"reviewCtrl.review.stars"</span> <span class="attr">required</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>1 star<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">ng-model</span>=<span class="string">"reviewCtrl.review.body"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>by:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">ng-model</span>=<span class="string">"reviewCtrl.review.author"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">required</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span> reviewForm is &#123;&#123;reviewForm.$valid&#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Preventing the Submit</strong></p>
<p>If valid is <code>false</code> , then <code>addReview</code> is never called.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"reviewForm"</span> <span class="attr">ng-controller</span>=<span class="string">"ReviewController as reviewCtrl"</span></span></div><div class="line"><span class="attr">ng-submit</span>=<span class="string">"reviewForm.$valid &amp;&amp; reviewCtrl.addReview(product)"</span> <span class="attr">novalidate</span>&gt;</div></pre></td></tr></table></figure>
<p><strong>Doesn?t Submit an Invalid Form</strong></p>
<p>How might we give a hint to the user why their form is invalid?</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">ng-model</span>=<span class="string">"reviewCtrl.review.author"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">required</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ng-invalid</span><span class="selector-class">.ng-dirty</span> &#123;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#FA787E</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.ng-valid</span><span class="selector-class">.ng-dirty</span> &#123;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#78FA89</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>Source before typing email</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">.</span> <span class="attr">.</span> <span class="attr">.</span> <span class="attr">class</span>=<span class="string">"ng-pristine ng-invalid"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Source after typing, with invalid email</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"author"</span><span class="attr">.</span> <span class="attr">.</span> <span class="attr">.</span> <span class="attr">class</span>=<span class="string">"ng-dirty ng-invalid"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Source after typing, with valid email</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">.</span> <span class="attr">.</span> <span class="attr">.</span> <span class="attr">class</span>=<span class="string">"ng-dirty ng-valid"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>HTML5-based type validations</strong></p>
<p>Web forms usually have rules around valid input:</p>
<ul>
<li>Angular JS has built-in validations for common input types:</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"homepage"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">min</span>=<span class="string">1</span> <span class="attr">max</span>=<span class="string">10</span> <span class="attr">name</span>=<span class="string">"quantity"</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Flatlander’s-Gem-Store&quot;&gt;&lt;a href=&quot;#Flatlander’s-Gem-Store&quot; class=&quot;headerlink&quot; title=&quot;Flatlander’s Gem Store&quot;&gt;&lt;/a&gt;Flatlander’s Gem Store&lt;/h1&gt;&lt;h2 id=&quot;Ramp-up&quot;&gt;&lt;a href=&quot;#Ramp-up&quot; class=&quot;headerlink&quot; title=&quot;Ramp up&quot;&gt;&lt;/a&gt;Ramp up&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Why Angular?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you?re using JavaScript to create a dynamic website, Angular is a good choice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Angular helps you organize your JavaScript&lt;/li&gt;
&lt;li&gt;Angular helps create responsive (as in fast) websites.&lt;/li&gt;
&lt;li&gt;Angular plays well with jQuery.&lt;/li&gt;
&lt;li&gt;Angular is easy to test.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="CodeSchool" scheme="http://www.yuthon.com/tags/CodeSchool/"/>
    
      <category term="JavaScript" scheme="http://www.yuthon.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Code School - Try jQuery</title>
    <link href="http://www.yuthon.com/2016/04/13/CodeSchool-Try-jQuery/"/>
    <id>http://www.yuthon.com/2016/04/13/CodeSchool-Try-jQuery/</id>
    <published>2016-04-13T09:24:09.000Z</published>
    <updated>2016-05-16T11:51:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction-to-jQuery"><a href="#Introduction-to-jQuery" class="headerlink" title="Introduction to jQuery"></a>Introduction to jQuery</h1><h2 id="What’s-jQuery"><a href="#What’s-jQuery" class="headerlink" title="What’s jQuery"></a>What’s jQuery</h2><p><strong>jQuery makes it easy to</strong></p>
<ul>
<li>find elements in an HTML document</li>
<li>change HTML content</li>
<li>listen to what a user does and react accordingly</li>
<li>animate content on the page</li>
<li>talk over the network to fetch new content</li>
</ul>
<a id="more"></a>
<p><strong>Document Object Model</strong></p>
<p>A tree-like structure created by browsers so we can quickly find HTML Elements using JavaScript.</p>
<blockquote>
<p>“DOM”</p>
</blockquote>
<p><img src="/images/dom-structure.png" alt="dom-structure"></p>
<p><strong>How jQuery Accesses The DOM</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="built_in">document</span>);</div></pre></td></tr></table></figure>
<p><strong>Using the jQuery function to find nodes</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery selectors</span></div><div class="line"><span class="comment">// Use short &amp; sweet syntax</span></div><div class="line">$(<span class="string">"h1"</span>); <span class="comment">// EQUALS TO jQuery("h1");</span></div><div class="line">$(<span class="string">"p"</span>); <span class="comment">// EQUALS TO jQuery("p");</span></div></pre></td></tr></table></figure>
<p><strong>Modifying an element’s text</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h1"</span>).text(<span class="string">"Where to?"</span>);</div></pre></td></tr></table></figure>
<p><strong>Listening for document ready</strong></p>
<p>JavaScript may execute before the DOM loads, so we need to make sure the DOM has finished loading the HTML content before we can reliably use jQuery.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// code</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Using-jQuery"><a href="#Using-jQuery" class="headerlink" title="Using jQuery"></a>Using jQuery</h2><p><strong>Getting started</strong></p>
<ol>
<li><p>download jQuery</p>
</li>
<li><p>load it in your HTML document</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>start using it</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"application.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>We can find elements by ID or Class</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Where do you want to go?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Travel Destinations<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Plan your next adventure.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"destinations"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Rome<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Paris<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'promo'</span>&gt;</span>Rio<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#destinations"</span>);</div><div class="line">$(<span class="string">".promo"</span>);</div></pre></td></tr></table></figure>
<h1 id="Traversing-the-DOM"><a href="#Traversing-the-DOM" class="headerlink" title="Traversing the DOM"></a>Traversing the DOM</h1><h2 id="Searching-the-DOM"><a href="#Searching-the-DOM" class="headerlink" title="Searching the DOM"></a>Searching the DOM</h2><p><strong>Selecting descendants</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Where do you want to go?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Travel Destinations<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Plan your next adventure.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"destinations"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Paris<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Rome<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'promo'</span>&gt;</span>Rio<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// we select the &lt;li&gt; elements that are</span></div><div class="line"><span class="comment">// inside of the &lt;ul&gt; with a "destinations" ID</span></div><div class="line">$(<span class="string">"#destinations li"</span>);</div></pre></td></tr></table></figure>
<p> <strong>Selecting direct children</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Where do you want to go?<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Travel Destinations<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Plan your next adventure.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"destinations"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Rome<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"france"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Paris<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'promo'</span>&gt;</span>Rio<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// we select only the &lt;li&gt; elements that are</span></div><div class="line"><span class="comment">// children of the "destinations" &lt;ul&gt;</span></div><div class="line">$(<span class="string">"#destinations &gt; li"</span>);</div></pre></td></tr></table></figure>
<p><strong>Selecting multiple elements</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".promo, #france"</span>);</div></pre></td></tr></table></figure>
<p><strong>CSS-like pseudo classes</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#destinations li:first"</span>);</div><div class="line">$(<span class="string">"#destinations li:last"</span>);</div><div class="line"></div><div class="line"><span class="comment">// watch out, the index starts at 0</span></div><div class="line">$(<span class="string">"#destinations li:odd"</span>);</div><div class="line">$(<span class="string">"#destinations li:even"</span>);</div></pre></td></tr></table></figure>
<h2 id="Traversing-the-DOM-1"><a href="#Traversing-the-DOM-1" class="headerlink" title="Traversing the DOM"></a>Traversing the DOM</h2><p><strong>Filtering by traversing</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// EQUALS TO $("#destinations li");</span></div><div class="line">$(<span class="string">"#destinations"</span>).find(<span class="string">"li"</span>);</div><div class="line"></div><div class="line"><span class="comment">// EQUALS TO $("li:first");</span></div><div class="line">$(<span class="string">"li"</span>).first();</div><div class="line"></div><div class="line"><span class="comment">// EQUALS TO $("li:last");</span></div><div class="line">$(<span class="string">"li"</span>).last();</div></pre></td></tr></table></figure>
<p><strong>Walking the DOM</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"li"</span>).first();</div><div class="line">$(<span class="string">"li"</span>).first().next();</div><div class="line">$(<span class="string">"li"</span>).first().next().prev();</div></pre></td></tr></table></figure>
<p><strong>Walking up the DOM</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"li"</span>).first().parent();</div></pre></td></tr></table></figure>
<p><strong>Walking down the DOM</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#destinations"</span>).children(<span class="string">"li"</span>);</div></pre></td></tr></table></figure>
<h1 id="Working-with-the-DOM"><a href="#Working-with-the-DOM" class="headerlink" title="Working with the DOM"></a>Working with the DOM</h1><h2 id="Manipulating-the-DOM"><a href="#Manipulating-the-DOM" class="headerlink" title="Manipulating the DOM"></a>Manipulating the DOM</h2><h3 id="Appending-to-the-DOM"><a href="#Appending-to-the-DOM" class="headerlink" title="Appending to the DOM"></a>Appending to the DOM</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> price = $(<span class="string">'&lt;p&gt;From $399.99&lt;/p&gt;'</span>);</div><div class="line">  $(<span class="string">'.vacation'</span>).append(price);</div><div class="line">  <span class="comment">// OR</span></div><div class="line">  <span class="comment">// price.appendTo($('.vacation'));</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Ways to add this price node to the DOM</p>
<ul>
<li><code>.append(&lt;element&gt;)</code></li>
<li><code>.prepend(&lt;element&gt;)</code></li>
<li><code>.after(&lt;element&gt;)</code></li>
<li><code>.before(&lt;element&gt;)</code></li>
<li><code>.appendTo(&lt;element&gt;)</code></li>
<li><code>.prependTo(&lt;element&gt;)</code></li>
<li><code>.insertAfter(&lt;element&gt;)</code></li>
<li><code>.insertBefore(&lt;element&gt;)</code></li>
</ul>
<h3 id="Removing-from-the-DOM"><a href="#Removing-from-the-DOM" class="headerlink" title="Removing from the DOM"></a>Removing from the DOM</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> price = $(<span class="string">'&lt;p&gt;From $399.99&lt;/p&gt;'</span>);</div><div class="line">  $(<span class="string">'.vacation'</span>).append(price);</div><div class="line">  <span class="comment">// Removes the &lt;button&gt; from the DOM</span></div><div class="line">  $(<span class="string">'button'</span>).remove();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Acting-on-Interaction"><a href="#Acting-on-Interaction" class="headerlink" title="Acting on Interaction"></a>Acting on Interaction</h2><p><strong>Watching for Click</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> price = $(<span class="string">'&lt;p&gt;From $399.99&lt;/p&gt;'</span>);</div><div class="line">    $(<span class="string">'.vacation'</span>).append(price);</div><div class="line">    $(<span class="string">'button'</span>).remove();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Refactor-Using-Traversing"><a href="#Refactor-Using-Traversing" class="headerlink" title="Refactor Using Traversing"></a>Refactor Using Traversing</h2><ul>
<li><strong>Traversing from $(this)</strong></li>
<li><strong>Using .closest(<selector>)</selector></strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> price = $(<span class="string">'&lt;p&gt;From $399.99&lt;/p&gt;'</span>);</div><div class="line">    $(<span class="keyword">this</span>).closest(<span class="string">'.vacation'</span>).append(price);</div><div class="line">    $(<span class="keyword">this</span>).remove();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Traversing-and-Filtering"><a href="#Traversing-and-Filtering" class="headerlink" title="Traversing and Filtering"></a>Traversing and Filtering</h2><p><strong>jQuery Object Methods</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"vacation onsale"</span> <span class="attr">data-price</span>=<span class="string">'399.99'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hawaiian Vacation<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>Get Price<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">'comments'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Amazing deal!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Want to go!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>.data(&lt;name&gt;)</code></li>
<li><code>.data(&lt;name&gt;, &lt;value&gt;)</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Only target a 'button' if it's inside a '.vacation'</span></div><div class="line">  $(<span class="string">'.vacation'</span>).on(<span class="string">'click'</span>, <span class="string">'button'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Reusing jQuery Objects</span></div><div class="line">    <span class="keyword">var</span> vacation = $(<span class="keyword">this</span>).closest(<span class="string">'.vacation'</span>);</div><div class="line">    <span class="keyword">var</span> amount = vacation.data(<span class="string">'price'</span>);</div><div class="line">    <span class="keyword">var</span> price = $(<span class="string">'&lt;p&gt;From $'</span>+amount+<span class="string">'&lt;/p&gt;'</span>);</div><div class="line">    vacation.append(price);</div><div class="line">    $(<span class="keyword">this</span>).remove();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Filtering for Vacations On sale</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'filters'</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'onsale-filter'</span>&gt;</span>On Sale Now<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">'expiring-filter'</span>&gt;</span>Expiring<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#filters'</span>).on(<span class="string">'click'</span>, <span class="string">'.onsale-filter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.highlighted'</span>).removeClass(<span class="string">'highlighted'</span>);</div><div class="line">  $(<span class="string">'.vacation'</span>).filter(<span class="string">'.onsale'</span>).addClass(<span class="string">'highlighted'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="Listening-to-DOM-Events"><a href="#Listening-to-DOM-Events" class="headerlink" title="Listening to DOM Events"></a>Listening to DOM Events</h1><h2 id="On-DOM-Load"><a href="#On-DOM-Load" class="headerlink" title="On DOM Load"></a>On DOM Load</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"confirmation"</span>&gt;</span></div><div class="line">  ...</div><div class="line">  // Clicking this button</div><div class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>FLIGHT DETAILS<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  // will show the ticket</div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ticket"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ticket</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.confirmation'</span>).on(<span class="string">'click'</span>, <span class="string">'button'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">// Using slideDown to Show Elements</span></div><div class="line">    $(<span class="keyword">this</span>).closest(<span class="string">'.confirmation'</span>).find(<span class="string">'.ticket'</span>).slideDown();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Using slideDown to Show Elements</strong></p>
<ul>
<li><code>.slideDown()</code></li>
<li><code>.slideUp()</code></li>
<li><code>.slideToggle()</code><ul>
<li>Display or hide the matched elements with a sliding motion.</li>
</ul>
</li>
</ul>
<h2 id="Expanding-on-on"><a href="#Expanding-on-on" class="headerlink" title="Expanding on on()"></a>Expanding on on()</h2><p>What if we also want to show the ticket when they hover over the <code>&lt;h3&gt;</code> tag?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTicket</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'this'</span>).closest(<span class="string">'.confirmation'</span>).find(<span class="string">'.ticket'</span>).slideDown();</div><div class="line">&#125;</div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// Don't add () at the end - that would execute the function immediately</span></div><div class="line">  $(<span class="string">'.confirmation'</span>).on(<span class="string">'click'</span>, <span class="string">'button'</span>, showTicket);</div><div class="line">  $(<span class="string">'.confirmation'</span>).on(<span class="string">'mouseenter'</span>, <span class="string">'h3'</span>, showTicket);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Mouse Event</strong></p>
<ul>
<li><code>click</code></li>
<li><code>dblclick</code></li>
<li><code>focusin</code></li>
<li><code>focusout</code></li>
<li><code>mousedown</code></li>
<li><code>mouseup</code></li>
<li><code>mousemove</code></li>
<li><code>mouseout</code></li>
<li><code>mouseover</code></li>
<li><code>mouseleave</code></li>
<li><code>mouseenter</code></li>
</ul>
<h2 id="Keyboard-Events"><a href="#Keyboard-Events" class="headerlink" title="Keyboard Events"></a>Keyboard Events</h2><p>Changing this “Tickets “input field should recalculate the total price.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vacation"</span> <span class="attr">data-price</span>=<span class="string">'399.99'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Hawaiian Vacation<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>$399.99 per ticket<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    Tickets:</div><div class="line">    <span class="comment">&lt;!-- When this updates... --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'number'</span> <span class="attr">class</span>=<span class="string">'quantity'</span> <span class="attr">value</span>=<span class="string">'1'</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- ...we'll update the calculated price here --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Total Price: $<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">'total'</span>&gt;</span>399.99<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Keyboard and Form Events</strong></p>
<p>Keyboard Events</p>
<ul>
<li><code>keypress</code></li>
<li><code>keydown</code></li>
<li><code>keyup</code></li>
</ul>
<p>Form Events</p>
<ul>
<li><code>blur</code></li>
<li><code>select</code></li>
<li><code>change</code></li>
<li><code>focus</code></li>
<li><code>submit</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.vacation'</span>).on(<span class="string">'keyup'</span>, <span class="string">'.quantity'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Use + to convert the string to a number</span></div><div class="line">    <span class="keyword">var</span> price = +$(<span class="keyword">this</span>).closest(<span class="string">'.vacation'</span>).data(<span class="string">'price'</span>);</div><div class="line">    <span class="keyword">var</span> quantity = +$(<span class="keyword">this</span>).val();</div><div class="line">    <span class="comment">// You can pass a number or a string to the .text() method</span></div><div class="line">    $(<span class="string">'#total'</span>).text(price * quantity);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Link-Layover"><a href="#Link-Layover" class="headerlink" title="Link Layover"></a>Link Layover</h2><p>Clicking Show Comments will cause them to fade in</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span> <span class="attr">class</span>=<span class="string">'expand'</span>&gt;</span>Show Comments<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* application.css */</span></div><div class="line"><span class="selector-class">.comments</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// application.js</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.vacation'</span>).on(<span class="string">'click'</span>, <span class="string">'.expand'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="comment">// The click event will "bubble up? but the browser won't handle it</span></div><div class="line">    event.preventDefault();</div><div class="line">    $(<span class="keyword">this</span>).closest(<span class="string">'.vacation'</span>)</div><div class="line">    .find(<span class="string">'.comments'</span>)</div><div class="line">    .fadeToggle();</div><div class="line">  &#125;</div><div class="line"> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>event.stopPropagation()</strong></p>
<p>The browser will still handle the click event but will prevent it from “bubbling up? to each parent node.</p>
<p><strong>event.preventDefault()</strong></p>
<p>The click event will “bubble up? but the browser won’t handle it</p>
<h1 id="Styling"><a href="#Styling" class="headerlink" title="Styling"></a>Styling</h1><h2 id="Taming-CSS"><a href="#Taming-CSS" class="headerlink" title="Taming CSS"></a>Taming CSS</h2><p><strong>Changing the Style</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// application.js</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#vacations'</span>).on(<span class="string">'click'</span>, <span class="string">'.vacation'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// NOT RECOMMENDED</span></div><div class="line">    <span class="comment">// $(this).css('background-color', '#252b30');</span></div><div class="line">    <span class="comment">// $(this).css('border-color', '1px solid #967');</span></div><div class="line">    <span class="comment">// $(this).css('background-color', '#252b30')</span></div><div class="line">    <span class="comment">//        .css('border-color', '1px solid #967');</span></div><div class="line">    </div><div class="line">    <span class="comment">// Passing in a JavaScript Object as an argument is a common jQuery pattern</span></div><div class="line">    $(<span class="keyword">this</span>).css(&#123;<span class="string">'background-color'</span>: <span class="string">'#252b30'</span>,</div><div class="line">                 <span class="string">'border-color'</span>: <span class="string">'1px solid #967'</span>&#125;);</div><div class="line">    <span class="comment">// Same as CSS syntax, but easier to read and understand</span></div><div class="line">    <span class="comment">// $(this).find('.price').css('display', 'block');</span></div><div class="line">    $(<span class="keyword">this</span>).find(<span class="string">'.price'</span>).show();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>jQuery Object Methods</p>
<ul>
<li><code>.css(&lt;attr&gt;, &lt;value&gt;)</code></li>
<li><code>.css(&lt;attr&gt;)</code></li>
<li><code>.css(&lt;object&gt;)</code></li>
<li><code>.show()</code></li>
<li><code>.hide()</code></li>
</ul>
<p><strong>Moving Styles to External CSS</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* application.css */</span></div><div class="line"><span class="selector-class">.highlighted</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>:<span class="number">#563</span>;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">1px</span> solid <span class="number">#967</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.highlighted</span> <span class="selector-class">.price</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// application.js</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#vacations'</span>).on(<span class="string">'click'</span>, <span class="string">'.vacation'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">'highlighted'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>jQuery Object Methods</p>
<ul>
<li><code>.toggleClass()</code></li>
<li><code>.addClass(&lt;class&gt;)</code></li>
<li><code>.removeClass(&lt;class&gt;)</code></li>
</ul>
<h2 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h2><p>What can we do to add a bit more movement to this?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'#vacations'</span>).on(<span class="string">'click'</span>, <span class="string">'.vacation'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">'highlighted'</span>);</div><div class="line">    <span class="comment">// Our vacation package will move up and down</span></div><div class="line">    <span class="keyword">if</span> ($(<span class="keyword">this</span>).hasClass(<span class="string">'highlighted'</span>)) &#123;</div><div class="line">      $(<span class="keyword">this</span>).animate(&#123;<span class="string">'top'</span>: <span class="string">'-10px'</span>&#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      $(<span class="keyword">this</span>).animate(&#123;<span class="string">'top'</span>: <span class="string">'0px'</span>&#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> <strong>Changing the Speed</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Default speed is 400</span></div><div class="line">$(<span class="keyword">this</span>).animate(&#123;<span class="string">'top'</span>: <span class="string">'-10px'</span>&#125;, <span class="number">400</span>);</div><div class="line"><span class="comment">// 'fast' equals to 200</span></div><div class="line">$(<span class="keyword">this</span>).animate(&#123;<span class="string">'top'</span>: <span class="string">'-10px'</span>&#125;, <span class="string">'fast'</span>);</div><div class="line"><span class="comment">// 'slow' equals to 600</span></div><div class="line">$(<span class="keyword">this</span>).animate(&#123;<span class="string">'top'</span>: <span class="string">'-10px'</span>&#125;, <span class="string">'slow'</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction-to-jQuery&quot;&gt;&lt;a href=&quot;#Introduction-to-jQuery&quot; class=&quot;headerlink&quot; title=&quot;Introduction to jQuery&quot;&gt;&lt;/a&gt;Introduction to jQuery&lt;/h1&gt;&lt;h2 id=&quot;What’s-jQuery&quot;&gt;&lt;a href=&quot;#What’s-jQuery&quot; class=&quot;headerlink&quot; title=&quot;What’s jQuery&quot;&gt;&lt;/a&gt;What’s jQuery&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;jQuery makes it easy to&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find elements in an HTML document&lt;/li&gt;
&lt;li&gt;change HTML content&lt;/li&gt;
&lt;li&gt;listen to what a user does and react accordingly&lt;/li&gt;
&lt;li&gt;animate content on the page&lt;/li&gt;
&lt;li&gt;talk over the network to fetch new content&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="CodeSchool" scheme="http://www.yuthon.com/tags/CodeSchool/"/>
    
      <category term="JavaScript" scheme="http://www.yuthon.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Code School - JavaScript Best Practices</title>
    <link href="http://www.yuthon.com/2016/04/12/CodeSchool-JavaScript-Best-Practices/"/>
    <id>http://www.yuthon.com/2016/04/12/CodeSchool-JavaScript-Best-Practices/</id>
    <published>2016-04-12T10:19:54.000Z</published>
    <updated>2016-05-16T11:51:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-Sword-of-Syntax"><a href="#The-Sword-of-Syntax" class="headerlink" title="The Sword of Syntax"></a>The Sword of Syntax</h1><h2 id="Ternary-Conditionals"><a href="#Ternary-Conditionals" class="headerlink" title="Ternary Conditionals"></a>Ternary Conditionals</h2><p>The ternary conditional provides a shortcut over lengthier conditional blocks.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">someCondition ? pickThisIfTrue : pickThisIfFalse;</div></pre></td></tr></table></figure>
<p><strong>Example</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isArthur = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> weapon = isArthur ? <span class="string">"Excalibur"</span> : <span class="string">"Longsword"</span>;?</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Current weapon: "</span> + weapon); <span class="comment">// Longsword</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>Caution</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isArthur = <span class="literal">false</span>;</div><div class="line"><span class="comment">// The output is not as expected</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Current weapon: "</span> + isArthur ? <span class="string">"Excalibur"</span> : <span class="string">"Longsword"</span>); <span class="comment">// Excalibur</span></div></pre></td></tr></table></figure>
<p>The <code>+</code> only knows to evaluate a variable and add it to a string, all before the <code>?</code> gets to check a condition.</p>
<p><img src="/images/using-retnaries-as-expressions.png" alt="using-retnaries-as-expressions"></p>
<p>The <code>?</code> now looks for a boolean, but finds a string. Turns out, any JS value that is not <code>false</code>, <code>0</code>, <code>undefined</code>, <code>NaN</code>, <code>&quot;&quot;</code>, or <code>null</code> will always evaluate as “truthy”.</p>
<p><strong>Ensure ternaries are isolated</strong><br>Use parentheses to ensure the conditional is checked correctly.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isArthur = <span class="literal">false</span>;</div><div class="line"><span class="comment">// The output is as expected</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Current weapon: "</span> + (isArthur ? <span class="string">"Excalibur"</span> : <span class="string">"Longsword"</span>)); <span class="comment">// Longsword</span></div></pre></td></tr></table></figure>
<p><strong>More Usage</strong></p>
<ul>
<li><p>We can use compound Boolean expressions to make ternary decisions, too.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isArthur = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> isKing = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Current weapon: "</span> + (isArthur <span class="string">"Excalibur"</span> : <span class="string">"Longsword"</span>));</div></pre></td></tr></table></figure>
</li>
<li><p>Any executable statement can serve as a ternary?s response choices.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">isArthur &amp;&amp; isKing ? alert(<span class="string">"Hail Arthur, King of the Britons!"</span>) : </div><div class="line">                     alert(<span class="string">"Charge on, ye Knight, for the glory of the King!"</span>) ;</div></pre></td></tr></table></figure>
</li>
<li><p>Ternaries provide a different format for picking immediately-invoked functions.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isArthur = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> isKing = <span class="literal">false</span>;</div><div class="line"></div><div class="line">isArthur &amp;&amp; isKing ? <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">                       alert(<span class="string">"Hail Arthur, King of the Britons!"</span>);</div><div class="line">                       <span class="built_in">console</span>.log(<span class="string">"Current weapon: Excalibur"</span>);</div><div class="line">                     <span class="comment">// Remember that adding the parentheses calls the function expression.</span></div><div class="line">                     &#125;()</div><div class="line">                     :</div><div class="line">                     <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">                       alert(<span class="string">"Charge on, ye Knight, for the glory of the King!"</span>);</div><div class="line">                       <span class="built_in">console</span>.log(<span class="string">"Current weapon: Longsword"</span>);</div><div class="line">                     &#125;();</div></pre></td></tr></table></figure>
</li>
<li><p>Each result option provides the opportunity to execute multiple actions.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isArthur = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> isKing = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> weapon;</div><div class="line"><span class="keyword">var</span> helmet;</div><div class="line"></div><div class="line"><span class="comment">// Multiple statements within a single ternary response </span></div><div class="line"><span class="comment">// are grouped in parentheses and separated by a comma.</span></div><div class="line">isArthur &amp;&amp; isKing ? ( weapon = <span class="string">"Excalibur"</span>, helmet = <span class="string">"Goosewhite"</span> )</div><div class="line">                     :</div><div class="line">                     ( weapon = <span class="string">"Longsword"</span>, helmet = <span class="string">"Iron Helm"</span> );</div></pre></td></tr></table></figure>
</li>
<li><p>A ternary can hold other ternaries within each of the possible responses.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isArthur = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> isKing = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> weapon;</div><div class="line"><span class="keyword">var</span> helmet;</div><div class="line"></div><div class="line">isArthur &amp;&amp; isKing ? ( weapon = <span class="string">"Excalibur"</span>, helmet = <span class="string">"Goosewhite"</span> )</div><div class="line">                     :</div><div class="line">                     isArcher ? (weapon = <span class="string">"Longbow"</span>, helmet = <span class="string">"Mail Helm"</span>)</div><div class="line">                              : ( weapon = <span class="string">"Longsword"</span>, helmet = <span class="string">"Iron Helm"</span> );</div></pre></td></tr></table></figure>
</li>
</ul>
<p>To be continued.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;The-Sword-of-Syntax&quot;&gt;&lt;a href=&quot;#The-Sword-of-Syntax&quot; class=&quot;headerlink&quot; title=&quot;The Sword of Syntax&quot;&gt;&lt;/a&gt;The Sword of Syntax&lt;/h1&gt;&lt;h2 id=&quot;Ternary-Conditionals&quot;&gt;&lt;a href=&quot;#Ternary-Conditionals&quot; class=&quot;headerlink&quot; title=&quot;Ternary Conditionals&quot;&gt;&lt;/a&gt;Ternary Conditionals&lt;/h2&gt;&lt;p&gt;The ternary conditional provides a shortcut over lengthier conditional blocks.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;someCondition ? pickThisIfTrue : pickThisIfFalse;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isArthur = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; weapon = isArthur ? &lt;span class=&quot;string&quot;&gt;&quot;Excalibur&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;Longsword&quot;&lt;/span&gt;;?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Current weapon: &quot;&lt;/span&gt; + weapon); &lt;span class=&quot;comment&quot;&gt;// Longsword&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="CodeSchool" scheme="http://www.yuthon.com/tags/CodeSchool/"/>
    
      <category term="JavaScript" scheme="http://www.yuthon.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Tips for Hexo configuration</title>
    <link href="http://www.yuthon.com/2016/04/11/Tips-for-Hexo-configuration/"/>
    <id>http://www.yuthon.com/2016/04/11/Tips-for-Hexo-configuration/</id>
    <published>2016-04-10T16:19:54.000Z</published>
    <updated>2016-07-30T14:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="添加README-md文件"><a href="#添加README-md文件" class="headerlink" title="添加README.md文件"></a>添加<code>README.md</code>文件</h2><p>由于Hexo会将<code>source/</code>目录下的所有<code>.md</code>文件渲染成<code>.html</code>文件，因此需要将<code>README.md</code>排除在外。幸好，Hexo在3.0以上的版本中提供了<code>skip_render</code>参数。</p>
<ol>
<li><p>在<code>source/</code>里创建<code>README.md</code></p>
</li>
<li><p>在<code>_config.yml</code>中修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">skip_render:</div><div class="line">  - README.md</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>skip_render: Paths not to be rendered. You can use <a href="https://github.com/isaacs/minimatch" target="_blank" rel="external">glob expressions</a> for path matching</p>
</blockquote>
<a id="more"></a>
<h2 id="将源文件托管到Github"><a href="#将源文件托管到Github" class="headerlink" title="将源文件托管到Github"></a>将源文件托管到Github</h2><p>为了保持多终端撰写Blog的便利，同时为了备份与版本管理，需要将Blog的源文件托管至Github上。目前的思路是在Github Pages的Repo上创建新的分支<code>source</code>。由于Hexo在Init之后，根目录下已经有了<code>.gitignore</code>文件，我们就不需要自己动手写。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> hexo</div><div class="line">$ git init</div><div class="line">$ git checkout -b <span class="built_in">source</span></div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"Initial"</span></div><div class="line">$ git remote add origin git@github.com:corenel/corenel.github.io.git</div><div class="line">$ git push origin <span class="built_in">source</span></div></pre></td></tr></table></figure>
<p>针对使用<code>git clone</code>下来第三方主题目录下有<code>.git</code>文件夹的情况，其实是不推荐这样做的。因为我们往往要对第三方主题进行修改，而我们不能直接提交到第三方问题的仓库上，这样就对多终端同步主题造成了困扰。</p>
<p>建议的方法是直接fork第三方主题，而后新建分支来作为给之后对主题修改之用，并且使用<code>git submodule</code>来管理。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git submodule add git@github.com:corenel/hexo-theme-next.git themes/next</div><div class="line">$ git commit -am <span class="string">"Use themes/next"</span></div><div class="line">$ git push origin <span class="built_in">source</span></div></pre></td></tr></table></figure>
<p>注意的是，在使用另一终端时，需要先初始化submodule。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git submodule init</div><div class="line">$ git submodule update</div></pre></td></tr></table></figure>
<p>第三方主题更新时，可以直接更新<code>master</code>分支，而后merge到自己的分支上。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote add upstream git@github.com:iissnan/hexo-theme-next.git</div><div class="line">$ git checkout yuthon</div><div class="line">$ git pull upstream master</div></pre></td></tr></table></figure>
<h2 id="使用gulp压缩静态资源"><a href="#使用gulp压缩静态资源" class="headerlink" title="使用gulp压缩静态资源"></a>使用gulp压缩静态资源</h2><p>Hexo引擎在解析md时生成html的代码里会包含大量的无用空白，为了提高加载速度，用gulp压缩public目录的静态资源。</p>
<p>当然你也可以用<a href="https://github.com/unhealthy/hexo-all-minifier" target="_blank" rel="external">hexo-all-minifier</a>来精简。</p>
<ol>
<li><p>安装gulp及其插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp -g</div><div class="line">$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean --save</div></pre></td></tr></table></figure>
</li>
<li><p>编写gulpfile.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</div><div class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.css"</span>,<span class="string">"!public/**/*.min.css"</span>])</div><div class="line">        .pipe(minifycss(&#123;compatibility: <span class="string">'ie8'</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">"public/**/*.html"</span>)</div><div class="line">    .pipe(htmlclean())</div><div class="line">    .pipe(htmlmin(&#123;</div><div class="line">         removeComments: <span class="literal">true</span>,</div><div class="line">         minifyJS: <span class="literal">true</span>,</div><div class="line">         minifyCSS: <span class="literal">true</span>,</div><div class="line">         minifyURLs: <span class="literal">true</span>,</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./public'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.js"</span>,<span class="string">"!public/**/*.min.js"</span>])</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [</div><div class="line">    <span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span></div><div class="line">],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"gulp task ok!"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>之后在使用<code>hexo g</code>生成静态页面后，再执行<code>gulp</code>即可对静态资源进行压缩，压缩完成后再用<code>hexo d</code>部署即可。</p>
<h2 id="给-Next-主题添加文章更新时间"><a href="#给-Next-主题添加文章更新时间" class="headerlink" title="给 Next 主题添加文章更新时间"></a>给 Next 主题添加文章更新时间</h2><p>修改<code>themes/next/layout/_macro/post.swig</code>文件，在<code>&lt;span class=&quot;post-time&quot;&gt;</code>标签后（即对应的<code>&lt;/span&gt;</code>后）添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;%if post.updated and post.updated &gt; post.date%&#125;</div><div class="line">  &lt;span class=&quot;post-updated&quot;&gt;</div><div class="line">	&amp;nbsp; | &amp;nbsp; &#123;&#123; __(&apos;post.updated&apos;) &#125;&#125;</div><div class="line">	&lt;time itemprop=&quot;dateUpdated&quot; datetime=&quot;&#123;&#123; moment(post.updated).format() &#125;&#125;&quot; content=&quot;&#123;&#123; date(post.updated, config.date_format) &#125;&#125;&quot;&gt;</div><div class="line">	  &#123;&#123; date(post.updated, config.date_format) &#125;&#125;</div><div class="line">	&lt;/time&gt;</div><div class="line">  &lt;/span&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure>
<p>而后修改语言配置文件<code>themes/next/languages/en.yml</code>（根据语言环境，文件有所不同）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">post:</div><div class="line">  updated: Updated on</div></pre></td></tr></table></figure>
<p>修改主题配置文件<code>themes/next/_config.yml</code>，增加一行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">display_updated: true</div></pre></td></tr></table></figure>
<p>之后即可直接在文章开头设置更新时间（默认用文章<code>.md</code>文档的修改时间）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">updated: 2016-07-30 22:52:54</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;添加README-md文件&quot;&gt;&lt;a href=&quot;#添加README-md文件&quot; class=&quot;headerlink&quot; title=&quot;添加README.md文件&quot;&gt;&lt;/a&gt;添加&lt;code&gt;README.md&lt;/code&gt;文件&lt;/h2&gt;&lt;p&gt;由于Hexo会将&lt;code&gt;source/&lt;/code&gt;目录下的所有&lt;code&gt;.md&lt;/code&gt;文件渲染成&lt;code&gt;.html&lt;/code&gt;文件，因此需要将&lt;code&gt;README.md&lt;/code&gt;排除在外。幸好，Hexo在3.0以上的版本中提供了&lt;code&gt;skip_render&lt;/code&gt;参数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;source/&lt;/code&gt;里创建&lt;code&gt;README.md&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;_config.yml&lt;/code&gt;中修改&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;skip_render:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  - README.md&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;skip_render: Paths not to be rendered. You can use &lt;a href=&quot;https://github.com/isaacs/minimatch&quot;&gt;glob expressions&lt;/a&gt; for path matching&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.yuthon.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Code School - ES2015</title>
    <link href="http://www.yuthon.com/2016/04/10/CodeSchool-ES2015/"/>
    <id>http://www.yuthon.com/2016/04/10/CodeSchool-ES2015/</id>
    <published>2016-04-10T04:09:29.000Z</published>
    <updated>2016-07-26T03:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Declaration"><a href="#Declaration" class="headerlink" title="Declaration"></a>Declaration</h1><h2 id="Using-let"><a href="#Using-let" class="headerlink" title="Using let"></a>Using let</h2><p><strong>Understanding Hoisting</strong></p>
<p>Prior to executing our code, JavaScript moves var declarations all the way up to the top of the scope. This is known as hoisting.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(userNames.length &gt; <span class="number">3</span>)&#123;</div><div class="line">    <span class="keyword">var</span> loadingMessage = <span class="string">"This might take a while..."</span>; </div><div class="line">    _displaySpinner(loadingMessage);</div><div class="line">    <span class="built_in">console</span>.log(flashMessage); <span class="comment">// undefined</span></div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">var</span> flashMessage = <span class="string">"Loading Profiles"</span>;</div><div class="line">    _displayFlash(flashMessage);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(flashMessage); <span class="comment">// undefined</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// The function above will be hoisted by JavaScript as follows</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="comment">// Automatically moved here by the JavaScript runtime</span></div><div class="line">  <span class="keyword">var</span> loadingMessage, flashMessage;</div><div class="line">  <span class="keyword">if</span>(userNames.length &gt; <span class="number">3</span>)&#123;</div><div class="line">    loadingMessage = <span class="string">"This might take a while..."</span>; </div><div class="line">    _displaySpinner(loadingMessage);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    flashMessage = <span class="string">"Loading Profiles"</span>;</div><div class="line">    _displayFlash(flashMessage);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>Declaring Variables With let</strong></p>
<p><code>let</code> variables are scoped to the nearest block and are NOT hoisted.</p>
<blockquote>
<p>A block is any code section within curly braces, like <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, etc.</p>
</blockquote>
<p>Using <code>let</code>, variables are “trapped “inside their respective if and else blocks.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(userNames.length &gt; <span class="number">3</span>)&#123;</div><div class="line">    <span class="keyword">let</span> loadingMessage = <span class="string">"This might take a while..."</span>; </div><div class="line">    _displaySpinner(loadingMessage);</div><div class="line">    <span class="built_in">console</span>.log(flashMessage); <span class="comment">// ReferenceError: flashMessage is not defined</span></div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">let</span> flashMessage = <span class="string">"Loading Profiles"</span>;</div><div class="line">    _displayFlash(flashMessage);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(flashMessage); <span class="comment">// ReferenceError: flashMessage is not defined </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Using-let-in-for-loops"><a href="#Using-let-in-for-loops" class="headerlink" title="Using let in for loops"></a>Using let in for loops</h2><p><strong>Loop Values in Callbacks</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> userNames)&#123;</div><div class="line">    _fetchProfile(<span class="string">"/users/"</span> + userNames[i], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Fetched for "</span>, userNmaes[i]);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadProfiles([<span class="string">"Sam"</span>, <span class="string">"Tyler"</span>, <span class="string">"Brook"</span>, <span class="string">"Alex"</span>]);</div><div class="line"><span class="comment">// Outputs:</span></div><div class="line"><span class="comment">// Fetched for Alex</span></div><div class="line"><span class="comment">// Fetched for Alex</span></div><div class="line"><span class="comment">// Fetched for Alex</span></div><div class="line"><span class="comment">// Fetched for Alex</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>Reason</strong></p>
<ol>
<li><p>variable <code>i</code> is hoisted to the top of the function and shared across each iteration of the loop.</p>
</li>
<li><p><code>fetchProfile</code> is called 4 times, before any of the callbacks are invoked.</p>
</li>
<li><p><code>i</code> is incremented on each iteration, finally it gets to <code>3</code>.</p>
</li>
<li><p>When callbacks begin to run, <code>i</code> holds the last value assigned to it from the for loop.</p>
</li>
<li><p>So callbacks prints <code>userNames[3]</code> all 4 times.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// By hoisting, The function above will be changed by JavaScript as follows</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> i;</div><div class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> userNames)&#123;</div><div class="line">    _fetchProfile(<span class="string">"/users/"</span> + userNames[i], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Fetched for "</span>, userNmaes[i]);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>Soluition</strong>: Using <code>let</code> in for Loops</p>
<ul>
<li>With <code>let</code>, there’s no sharing in for loops. A new variable is created on each iteration.</li>
<li><p>Each callback function now holds a reference to their own version of <code>i</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> userNames)&#123;</div><div class="line">    _fetchProfile(<span class="string">"/users/"</span> + userNames[i], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Fetched for "</span>, userNmaes[i]);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">loadProfiles([<span class="string">"Sam"</span>, <span class="string">"Tyler"</span>, <span class="string">"Brook"</span>, <span class="string">"Alex"</span>]);</div><div class="line"><span class="comment">// Outputs:</span></div><div class="line"><span class="comment">// Fetched for Sam</span></div><div class="line"><span class="comment">// Fetched for Tyler</span></div><div class="line"><span class="comment">// Fetched for Brook</span></div><div class="line"><span class="comment">// Fetched for Alex</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><strong><code>let</code> Cannot Be Redeclared</strong></p>
<p>Variables declared with <code>let</code> can be reassigned, but cannot be redeclared within the same scope.</p>
<h2 id="Using-const"><a href="#Using-const" class="headerlink" title="Using const"></a>Using const</h2><p><strong>Issues With Magic Numbers</strong></p>
<blockquote>
<p>Magic Numbers: A magic number is a literal value without a clear meaning.</p>
</blockquote>
<p>When used multiple times, magic numbers introduce unnecessary duplication, which can lead to bad code!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(userNames.length &gt; <span class="number">3</span>)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// Hard to tell whether both numbers serve the same purpose</span></div><div class="line">  <span class="keyword">if</span>(someValue &gt; <span class="number">3</span>)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Replacing Magic Numbers With Constants</strong></p>
<ul>
<li>The const keyword creates read-only named constants.</li>
<li>Once assigned, constants cannot be assigned a new value.</li>
<li>Variables declared with const must be assigned an initial value.</li>
<li>Variables declared with const are scoped to the nearest block.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">const</span> MAX_USERS = <span class="number">3</span>;</div><div class="line">  <span class="keyword">if</span>(userNames.length &gt; MAX_USERS)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">const</span> MAX_REPLIES = <span class="number">3</span>;</div><div class="line">  <span class="keyword">if</span>(someElement &gt; MAX_REPLIES)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>let vs. const</strong></p>
<p>In most cases, let and const will behave very similarly. Consider the semantics when choosing<br>one over the other.</p>
<ul>
<li>Use let when variables could be reassigned new values</li>
<li>Use const when new variables are not expected to be reassigned new values</li>
</ul>
<h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><h2 id="Function-Defaults"><a href="#Function-Defaults" class="headerlink" title="Function Defaults"></a>Function Defaults</h2><p><strong>Issues With Flexible Function Arguments</strong></p>
<p>Unexpected arguments might cause errors during function execution.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> namesLength = userNames.length;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">loadProfiles([<span class="string">"Sam"</span>, <span class="string">"Tyler"</span>, <span class="string">"Brook"</span>]); <span class="comment">// OK</span></div><div class="line"><span class="comment">// Breaks when called with no arguments</span></div><div class="line">loadProfiles(); <span class="comment">// TypeError: Cannot read property 'length' of undefined</span></div><div class="line">loadProfiles(<span class="literal">undefined</span>); <span class="comment">// TypeError: Cannot read property 'length' of undefined</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>Manual Argument Checks Don’t Scale Well</strong></p>
<p>A common practice is to check for presence of arguments as the very first thing in the function.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> names = <span class="keyword">typeof</span> userNames !== <span class="string">'undefined'</span> ? userNames : [];</div><div class="line">  <span class="keyword">let</span> namesLength = names.length;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Using Default Parameter Values</strong></p>
<p>Default parameter values help move default values from the function body to the function signature.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Uses empty array as default valuewhen no argument is passed</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames = []</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> namesLength = userNames.length;</div><div class="line">  <span class="built_in">console</span>.log(namesLength);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Does not break when invoked with no arguments</span></div><div class="line">loadProfiles(); <span class="comment">// 0</span></div><div class="line"><span class="comment">// Nor with explicit undefined as argument</span></div><div class="line">loadProfiles( ); <span class="comment">// 0</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>The Options Object</strong></p>
<p>The options object is a widely used pattern that allows user-defined settings to be passed to a function in the form of properties on an object.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">setPageThread(<span class="string">"New Version out Soon!"</span>, &#123;</div><div class="line">  popular: <span class="literal">true</span>,</div><div class="line">  expires: <span class="number">10000</span>,</div><div class="line">  activeClass: <span class="string">"is-page-thread"</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setPageThread</span>(<span class="params">name, options = &#123;&#125;</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> popular = options.popular;</div><div class="line">  <span class="keyword">let</span> expires = options.expires;</div><div class="line">  <span class="keyword">let</span> activeClass = options.activeClass;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>Issues With the Options Object</strong></p>
<p>The options object makes it hard to know what options a function accepts.</p>
</li>
</ul>
<ul>
<li><p><strong>Using Named Parameters</strong></p>
<p>Using named parameters for optional settings makes it easier to understand how a function should be invoked.</p>
</li>
<li><p><strong>Omitting Certain Arguments on Call</strong></p>
<ul>
<li>It’s okay to omit some options when invoking a function with named parameters.</li>
<li>It’s NOT okay to omit the options argument altogether when invoking a function with named parameters when no default value is set for them.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setPageThread</span>(<span class="params">name, &#123; popular, expires, activeClass &#125; = &#123;&#125;</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Name: "</span>, name);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Popular: "</span>, popular);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Expires: "</span>, expires);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Active: "</span> , activeClass);</div><div class="line">&#125;</div><div class="line"></div><div class="line">setPageThread(<span class="string">"New Version out Soon!"</span>);</div><div class="line"><span class="comment">// Outputs:</span></div><div class="line"><span class="comment">// Name: New Version out Soon!</span></div><div class="line"><span class="comment">// Popular: undefined</span></div><div class="line"><span class="comment">// Expires: undefined</span></div><div class="line"><span class="comment">// Active: undefined</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Rest-Params-Spread-Op-Arrow-Func"><a href="#Rest-Params-Spread-Op-Arrow-Func" class="headerlink" title="Rest Params, Spread Op, Arrow Func"></a>Rest Params, Spread Op, Arrow Func</h2><h3 id="Rest-Parameters"><a href="#Rest-Parameters" class="headerlink" title="Rest Parameters"></a>Rest Parameters</h3><p><strong>Issues With the arguments Object</strong></p>
<p>The <code>arguments</code> object is a built-in, Array-like object that corresponds to the arguments of a function. Here’s why relying on this object to read arguments is not ideal:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Hard to tell which parameters this function expects to be called with</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayTags</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// Where did this come from?!</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">arguments</span>)&#123;</div><div class="line">    <span class="keyword">let</span> tag = <span class="built_in">arguments</span>[i];</div><div class="line">    _addToTopic(tag);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// If we add an argument</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayTags</span>(<span class="params">targetElement</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> target = _findElement(targetElement);</div><div class="line">  <span class="comment">// We'll break the loop, since the first argument is no longer a tag</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">arguments</span>)&#123; </div><div class="line">    <span class="keyword">let</span> tag = <span class="built_in">arguments</span>[i];</div><div class="line">    _addToTopic(target, tag);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Using Rest Parameters</strong></p>
<p>The new rest parameter syntax allows us to represent an indefinite number of arguments as an Array. This way, changes to function signature are less likely to break code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayTags</span>(<span class="params">...tags</span>)</span>&#123;</div><div class="line">  <span class="comment">// tags is an Array object</span></div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> tags)&#123;</div><div class="line">    <span class="keyword">let</span> tag = [i];</div><div class="line">    _addToTopic(tag);</div><div class="line">  &#125;</div><div class="line">&#125;.</div><div class="line"></div><div class="line"><span class="comment">// ...tags must always go last</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayTags</span>(<span class="params">targetElement, ...tags</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> target = _findElement(targetElement);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> tags)&#123;</div><div class="line">    <span class="keyword">let</span> tag = [i];</div><div class="line">    _addToTopic(target, tag);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Spread-Operator"><a href="#Spread-Operator" class="headerlink" title="Spread Operator"></a>Spread Operator</h3><p><strong>Splitting Arrays Into Individual Arguments</strong></p>
<p>We need a way to convert an Array into individual arguments upon a function call.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">getRequest(<span class="string">"/topics/17/tags"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> </span>)</span>&#123;</div><div class="line">  <span class="comment">// tags is an Array, e.g., ["programming", "web", "HTML"] ...</span></div><div class="line">  <span class="keyword">let</span> tags = data.tags;</div><div class="line">  <span class="comment">// but displayTags expects to be called with individual arguments</span></div><div class="line">  displayTags(tags);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>Using the Spread Operator</strong></p>
<p>The spread operator allows us to split an Array argument into individual elements.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">getRequest(<span class="string">"/topics/17/tags"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> </span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> tags = data.tags;</div><div class="line">  <span class="comment">// The displayTags function is now receiving individual arguments, </span></div><div class="line">  <span class="comment">// not an Array</span></div><div class="line">  displayTags(...tags);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>Rest and Spread look the same</strong></p>
<p>Rest parameters and the spread operator look the same, but the former is used in <strong>function definition</strong>s and the latter in <strong>function invocations</strong>.</p>
<h3 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h3><p><strong>Issues With Scope in Callback Functions</strong></p>
<p>Anonymous functions passed as callbacks to other functions create their own scope.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TagComponent</span>(<span class="params">target, urlPath</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.targetElement = target;</div><div class="line">  <span class="keyword">this</span>.urlPath = urlPath;</div><div class="line">&#125;.</div><div class="line"></div><div class="line"><span class="comment">// The scope of the TagComponent object is not the same as </span></div><div class="line"><span class="comment">// the scope of the anonymous function</span></div><div class="line">TagComponent.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  getRequest(<span class="keyword">this</span>.urlPath, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> tags = data.tags;</div><div class="line">    displayTags(<span class="keyword">this</span>.targetElement, ...tags); <span class="comment">// Returns undefined</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> tagComponent = <span class="keyword">new</span> TagComponent(targetDiv, <span class="string">"/topics/17/tags"</span>);</div><div class="line">tagComponent.render();</div></pre></td></tr></table></figure>
<p><strong>Using Arrow Functions to Preserve Scope</strong></p>
<p>Arrow functions bind to the scope of where they are defined, not where they are called. (also known as lexical binding)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TagComponent</span>(<span class="params">target, urlPath</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.targetElement = target;</div><div class="line">  <span class="keyword">this</span>.urlPath = urlPath;</div><div class="line">&#125;.</div><div class="line"></div><div class="line">TagComponent.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// Arrow functions bind to the lexical scope</span></div><div class="line">  getRequest(<span class="keyword">this</span>.urlPath, (data) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> tags = data.tags;</div><div class="line">    <span class="comment">// this now properly refers to the TagComponent object</span></div><div class="line">    displayTags(<span class="keyword">this</span>.targetElement, ...tags);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> tagComponent = <span class="keyword">new</span> TagComponent(targetDiv, <span class="string">"/topics/17/tags"</span>);</div><div class="line">tagComponent.render();</div></pre></td></tr></table></figure>
<h1 id="Objects-Strings-and-Object-assign"><a href="#Objects-Strings-and-Object-assign" class="headerlink" title="Objects, Strings, and Object.assign"></a>Objects, Strings, and Object.assign</h1><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><p><strong>The Object Initializer Shorthand</strong></p>
<p>We can remove duplicate variable names from object properties when those properties have the same name as the variables being assigned to them.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUser</span>(<span class="params">first, last</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> fullName = first + <span class="string">" "</span> + last;</div><div class="line">  <span class="keyword">return</span> &#123; first, last, fullName &#125;;</div><div class="line">  <span class="comment">// EQUAL TO</span></div><div class="line">  <span class="comment">// return &#123; first: first, last: last, fullName: fullName&#125;;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Object Destructuring</strong></p>
<p>We can use shorthand to assign properties from objects to local variables with the same name.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123; first, last, fullName &#125; = buildUser(<span class="string">"Sam"</span>, <span class="string">"Williams"</span>);</div><div class="line"><span class="comment">// EQUAL TO</span></div><div class="line"><span class="comment">// let user = buildUser("Sam", "Williams");</span></div><div class="line"><span class="comment">// let first = user.first;</span></div><div class="line"><span class="comment">// let last = user.last;</span></div><div class="line"><span class="comment">// let fullName = user.fullName;</span></div><div class="line"></div><div class="line"><span class="comment">// Destructuring Selected Elements</span></div><div class="line"><span class="keyword">let</span> &#123; fullName &#125; = buildUser(<span class="string">"Sam"</span>, <span class="string">"Williams"</span>);</div></pre></td></tr></table></figure>
<p><strong>Using the Method Initializer Shorthand</strong></p>
<p>A new shorthand notation is available for adding a method to an object where the keyword function is no longer necessary.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUser</span>(<span class="params">first, last, postCount</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> fullName = first + <span class="string">" "</span> + last;</div><div class="line">  <span class="keyword">const</span> ACTIVE_POST_COUNT = <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    first,</div><div class="line">    last,</div><div class="line">    fullName, </div><div class="line">    isActive()&#123; <span class="comment">// EQUAL TO isActive: function()&#123;&#125;</span></div><div class="line">      <span class="keyword">return</span> postCount &gt;= ACTIVE_POST_COUNT;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><p><strong>Template Strings</strong></p>
<p>Template strings are string literals allowing embedded expressions. This allows for a much better way to do string interpolation.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUser</span>(<span class="params">first, last, postCount</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> fullName = <span class="string">`<span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>`</span>;</div><div class="line">  <span class="comment">// EQUAL TO</span></div><div class="line">  <span class="comment">// let fullName = first + " " + last;</span></div><div class="line">  <span class="keyword">const</span> ACTIVE_POST_COUNT = <span class="number">10</span>;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Writing Multi-line Strings</strong></p>
<p>Template strings offer a new - and much better - way to write multi-line strings.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> userName = <span class="string">"Sam"</span>;</div><div class="line"><span class="keyword">let</span> admin = &#123; fullName: <span class="string">"Alex Williams"</span> &#125;;</div><div class="line"><span class="keyword">let</span> veryLongText = <span class="string">`Hi <span class="subst">$&#123;userName&#125;</span>,</span></div><div class="line">  this is a very</div><div class="line">  very</div><div class="line">  veeeery</div><div class="line">  long text.</div><div class="line">  Regards,</div><div class="line">    <span class="subst">$&#123;admin.fullName&#125;</span></div><div class="line">`;</div></pre></td></tr></table></figure>
<blockquote>
<p>Template Strings use <strong>back-ticks (``)</strong> rather than the single or double quotes we’re used to with regular strings.</p>
</blockquote>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><p><strong>Using Too Many Arguments Is Bad</strong></p>
<p>For functions that need to be used across different applications, it’s okay to accept an options object instead of using named parameters</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Too many named arguments make this function harder to read</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdownTimer</span>(<span class="params">target, timeLeft,</span></span></div><div class="line">                         &#123; container, timeUnit, clonedDataAttribute,</div><div class="line">                         timeoutClass, timeoutSoonClass, timeoutSoonSeconds </div><div class="line">                         &#125; = &#123;&#125;)&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Easier to customize to different applications</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdownTimer</span>(<span class="params">target, timeLeft, options = &#123;&#125;</span>)</span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Using Local Values and || Is Bad for Defaults</strong></p>
<p>Some options might not be specified by the caller, so we need to have default values.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdownTimer</span>(<span class="params">target, timeLeft, options = &#123;&#125;</span>)</span>&#123;</div><div class="line">  <span class="comment">// Default strings and numbers are all over the place... Yikes!</span></div><div class="line">  <span class="keyword">let</span> container = options.container || <span class="string">".timer-display"</span>;</div><div class="line">  <span class="keyword">let</span> timeUnit = options.timeUnit || <span class="string">"seconds"</span>;</div><div class="line">  <span class="keyword">let</span> clonedDataAttribute = options.clonedDataAttribute || <span class="string">"cloned"</span>;</div><div class="line">  <span class="keyword">let</span> timeoutClass = options.timeoutClass || <span class="string">".is-timeout"</span>;</div><div class="line">  <span class="keyword">let</span> timeoutSoonClass = options.timeoutSoonClass || <span class="string">".is-timeout-soon"</span>;</div><div class="line">  <span class="keyword">let</span> timeoutSoonTime = options.timeoutSoonSeconds || <span class="number">10</span>;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Using a Local Object to Group Defaults</strong></p>
<p>Using a local object to group default values for user options is a common practice and can help write more idiomatic JavaScript.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdownTimer</span>(<span class="params">target, timeLeft, options = &#123;&#125;</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> defaults = &#123;</div><div class="line">    container: <span class="string">".timer-display"</span>,</div><div class="line">    timeUnit: <span class="string">"seconds"</span>,</div><div class="line">    clonedDataAttribute: <span class="string">"cloned"</span>,</div><div class="line">    timeoutClass: <span class="string">".is-timeout"</span>,</div><div class="line">    timeoutSoonClass: <span class="string">".is-timeout-soon"</span>,</div><div class="line">    timeoutSoonTime: <span class="number">10</span></div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Merging Values With Object.assign</strong></p>
<p>The <code>Object.assign</code> method copies properties from one or more source objects to a target object specified as the very first argument.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdownTimer</span>(<span class="params">target, timeLeft, options = &#123;&#125;</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> defaults = &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// Merged properties from defaults and options</span></div><div class="line">  <span class="comment">// Target object is modified and used as return value</span></div><div class="line">  <span class="comment">// Source objects remain unchanged</span></div><div class="line">  <span class="keyword">let</span> settings = <span class="built_in">Object</span>.assign(&#123;&#125;, defaults, options);</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Merging Objects With Duplicate Properties</strong></p>
<p>In case of duplicate properties on source objects, the value from the last object on the chain always prevails.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdownTimer</span>(<span class="params">target, timeLeft, options = &#123;&#125;</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> defaults = &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="comment">// Duplicate properties from options3 override those on options2, </span></div><div class="line">  <span class="comment">// which override those on options, etc.</span></div><div class="line">  <span class="keyword">let</span> settings = <span class="built_in">Object</span>.assign(&#123;&#125;, defaults, options, options2, options3);</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Using Object.assign</strong></p>
<p>There are a couple incorrect ways we might see Object.assign being used.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// NOT recommanded</span></div><div class="line"><span class="comment">// defaults is mutated, so we can't go back and access original default</span></div><div class="line"><span class="comment">// values after the merge</span></div><div class="line"><span class="built_in">Object</span>.assign(defaults, options);</div><div class="line"></div><div class="line"><span class="comment">// Recommanded</span></div><div class="line"><span class="comment">// Can access original default values and looks functional</span></div><div class="line"><span class="keyword">let</span> settings = <span class="built_in">Object</span>.assign(&#123;&#125;, defaults, options);</div><div class="line"></div><div class="line"><span class="comment">// NOT recommanded</span></div><div class="line"><span class="comment">// Default values are not changed, but settings is passed as a reference</span></div><div class="line"><span class="keyword">let</span> settings = &#123;&#125;;</div><div class="line"><span class="comment">// Not reading return value</span></div><div class="line"><span class="built_in">Object</span>.assign(settings, defaults, options);</div></pre></td></tr></table></figure>
<p><strong>Reading Initial Default Values</strong></p>
<p>Preserving the original default values gives us the ability to compare them with the options passed and act accordingly when necessary.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countdownTimer</span>(<span class="params">target, timeLeft, options = &#123;&#125;</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> defaults = &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> settings = <span class="built_in">Object</span>.assign(&#123;&#125;, defaults, options);</div><div class="line">  </div><div class="line">  <span class="comment">// Runs when value passed as argument for timeUnit is different than the original value</span></div><div class="line">  <span class="keyword">if</span>(settings.timeUnit !== defaults.timeUnit)&#123;</div><div class="line">    _conversionFunction(timeLeft, settings.timeUnit)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Arrays-Maps-and-Sets"><a href="#Arrays-Maps-and-Sets" class="headerlink" title="Arrays, Maps, and Sets"></a>Arrays, Maps, and Sets</h1><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><h3 id="Array-Destructuring"><a href="#Array-Destructuring" class="headerlink" title="Array Destructuring"></a>Array Destructuring</h3><p><strong>Reading Values With Array Destructuring</strong></p>
<p>We can use destructuring to assign multiple values from an array to local variables.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> users = [<span class="string">"Sam"</span>, <span class="string">"Tyler"</span>, <span class="string">"Brook"</span>];</div><div class="line"><span class="keyword">let</span> a b c [ ] , , = users;</div><div class="line"><span class="built_in">console</span>.log( a, b, c ); <span class="comment">// Sam Tyler Brook</span></div></pre></td></tr></table></figure>
<p>Values can be discarded</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [a, , b] = users;</div><div class="line"><span class="built_in">console</span>.log( a, b ); <span class="comment">// Sam Brook</span></div></pre></td></tr></table></figure>
<p><strong>Combining Destructuring With Rest Params</strong></p>
<p>We can combine destructuring with rest parameters to group values into other arrays.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> users = [<span class="string">"Sam"</span>, <span class="string">"Tyler"</span>, <span class="string">"Brook"</span>];</div><div class="line"><span class="keyword">let</span> [ first, ...rest ] = users;</div><div class="line"><span class="built_in">console</span>.log( first, rest ); <span class="comment">// Sam ["Tyler", "Brook"]</span></div></pre></td></tr></table></figure>
<p><strong>Destructuring Arrays From Return Values</strong></p>
<p>When returning arrays from functions, we can assign to multiple variables at once.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">activeUsers</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> users = [<span class="string">"Sam"</span>, <span class="string">"Alex"</span>, <span class="string">"Brook"</span>];</div><div class="line">  <span class="keyword">return</span> users;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> active = activeUsers();</div><div class="line"><span class="built_in">console</span>.log( active ); <span class="comment">// ["Sam", "Alex", "Brook"] </span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [a, b, c] = activeUsers();</div><div class="line"><span class="built_in">console</span>.log( a, b, c ); <span class="comment">// Sam Alex Brook</span></div></pre></td></tr></table></figure>
<h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><p><strong>Using for…of to Loop Over Arrays</strong></p>
<p>The for…of statement iterates over property values, and it’s a better way to loop over arrays and other iterable objects.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> names = [<span class="string">"Sam"</span>, <span class="string">"Tyler"</span>, <span class="string">"Brook"</span>];</div><div class="line"></div><div class="line"><span class="comment">// Uses index to read actual element</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> names)&#123;</div><div class="line">  <span class="built_in">console</span>.log( names[index] ); <span class="comment">// Sam Tyler Brook </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Reads element directly and with less code involved</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> names)&#123;</div><div class="line">  <span class="built_in">console</span>.log( name ); <span class="comment">// Sam Tyler Brook </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Limitations of  for…of and Objects</strong></p>
<p>The for…of statement cannot be used to iterate over properties in plain JavaScript objects out-of-the-box.</p>
<p>In order to work with for…of, objects need a special function assigned to the Symbol.iterator<br>property. The presence of this property allows us to know whether an object is iterable.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Objects That Work With for...of</span></div><div class="line"><span class="keyword">let</span> names = [<span class="string">"Sam"</span>, <span class="string">"Tyler"</span>, <span class="string">"Brook"</span>];</div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> names[<span class="built_in">Symbol</span>.iterator] ); <span class="comment">// function</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> names)&#123;</div><div class="line">  <span class="built_in">console</span>.log( name ); <span class="comment">// Sam Tyler Brook </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Objects That Don't Work With for...of</span></div><div class="line"><span class="keyword">let</span> post = &#123;</div><div class="line">  title: <span class="string">"New Features in JS"</span>,</div><div class="line">  replies: <span class="number">19</span>,</div><div class="line">  lastReplyFrom: <span class="string">"Sam"</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">typeof</span> post[<span class="built_in">Symbol</span>.iterator] ); <span class="comment">// undefined</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> property <span class="keyword">of</span> post)&#123;</div><div class="line">  <span class="built_in">console</span>.log( property );</div><div class="line">  <span class="comment">// TypeError: post[Symbol.iterator] is not a function</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Array-find"><a href="#Array-find" class="headerlink" title="Array.find"></a>Array.find</h3><p><strong>Finding an Element in an Array</strong></p>
<p>Array.find returns the first element in the array that satisfies a provided testing function.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> users = [</div><div class="line">  &#123; login: <span class="string">"Sam"</span>,   admin: <span class="literal">false</span> &#125;,</div><div class="line">  &#123; login: <span class="string">"Brook"</span>, admin: <span class="literal">true</span>  &#125;,</div><div class="line">  &#123; login: <span class="string">"Tyler"</span>, admin: <span class="literal">true</span>  &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// Returns first object for which user.admin is true</span></div><div class="line"><span class="keyword">let</span> admin = users.find( (user) =&gt; &#123;</div><div class="line">  <span class="keyword">return</span> user.admin;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log( admin ); <span class="comment">// &#123; "login" : "Brook", "admin" : true &#125;</span></div><div class="line"></div><div class="line"><span class="comment">// One-liner arrow function</span></div><div class="line"><span class="keyword">let</span> admin = users.find( user =&gt; user.admin );</div><div class="line"><span class="built_in">console</span>.log( admin ); <span class="comment">// &#123; "login" : "Brook", "admin" : true &#125;</span></div></pre></td></tr></table></figure>
<h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><h3 id="Maps-and-Objects"><a href="#Maps-and-Objects" class="headerlink" title="Maps and Objects"></a>Maps and Objects</h3><p><strong>The Map Data Structure</strong></p>
<p><img src="/images/the_map_data_strcture.png" alt="the_map_data_strcture"></p>
<p><strong>Issues With Using Objects as Maps</strong></p>
<p>When using Objects as maps, its keys are always converted to strings.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Two different objects</span></div><div class="line"><span class="keyword">let</span> user1 = &#123; name: <span class="string">"Sam"</span> &#125;;</div><div class="line"><span class="keyword">let</span> user2 = &#123; name: <span class="string">"Tyler"</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// Both objects are converted to the string "[object Object]"</span></div><div class="line"><span class="keyword">let</span> totalReplies = &#123;&#125;;</div><div class="line">totalReplies[user1] = <span class="number">5</span>;</div><div class="line">totalReplies[user2] = <span class="number">42</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( totalReplies[user1] ); <span class="comment">// 42</span></div><div class="line"><span class="built_in">console</span>.log( totalReplies[user2] ); <span class="comment">// 42</span></div><div class="line"><span class="built_in">console</span>.log( <span class="built_in">Object</span>.keys(totalReplies) ); <span class="comment">//  ["[object Object]"]</span></div></pre></td></tr></table></figure>
<p><strong>Storing Key/Values With Map</strong></p>
<p>The Map object is a simple key/value data structure. Any value may be used as either a key or a value, and objects are not converted to strings.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user1 = &#123; name: <span class="string">"Sam"</span> &#125;;</div><div class="line"><span class="keyword">let</span> user2 = &#123; name: <span class="string">"Tyler"</span> &#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> totalReplies = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">totalReplies.set( user1, <span class="number">5</span> );</div><div class="line">totalReplies.set( user2, <span class="number">42</span> );</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( totalReplies.get(user1) ); <span class="comment">// 5</span></div><div class="line"><span class="built_in">console</span>.log( totalReplies.get(user2) ); <span class="comment">// 42</span></div></pre></td></tr></table></figure>
<blockquote>
<p>We use the <code>get()</code> and <code>set()</code> methods to access values in Maps</p>
</blockquote>
<p><strong>Use Maps When Keys Are Unknown Until Runtime</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> recentPosts = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">createPost(newPost, (data) =&gt; &#123;</div><div class="line">  <span class="comment">// Keys unknown until runtime, so... Map!</span></div><div class="line">  recentPosts.set( data.author, data.message );</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> POSTS_PER_PAGE = <span class="number">15</span>;</div><div class="line"><span class="keyword">let</span> userSettings = &#123;</div><div class="line">  <span class="comment">// Keys are previously defined, so... Object!</span></div><div class="line">  perPage: POSTS_PER_PAGE,</div><div class="line">  showRead: <span class="literal">true</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>Use Maps When Types Are the Same</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> recentPosts = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">createPost(newPost, (data) =&gt; &#123;</div><div class="line">  recentPosts.set( data.author, data.message );</div><div class="line">&#125;);</div><div class="line"><span class="comment">// ...somewhere else in the code</span></div><div class="line">socket.on(<span class="string">'new post'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">  <span class="comment">// All keys are the same type, </span></div><div class="line">  <span class="comment">// and all values are the same type, so Map!</span></div><div class="line">  recentPosts.set( data.author, data.message );</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> POSTS_PER_PAGE = <span class="number">15</span>;</div><div class="line"><span class="keyword">let</span> userSettings = &#123;</div><div class="line">  <span class="comment">// Some values are numeric, others are boolean, so Object!</span></div><div class="line">  perPage: POSTS_PER_PAGE,</div><div class="line">  showRead: <span class="literal">true</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>Iterating Maps With for…of</strong></p>
<p><code>Maps</code> are iterable, so they can be used in a <code>for...of</code> loop. Each run of the loop returns a [key, value] pair for an entry in the Map.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mapSettings = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"></div><div class="line">mapSettings.set( <span class="string">"user"</span>, <span class="string">"Sam"</span> );</div><div class="line">mapSettings.set( <span class="string">"topic"</span>, <span class="string">"ES2015"</span> );</div><div class="line">mapSettings.set( <span class="string">"replies"</span>, [<span class="string">"Can't wait!"</span>, <span class="string">"So Cool"</span>] );</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key, value] <span class="keyword">of</span> mapSettings)&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> = <span class="subst">$&#123;value&#125;</span>`</span>);</div><div class="line">  <span class="comment">// user = Sam</span></div><div class="line">  <span class="comment">// topic = ES2015</span></div><div class="line">  <span class="comment">// replies = Can't wait!,So Cool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>The WeakMap is a type of Map where only objects can be passed as keys. Primitive data types - such as strings, numbers, booleans, etc. - are not allowed.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user = &#123;&#125;;</div><div class="line"><span class="keyword">let</span> comment = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> mapSettings = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line">mapSettings.set( user, <span class="string">"user"</span> );</div><div class="line">mapSettings.set( comment, <span class="string">"comment"</span> );</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( mapSettings.get(user) ); <span class="comment">//  user</span></div><div class="line"><span class="built_in">console</span>.log( mapSettings.get(comment) ); <span class="comment">// comment</span></div><div class="line"></div><div class="line">mapSettings.set(<span class="string">"title"</span>, <span class="string">"ES2015"</span>); <span class="comment">// Invalid value used as weak map key</span></div></pre></td></tr></table></figure>
<ul>
<li><p><strong>All available methods on a WeakMap require access to an object used as a key.</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> mapSettings = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line">mapSettings.set( user, );</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( mapSettings.get(user) ); <span class="comment">// ES2015</span></div><div class="line"><span class="built_in">console</span>.log( mapSettings.has(user) ); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log( mapSettings.delete(user) ); <span class="comment">// true</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>WeakMaps are not iterable, therefore they can’t be used with for…of</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> mapSettings)&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> = <span class="subst">$&#123;value&#125;</span>`</span>);</div><div class="line">  <span class="comment">// mapSettings[Symbol.iterator] is not a function</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>WeakMaps Are Better With Memory</strong></p>
<p>Individual entries in a WeakMap can be garbage collected while the WeakMap itself still exists.</p>
</li>
</ul>
<h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h2><h3 id="Sets-and-Arrays"><a href="#Sets-and-Arrays" class="headerlink" title="Sets and Arrays"></a>Sets and Arrays</h3><p><strong>Limitations With Arrays</strong></p>
<p>Arrays don’t enforce uniqueness of items. Duplicate entries are allowed.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> tags = [];</div><div class="line"></div><div class="line">tags.push( <span class="string">"JavaScript"</span> );</div><div class="line">tags.push( <span class="string">"Programming"</span> );</div><div class="line">tags.push( <span class="string">"Web"</span> );</div><div class="line">tags.push( <span class="string">"Web"</span> ); <span class="comment">// Duplicate entry</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( <span class="string">"Total items "</span>, tags.length ); <span class="comment">// Total items 4</span></div></pre></td></tr></table></figure>
<p><strong>Using Set</strong></p>
<p>The <code>Set</code> object stores unique values of any type, whether primitive values or object references.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> tags = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"></div><div class="line">tags.add(<span class="string">"JavaScript"</span>);</div><div class="line"><span class="comment">// Both primitive values and objects are allowed</span></div><div class="line">tags.add(<span class="string">"Programming"</span>);</div><div class="line">tags.add(&#123; version: <span class="string">"2015"</span> &#125;);</div><div class="line">tags.add(<span class="string">"Web"</span>);</div><div class="line">tags.add(<span class="string">"Web"</span>); <span class="comment">// Duplicate entries are ignored</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Total items "</span>, tags.size); <span class="comment">// Total items 4</span></div></pre></td></tr></table></figure>
<p><strong>Using Set as Enumerable Object</strong></p>
<p><code>Set</code> objects are iterable, which means they can be used with <code>for...of</code> and destructuring.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> tags = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"></div><div class="line">tags.add(<span class="string">"JavaScript"</span>);</div><div class="line">tags.add(<span class="string">"Programming"</span>);</div><div class="line">tags.add(&#123; version: <span class="string">"2015"</span> &#125;);</div><div class="line">tags.add(<span class="string">"Web"</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> tag <span class="keyword">of</span> tags)&#123;</div><div class="line">  <span class="built_in">console</span>.log(tag);</div><div class="line">&#125;</div><div class="line"><span class="comment">// OUTPUTS:</span></div><div class="line"><span class="comment">// JavaScript</span></div><div class="line"><span class="comment">// Programming</span></div><div class="line"><span class="comment">// &#123; version: '2015' &#125;</span></div><div class="line"><span class="comment">// Web</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [a,b,c,d] = tags;</div><div class="line"><span class="built_in">console</span>.log(a, b, c, d);</div><div class="line"><span class="comment">// OUTPUTS:</span></div><div class="line"><span class="comment">// JavaScript Programming &#123; version: '2015' &#125; Web</span></div></pre></td></tr></table></figure>
<h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><ul>
<li>The <code>WeakSet</code> is a type of Set where <strong>only objects</strong> are allowed to be stored.</li>
</ul>
<ul>
<li><code>WeakSets</code> don’t prevent the garbage collector from collecting entries that are no longer used in other parts of the system</li>
</ul>
<ul>
<li><code>WeakSets</code> cannot be used with <code>for...of</code> and they offer <strong>no methods for reading values from it</strong>.</li>
</ul>
<p><strong>Using WeakSets to Show Unread Posts</strong></p>
<ul>
<li>We want to add a different background color to posts that have not yet been read.</li>
</ul>
<ul>
<li>We can use WeakSets to create special groups from existing objects without mutating them.</li>
</ul>
<ul>
<li>Favoring immutable objects allows for much simpler code with no unexpected side effects.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> readPosts = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</div><div class="line"></div><div class="line"><span class="comment">//...when post is clicked on</span></div><div class="line">postList.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="comment">// Adds object to a group of read posts</span></div><div class="line">  readPosts.add(post);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ...rendering posts</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> post <span class="keyword">of</span> postArray)&#123;</div><div class="line">  <span class="comment">// The has() method checks whether </span></div><div class="line">  <span class="comment">// an object is present in the WeakSet</span></div><div class="line">  <span class="keyword">if</span>(!readPosts.has(post))&#123;</div><div class="line">    _addNewPostClass(post.element);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Classes-and-Modules"><a href="#Classes-and-Modules" class="headerlink" title="Classes and Modules"></a>Classes and Modules</h1><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p><strong>Using a Function Approach</strong></p>
<p>A common approach to encapsulation in JavaScript is using a constructor function.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SponsorWidget</span>(<span class="params">name, description, url</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.description = description;</div><div class="line">  <span class="keyword">this</span>.url = url;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Too verbose!</span></div><div class="line">SponsorWidget.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// Invoking the SponsorWidget function looks like this:</span></div><div class="line"><span class="keyword">let</span> sponsorWidget = <span class="keyword">new</span> SponsorWidget(name, description, url);</div><div class="line">sponsorWidget.render();</div></pre></td></tr></table></figure>
<p><strong>Using the New Class Syntax</strong></p>
<p>To define a class, we use the class keyword followed by the name of the class. The body of a class is the part between curly braces.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SponsorWidget</span> </span>&#123;</div><div class="line">  <span class="comment">// Runs every time a new instance is created with the new operator</span></div><div class="line">  <span class="keyword">constructor</span>(name, description, url)&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="comment">// Don't forget to use this to access instance properties and methods</span></div><div class="line">    <span class="keyword">this</span>.url = url;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// Can access previously assigned instance variables</span></div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">let</span> link = <span class="keyword">this</span>._buildLink(<span class="keyword">this</span>.url);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Prefixing a method with an underscore is a</span></div><div class="line">  <span class="comment">// convention for indicating that it should not</span></div><div class="line">  <span class="comment">// be invoked from the public API</span></div><div class="line">  _buildLink(url)&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> sponsorWidget = <span class="keyword">new</span> SponsorWidget(name, description, url);</div><div class="line">sponsorWidget.render();</div></pre></td></tr></table></figure>
<p><strong>Class Inheritance</strong></p>
<p>We can use class inheritance to reduce code repetition. Child classes inherit and specialize behavior defined in parent classes.</p>
<p><img src="/images/class_inheritance.png" alt="cass_inheritance"></p>
<p><strong>Using extends to Inherit From Base Class</strong></p>
<p>The <code>extends</code> keyword is used to create a class that inherits methods and properties from another class. The <code>super</code> method runs the constructor function from the parent class.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Parent Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.baseCSS = <span class="string">"site-widget"</span>;</div><div class="line">  &#125;</div><div class="line">  parse(value)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Child Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SponsorWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name, description, url)&#123;</div><div class="line">    <span class="comment">// runs parent's setup code</span></div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">let</span> parsedName = <span class="keyword">this</span>.parse(<span class="keyword">this</span>.name);</div><div class="line">    <span class="keyword">let</span> css = <span class="keyword">this</span>._buildCSS(<span class="keyword">this</span>.baseCSS);</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Overriding Inherited Methods</strong></p>
<p>Child classes can invoke methods from their parent classes via the super object.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Parent Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    <span class="keyword">this</span>.baseCSS = <span class="string">"site-widget"</span>;</div><div class="line">  &#125;</div><div class="line">  parse(value)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Child Class</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SponsorWidget</span> <span class="keyword">extends</span> <span class="title">Widget</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name, description, url)&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">  parse()&#123;</div><div class="line">    <span class="comment">// Calls the parent version of the parse() method</span></div><div class="line">    <span class="keyword">let</span> parsedName = <span class="keyword">super</span>.parse(<span class="keyword">this</span>.name);</div><div class="line">    <span class="keyword">return</span> <span class="string">`Sponsor: <span class="subst">$&#123;parsedName&#125;</span>`</span>;</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><h3 id="Function-Modules"><a href="#Function-Modules" class="headerlink" title="Function Modules"></a>Function Modules</h3><p><strong>Polluting the Global Namespace</strong></p>
<p>The common solution for modularizing code relies on using global variables. This increases the chances of unexpected side effects and potential naming conflicts.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Libraries add to the global namespace --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./underscore.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./flash-message.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Global variables can cause naming conflicts</span></div><div class="line"><span class="keyword">let</span> element = $(<span class="string">"..."</span>).find(...);</div><div class="line"><span class="keyword">let</span> filtered = _.each(...);</div><div class="line">flashMessage(<span class="string">"Hello"</span>);</div></pre></td></tr></table></figure>
<p><strong>Creating Modules</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// flash-message.js</span></div><div class="line"><span class="comment">// The export keyword exposes this function to the module system</span></div><div class="line"><span class="comment">// The default type export is the simplest way to export a function</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">message</span>)</span>&#123;</div><div class="line">  alert(message);</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="comment">// Can be named anything because it's default export</span></div><div class="line"><span class="keyword">import</span> flashMessage <span class="keyword">from</span> <span class="string">'./flash-message'</span>;</div><div class="line">flashMessage(<span class="string">"Hello"</span>);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Not adding to the global namespace --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./flash-message.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Using Named Exports</strong></p>
<p>In order to export multiple functions from a single module, we can use the named export.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// flash-message.js</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> (<span class="params">message</span>)</span>&#123;</div><div class="line">  alert(message);</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">logMessage</span>(<span class="params">message</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(message);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">import</span> &#123; alertMessage, logMessage &#125; <span class="keyword">from</span> <span class="string">'./flash-message'</span>;</div><div class="line">alertMessage(<span class="string">'Hello from alert'</span>);</div><div class="line">logMessage(<span class="string">'Hello from log'</span>);</div></pre></td></tr></table></figure>
<p><strong>Importing a Module as an Object</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> flash <span class="keyword">from</span> <span class="string">'./flash-message'</span>;</div><div class="line"></div><div class="line">flash.alertMessage(<span class="string">'Hello from alert'</span>);</div><div class="line">falsh.logMessage(<span class="string">'Hello from log'</span>);</div></pre></td></tr></table></figure>
<p><strong>Removing Repeated Export Statements</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// flash-message.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertMessage</span>(<span class="params">message</span>)</span>&#123;</div><div class="line">  alert(message);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMessage</span>(<span class="params">message</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(message);</div><div class="line">&#125;</div><div class="line"><span class="comment">// export can take multiple function names between curly braces</span></div><div class="line"><span class="keyword">export</span> &#123; alertMessage, logMessage &#125;;</div><div class="line"></div><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="comment">// Imported just like before</span></div><div class="line"><span class="keyword">import</span> &#123; alertMessage, logMessage &#125; <span class="keyword">from</span> <span class="string">'./flash-message'</span>;</div><div class="line">alertMessage(<span class="string">'Hello from alert'</span>);</div><div class="line">logMessage(<span class="string">'Hello from log'</span>);</div></pre></td></tr></table></figure>
<h3 id="Export-and-import-Constants"><a href="#Export-and-import-Constants" class="headerlink" title="Export and import Constants"></a>Export and import Constants</h3><p><strong>Extracting Hardcoded Constants</strong></p>
<p>Redefining constants across our application is unnecessary repetition and can lead to bugs.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// load-profiles.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">const</span> MAX_USERS = <span class="number">3</span>;</div><div class="line">  <span class="keyword">if</span>(userNames.length &gt; MAX_USERS)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> MAX_REPLIES = <span class="number">3</span>;</div><div class="line">  <span class="keyword">if</span>(someElement &gt; MAX_REPLIES)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> &#123; loadProfiles &#125;</div><div class="line"></div><div class="line"><span class="comment">// list-replies.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listReplies</span>(<span class="params">replies=[]</span>)</span>&#123;</div><div class="line">  <span class="keyword">const</span> MAX_REPLIES = <span class="number">3</span>;</div><div class="line">  <span class="keyword">if</span>(replies.length &gt; MAX_REPLIES)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> &#123; listReplies &#125;</div><div class="line"></div><div class="line"><span class="comment">// display-watchers.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayWatchers</span>(<span class="params">watchers=[]</span>)</span>&#123;</div><div class="line">  <span class="keyword">const</span> MAX_USERS = <span class="number">3</span>;</div><div class="line">  <span class="keyword">if</span>(watchers.length &gt; MAX_USERS)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> &#123; displayWatchers &#125;</div></pre></td></tr></table></figure>
<p><strong>Export Constants</strong></p>
<p>Placing constants on their own module allows them to be reused across other modules and hides implementation details (a.k.a., encapsulation).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// constants.js</span></div><div class="line"><span class="keyword">const</span> MAX_USERS = <span class="number">3</span>;</div><div class="line"><span class="keyword">const</span> MAX_REPLIES = <span class="number">3</span>;</div><div class="line"><span class="keyword">export</span> &#123; MAX_USERS, MAX_REPLIES &#125;;</div></pre></td></tr></table></figure>
<p><strong>Import Constants</strong></p>
<p>To import constants, we can use the exact same syntax for importing functions.</p>
<p>We can now import and use our constants from other places in our application.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// load-profiles.js</span></div><div class="line"><span class="keyword">import</span> &#123; MAX_REPLIES, MAX_USERS &#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProfiles</span>(<span class="params">userNames</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(userNames.length &gt; MAX_USERS)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(someElement &gt; MAX_REPLIES)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// list-replies.js</span></div><div class="line"><span class="keyword">import</span> &#123; MAX_REPLIES &#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listReplies</span>(<span class="params">replies = []</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(replies.length &gt; MAX_REPLIES)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// display-watchers.js</span></div><div class="line"><span class="keyword">import</span> &#123; MAX_USERS &#125; <span class="keyword">from</span> <span class="string">'./constants'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayWatchers</span>(<span class="params">watchers = []</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(watchers.length &gt; MAX_USERS)&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Class-Modules"><a href="#Class-Modules" class="headerlink" title="Class Modules"></a>Class Modules</h3><ul>
<li>Exporting Class Modules With Default Export</li>
<li>Using Class Modules With Named Export</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// flash-message.js</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlashMessage</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(message)&#123;</div><div class="line">    <span class="keyword">this</span>.message = message;</div><div class="line">  &#125;</div><div class="line">  renderAlert()&#123;</div><div class="line">    alert(<span class="string">`<span class="subst">$&#123;this.message&#125;</span> from alert`</span>);</div><div class="line">  &#125;</div><div class="line">  renderLog()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.message&#125;</span> from log`</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> &#123; FlashMessage &#125;</div><div class="line"></div><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">import</span> &#123; FlashMessage &#125; <span class="keyword">from</span> <span class="string">'./flash-message'</span>;</div><div class="line"><span class="keyword">let</span> flash = <span class="keyword">new</span> FlashMessage(<span class="string">"Hello"</span>);</div><div class="line">flash.renderAlert();</div><div class="line">flash.renderLog();</div></pre></td></tr></table></figure>
<h1 id="Promises-Iterators-and-Generators"><a href="#Promises-Iterators-and-Generators" class="headerlink" title="Promises, Iterators, and Generators"></a>Promises, Iterators, and Generators</h1><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p><strong>Fetching Poll Results From the Server</strong></p>
<p>It’s very important to understand how to work with JavaScript’s single-thread model.</p>
<p>Otherwise, we might accidentally freeze the entire app, to the detriment of user experience.</p>
<p><img src="/images/fetching-poll-results-from-the-server.png" alt="fetching-poll-results-from-the-server"></p>
<p><strong>Avoiding Code That Blocks</strong></p>
<p>Once the browser blocks executing a script, it stops running other scripts, rendering elements, and responding to user events like keyboard and mouse interactions.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Synchronous style functions wait for return values</span></div><div class="line"><span class="comment">// Page freezes until a value is returned from this function</span></div><div class="line"><span class="keyword">let</span> results = getPollResultsFromServer(<span class="string">"Sass vs. LESS"</span>);</div><div class="line">ui.renderSidebar(results);</div></pre></td></tr></table></figure>
<p>In order to avoid blocking the main thread of execution, we write non-blocking code like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Asynchronous style functions pass callbacks</span></div><div class="line">getPollResultsFromServer(<span class="string">"Sass vs. Less"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</div><div class="line">  ui.renderSidebar(results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Passing Callbacks to Continue Execution</strong></p>
<p>In continuation-passing style (CPS) async programming, we tell a function how to continue execution by passing callbacks. It can grow to complicated nested code.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// When nested callbacks start to grow, our code becomes harder to understand</span></div><div class="line">getPollResultsFromServer(pollName, <span class="function"><span class="keyword">function</span>(<span class="params">error, results</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(error)&#123; <span class="comment">//.. handle error &#125;</span></div><div class="line">    <span class="comment">//...</span></div><div class="line">    ui.renderSidebar(results, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span>(error)&#123; <span class="comment">//.. handle error &#125;</span></div><div class="line">        <span class="comment">//...</span></div><div class="line">        sendNotificationToServer(pollName, results, <span class="function"><span class="keyword">function</span>(<span class="params">error, response</span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span>(error)&#123; <span class="comment">//.. handle error &#125;</span></div><div class="line">            <span class="comment">//...</span></div><div class="line">            doSomethingElseNonBlocking(response, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">              <span class="keyword">if</span>(error)&#123; <span class="comment">//.. handle error &#125;</span></div><div class="line">                <span class="comment">//...</span></div><div class="line">            &#125;)</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>Using Promises</strong></p>
<p>A Promise is a new abstraction that allows us to write async code in an easier way.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Still non-blocking, but not using nested callbacks anymore</span></div><div class="line">getPollResultsFromServer(<span class="string">"Sass vs. LESS"</span>)</div><div class="line">  .then(ui.renderSidebar)</div><div class="line">  .then(sendNotificationToServer)</div><div class="line">  .then(doSomethingElseNonBlocking)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Error: "</span>, error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p><strong>The Lifecycle of a Promise Object</strong></p>
<p>Creating a new Promise automatically sets it to the pending state. Then, it can do 1 of 2 things: become fulfilled or rejected.</p>
<p><img src="/images/the-lifecycle-of a promise-object.png" alt="the-lifecycle-of a promise-object"></p>
<p><strong>Creating a New Promise Object</strong></p>
<p>The Promise constructor function takes an anonymous function with 2 callback arguments known as handlers.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPollResultsFromServer</span>(<span class="params">pollName</span>)</span>&#123;</div><div class="line">  <span class="comment">// Handlers are responsible for either resolving or rejecting the Promise</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="comment">// Called when the non-blocking code is done executing</span></div><div class="line">    resolve(someValue);</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="comment">// Called when an error occurs</span></div><div class="line">    reject(someValue);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>Resolving a Promise</strong></p>
<p>Let’s wrap the XMLHttpRequest object API within a Promise. Calling the resolve() handler moves the Promise to a fulfilled state.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPollResultsFromServer</span>(<span class="params">pollName</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> url = <span class="string">`/results/<span class="subst">$&#123;pollName&#125;</span>`</span>;</div><div class="line">    <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    request.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</div><div class="line">    request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">400</span>) &#123;</div><div class="line">        <span class="comment">// We call the resolve() handler upon a successful response</span></div><div class="line">        <span class="comment">// Resolving a Promise moves it to a fulfilled state</span></div><div class="line">        resolve(<span class="built_in">JSON</span>.parse(request.response));</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    request.send();</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>Reading Results From a Promise</strong></p>
<p>We can use the then() method to read results from the Promise once it’s resolved. This method takes a function that will only be invoked once the Promise is resolved.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">getPollResultsFromServer(<span class="string">"Sass vs. Less"</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123; </div><div class="line">    ui.renderSidebar(results);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p><strong>Chaining Multiple Thens</strong></p>
<p>We can also chain multiple calls to then() ? the return value from 1 call is passed as argument to the next.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">getPollResultsFromServer(<span class="string">"Sass vs. Less"</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</div><div class="line">    <span class="comment">// Only returns poll results from Orlando</span></div><div class="line">    <span class="keyword">return</span> results.filter((result) =&gt; result.city === <span class="string">"Orlando"</span>);</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// The return value from one call to then</span></div><div class="line">  <span class="comment">// becomes the argument to the following call to then.</span></div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">resultsFromOrlando</span>)</span>&#123;</div><div class="line">    ui.renderSidebar(resultsFromOrlando);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p><strong>Rejecting a Promise</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPollResultsFromServer</span>(<span class="params">pollName</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    request.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">400</span>) &#123;</div><div class="line">        resolve(request.response);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// We call the reject() handler,passing it a new Error object</span></div><div class="line">        <span class="comment">// Rejecting a Promise moves it to a rejected state</span></div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(request.status));</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Error Fetching Results"</span>));</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//...</span></div></pre></td></tr></table></figure>
<p><strong>Catching Rejected Promises</strong></p>
<p>Once an error occurs, execution moves immediately to the catch() function. None of the remaining then() functions are invoked.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// When an error occurs here</span></div><div class="line">getPollResultsFromServer(<span class="string">"Sass vs. Less"</span>)</div><div class="line">  <span class="comment">// then none of these run</span></div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> results.filter((result) =&gt; result.city === <span class="string">"Orlando"</span>);</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">resultsFromOrlando</span>)</span>&#123;</div><div class="line">    ui.renderSidebar(resultsFromOrlando);</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// and execution moves straight here.</span></div><div class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Error: "</span>, error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p><strong>Passing Functions as Arguments</strong></p>
<p>We can make our code more succinct by passing function arguments to then, instead of using anonymous functions.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterResults</span>(<span class="params">results</span>)</span>&#123; <span class="comment">//... &#125;</span></div><div class="line"><span class="keyword">let</span> ui = &#123;</div><div class="line">  renderSidebar(filteredResults)&#123; <span class="comment">//... &#125;</span></div><div class="line">&#125;;</div><div class="line">  </div><div class="line">getPollResultsFromServer(<span class="string">"Sass vs. Less"</span>)</div><div class="line">  <span class="comment">// Passing function arguments make this code easier to read</span></div><div class="line">  .then(filterResults)</div><div class="line">  .then(ui.renderSidebar)</div><div class="line">  <span class="comment">// Still catches all errors from previous calls</span></div><div class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Error: "</span>, error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h2 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h2><p> <strong>Iterables Return Iterators</strong></p>
<p>Iterables return an iterator object. This object knows how to access items from a collection 1 at a time, while keeping track of its current position within the sequence.</p>
<p><img src="/images/iterables-return-iterators.png" alt="iterables-return-iterators"></p>
<p><strong>Understanding the next Method</strong></p>
<p>Each time next() is called, it returns an object with 2 specific properties: done and value.</p>
<p>Here’s how values from these 2 properties work:</p>
<ul>
<li><code>done (boolean)</code><ul>
<li>Will be <code>false</code> if the iterator is able to return a value from the collection</li>
<li>Will be <code>true</code> if the iterator is past the end of the collection</li>
</ul>
</li>
<li><code>value (any)</code><ul>
<li>Any value returned by the iterator. When done is true, this returns <code>undefined</code>.</li>
</ul>
</li>
</ul>
<p><strong>Custom Iterator</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> post = &#123; &#125;; <span class="comment">//...</span></div><div class="line">post[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">// Returns an array with property names</span></div><div class="line">  <span class="keyword">let</span> properties = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</div><div class="line">  <span class="keyword">let</span> isDone = <span class="literal">false</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">let</span> next = () =&gt; &#123;</div><div class="line">    <span class="comment">// Ends the loop after reaching the last property</span></div><div class="line">    <span class="keyword">if</span>(count &gt;= properties.length)&#123;</div><div class="line">      isDone = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Fetches the value for the next property</span></div><div class="line">    <span class="comment">// ++ only increments count after it's read</span></div><div class="line">    <span class="keyword">return</span> &#123; done: isDone, value: <span class="keyword">this</span>[properties[count++]] &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123; next &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p><strong>Generator Functions</strong></p>
<p>The function * declaration defines generator functions. These are special functions from which we can use the yield keyword to return iterator objects.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">nameList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"Sam"</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"Tyler"</span>;</div><div class="line">&#125;.</div></pre></td></tr></table></figure>
<blockquote>
<p>Doesn’t matter where we place the star, as long as it’s the first thing after the function keyword</p>
<ul>
<li>function *nameList(){</li>
</ul>
<ul>
<li>function* nameList(){</li>
</ul>
<ul>
<li>function * nameList(){</li>
</ul>
</blockquote>
<p><strong>Generator Objects and for…of</strong></p>
<p>Generator functions return objects that provide the same next method expected by for…of, the spread operator, and the destructuring assignment.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">nameList</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"Sam"</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="string">"Tyler"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> nameList())&#123;</div><div class="line">  <span class="built_in">console</span>.log( name );</div><div class="line">&#125;</div><div class="line"><span class="comment">// Sam</span></div><div class="line"><span class="comment">// Tyler</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> names = [...nameList()];</div><div class="line"><span class="built_in">console</span>.log( names ); <span class="comment">// ["Sam", "Tyler"]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> [first, second] = nameList();</div><div class="line"><span class="built_in">console</span>.log( first, second ); <span class="comment">//  Sam Tyler</span></div></pre></td></tr></table></figure>
<p><strong>Replacing Manual Iterator Objects</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> post = &#123; title: <span class="string">"New Features in JS"</span>, replies: <span class="number">19</span> &#125;;</div><div class="line">post[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> properties = <span class="built_in">Object</span>.keys(<span class="keyword">this</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> p <span class="keyword">of</span> properties)&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">this</span>[p];</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> p <span class="keyword">of</span> post)&#123;</div><div class="line">  <span class="built_in">console</span>.log( p );</div><div class="line">&#125;</div><div class="line"><span class="comment">// New Features in JS</span></div><div class="line"><span class="comment">// 19</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Declaration&quot;&gt;&lt;a href=&quot;#Declaration&quot; class=&quot;headerlink&quot; title=&quot;Declaration&quot;&gt;&lt;/a&gt;Declaration&lt;/h1&gt;&lt;h2 id=&quot;Using-let&quot;&gt;&lt;a href=&quot;#Using-let&quot; class=&quot;headerlink&quot; title=&quot;Using let&quot;&gt;&lt;/a&gt;Using let&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Understanding Hoisting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Prior to executing our code, JavaScript moves var declarations all the way up to the top of the scope. This is known as hoisting.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadProfiles&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;userNames&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(userNames.length &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; loadingMessage = &lt;span class=&quot;string&quot;&gt;&quot;This might take a while...&quot;&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _displaySpinner(loadingMessage);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(flashMessage); &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; flashMessage = &lt;span class=&quot;string&quot;&gt;&quot;Loading Profiles&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _displayFlash(flashMessage);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(flashMessage); &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The function above will be hoisted by JavaScript as follows&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadProfiles&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;userNames&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Automatically moved here by the JavaScript runtime&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; loadingMessage, flashMessage;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(userNames.length &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    loadingMessage = &lt;span class=&quot;string&quot;&gt;&quot;This might take a while...&quot;&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _displaySpinner(loadingMessage);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    flashMessage = &lt;span class=&quot;string&quot;&gt;&quot;Loading Profiles&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    _displayFlash(flashMessage);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="CodeSchool" scheme="http://www.yuthon.com/tags/CodeSchool/"/>
    
      <category term="JavaScript" scheme="http://www.yuthon.com/tags/JavaScript/"/>
    
      <category term="ES2015" scheme="http://www.yuthon.com/tags/ES2015/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Code School - JavaScript Road Trip</title>
    <link href="http://www.yuthon.com/2016/04/09/CodeSchool-Javascript/"/>
    <id>http://www.yuthon.com/2016/04/09/CodeSchool-Javascript/</id>
    <published>2016-04-09T04:37:07.000Z</published>
    <updated>2016-05-16T11:51:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h1><p><strong>Closures help in function “construction zones”</strong></p>
<p>A closure can make the creation of very similar functions ultra-efficient.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildCoveTicketMaker</span>(<span class="params"> transport </span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"> name </span>) </span>&#123;</div><div class="line">    alert(<span class="string">"Here is your transportation ticket via the "</span> + transport + <span class="string">".\n"</span> + </div><div class="line">          <span class="string">"Welcome to the Cold Closures Cove, "</span> + name + <span class="string">"!"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> getSubmarineTicket = buildCoveTicketMaker(<span class="string">"Submarine"</span>);</div><div class="line"><span class="keyword">var</span> getBattleshipTicket = buildCoveTicketMaker(<span class="string">"Battleship"</span>);</div><div class="line"><span class="keyword">var</span> getGiantSeagullTicket = buildCoveTicketMaker(<span class="string">"Giant Seagull"</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>Closure functions can even modify bound variables in the background</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildCoveTicketMaker</span>(<span class="params"> transport </span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"> name </span>) </span>&#123;</div><div class="line">    alert(<span class="string">"Here is your transportation ticket via the "</span> + transport + <span class="string">".\n"</span> + </div><div class="line">          <span class="string">"Welcome to the Cold Closures Cove, "</span> + name + <span class="string">"!"</span> + </div><div class="line">          <span class="string">"You are passenger #"</span> + passengerNumber + <span class="string">"."</span> );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> getSubmarineTicket = buildCoveTicketMaker(<span class="string">"Submarine"</span>);</div><div class="line"><span class="comment">// passengerNumber is incremented to 1.</span></div><div class="line">getSubmarineTicket(<span class="string">"Mario"</span>); </div><div class="line"><span class="comment">// Another call to getSubmarineTicket has passengerNumber incremented to 2! </span></div><div class="line"><span class="comment">// Wow, even though the function's local scope disappeared after Mario's ticket, </span></div><div class="line"><span class="comment">// it KEPT the progress of passengerNumber!</span></div><div class="line">getSubmarineTicket(<span class="string">"Toad"</span>);</div></pre></td></tr></table></figure>
<p><strong>LOOPS WITH CLOSURES: a cautionary tale</strong></p>
<p>We have to pay close attention to return times and final variable states.</p>
<ul>
<li>Way before torpedoAssignment isreturned, the i loop counter hasprogressed in value to 8 andstopped the loop.</li>
<li>The function’s actual return is the true “moment of closure”, when the environment andall necessary variables are packaged up. </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignTorpedo</span> (<span class="params"> name, passengerArray </span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> torpedoAssignment;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;passengerArray.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (passengerArray[i] == name) &#123;</div><div class="line">      torpedoAssignment = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"Ahoy, "</span> + name + <span class="string">"!\n"</span> + <span class="string">"Man your post at Torpedo #"</span> + (i+<span class="number">1</span>) + <span class="string">"!"</span>);</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> torpedoAssignment;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> subPassengers = [<span class="string">"Luke"</span>, <span class="string">"Leia"</span>, <span class="string">"Han"</span>, <span class="string">"Chewie"</span>, <span class="string">"Yoda"</span>, <span class="string">"R2-D2"</span>, <span class="string">"C-3PO"</span>, <span class="string">"Boba"</span>];</div><div class="line"><span class="keyword">var</span> giveAssignment = assignTorpedo(<span class="string">"Chewie"</span>, subPassengers);</div><div class="line">giveAssignment(); </div><div class="line"><span class="comment">// Outputs:</span></div><div class="line"><span class="comment">// Ahoy, Chewie!</span></div><div class="line"><span class="comment">// Man your post at Torpedo #9!</span></div></pre></td></tr></table></figure>
<p>Several options exist for timing closures correctly</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignTorpedo</span> (<span class="params"> name, passengerArray </span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;passengerArray.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (passengerArray[i] == name) &#123;</div><div class="line">      <span class="comment">// Now the function will be immediately returned when the right name is found, locking i in place.</span></div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">"Ahoy, "</span> + name + <span class="string">"!\n"</span> + </div><div class="line">              <span class="string">"Man your post at Torpedo #"</span> + (i+<span class="number">1</span>) + <span class="string">"!"</span>);</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeTorpedoAssigner</span> (<span class="params"> passengerArray </span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"> name </span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;passengerArray.length; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (passengerArray[i] == name) &#123;</div><div class="line">        alert(<span class="string">"Ahoy, "</span> + name + <span class="string">"!\n"</span> +</div><div class="line">              <span class="string">"Man your post at Torpedo #"</span> + (i+<span class="number">1</span>) + <span class="string">"!"</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h1><ul>
<li><p>Ensuring that every line of code can execute when it’s needed</p>
<p><img src="/images/program_load_order.png" alt="program_load_order"></p>
</li>
</ul>
<ul>
<li><p>First, memory is set aside for all necessary variables and declared functions. Then the operations in order.</p>
<p> <img src="/images/stuff_declare.png" alt="stuff_declare"></p>
</li>
</ul>
<ul>
<li>Some examples of the impact of hoisting<img src="/images/the_impact_of_hoisting.png" alt="the_impact_of_hoisting"></li>
</ul>
<ul>
<li><p>Function Expressions are never hoisted! They are treated as assignments.</p>
<p><img src="/images/function_expressions_are_never_hoisted.png" alt="function_expressions_are_never_hoisted"></p>
<p><img src="/images/function_expressions_are_never_hoisted_2.png" alt="function_expressions_are_never_hoisted_2"></p>
</li>
</ul>
<p><strong>Example</strong> <img src="/images/how_might_this_affect_our_EARLIER_train_system.png" alt="how_might_this_affect_our_EARLIER_train_system"></p>
<p><img src="/images/how_might_this_affect_our_EARLIER_train_system_result.png" alt="how_might_this_affect_our_EARLIER_train_system_result"></p>
<p><strong>Solution</strong></p>
<ul>
<li>Exchange the order<img src="/images/how_might_this_affect_our_EARLIER_train_system_solution_1.png" alt="how_might_this_affect_our_EARLIER_train_system_solution_1"></li>
</ul>
<ul>
<li>Don’t use function expression <img src="/images/how_might_this_affect_our_EARLIER_train_system_solution_2.png" alt="how_might_this_affect_our_EARLIER_train_system_solution_2"></li>
</ul>
<h1 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h1><ul>
<li>The Object’s parent is called its “prototype”<ul>
<li>When a generic Object is created, its prototype passes it many important properties </li>
</ul>
</li>
<li>Passing down properties is called “inheritance”<ul>
<li>Inheritance helps avoid over-coding multiple properties and methods into similar objects.</li>
<li>Object Prototype<ul>
<li>valueOf()</li>
<li>constructor()</li>
<li>toLocaleString()</li>
<li>toString()</li>
<li>isPrototypeOf()</li>
<li>propertyIsEnumerable()</li>
<li>hasOwnProperty()</li>
</ul>
</li>
<li>Array Prototype<ul>
<li>length</li>
<li>pop()</li>
<li>push()</li>
<li>shift()</li>
<li>reverse()</li>
<li>sort()</li>
<li>join()</li>
<li>reduce()</li>
<li>slice()</li>
</ul>
</li>
<li>String Prototype<ul>
<li>length</li>
<li>charAt()</li>
<li>trim()</li>
<li>concat()</li>
<li>indexOf()</li>
<li>replace()</li>
<li>toLowerCase()</li>
<li>toUpperCase()</li>
<li>substring()</li>
</ul>
</li>
<li>Number Prototype<ul>
<li>toFixed()</li>
<li>toExponential()</li>
<li>toPrecision()</li>
</ul>
</li>
<li>Function Prototype<ul>
<li>name</li>
<li>call()</li>
<li>bind()</li>
<li>apply()</li>
</ul>
</li>
</ul>
</li>
<li>Though properties are inherited, they are still “owned” by prototypes, not the inheriting Object</li>
</ul>
<h2 id="Inheritance-and-Constructors"><a href="#Inheritance-and-Constructors" class="headerlink" title="Inheritance and Constructors"></a>Inheritance and Constructors</h2><p><strong>Adding inheritable Properties to prototypes</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.countAll = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> letterCount = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="keyword">this</span>.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> ( <span class="keyword">this</span>.charAt(i).toUpperCase() == letter.toUpperCase() ) &#123;</div><div class="line">      letterCount++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> letterCount;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>Build objects using Object.create()</strong></p>
<p>Using inheritance, we can create new Objects with our existing Objects as prototypes</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shoe = &#123; size: <span class="number">6</span>, gender: <span class="string">"women"</span>, construction: <span class="string">"slipper"</span>&#125;;</div><div class="line"><span class="keyword">var</span> magicShoe = <span class="built_in">Object</span>.create(shoe);</div></pre></td></tr></table></figure>
<p><strong>Examining the inheritance</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype .isPrototypeOf(shoe); <span class="comment">// true</span></div><div class="line">shoe.isPrototypeOf(magicShoe); <span class="comment">//true</span></div><div class="line"><span class="built_in">Object</span>.prototype .isPrototypeOf(magicShoe); <span class="comment">//true</span></div></pre></td></tr></table></figure>
<p><strong>Build a prototype with empty properties</strong></p>
<ul>
<li><p>Determine common properties of a class</p>
<ul>
<li>A class is a set of Objects that all share and inherit from the same basic prototype.</li>
</ul>
</li>
<li><p>Building a constructor function for an Object</p>
<ul>
<li><p>A constructor allows us to set up inheritance while also assigning specific property values.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shoe</span> (<span class="params">shoeSize, shoeColor, forGender, constructStyle</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.size = shoeSize;</div><div class="line">  <span class="keyword">this</span>.color = shoeColor;</div><div class="line">  <span class="keyword">this</span>.gender = forGender;</div><div class="line">  <span class="keyword">this</span>.construction = constructStyle;</div><div class="line">  <span class="keyword">this</span>.putOn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"Shoe's on!"</span>); &#125;;</div><div class="line">  <span class="keyword">this</span>.takeOff = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"Uh, what's that smell?"</span>); &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Use constructor</p>
<ul>
<li><p>JavaScript’s ?new’ keyword produces a new Object of the class, or “instantiates” the class</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> beachShoe = <span class="keyword">new</span> Shoe( <span class="number">10</span>, <span class="string">"blue"</span>, <span class="string">"women"</span>, <span class="string">"flipflop"</span> );</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><strong>Assigning a prototype to a constructor</strong></p>
<p>By setting a constructor’s prototype property, every new instance will refer to it for extra properties!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shoe</span> (<span class="params">shoeSize, shoeColor, forGender, constructStyle</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.size = shoeSize;</div><div class="line">  <span class="keyword">this</span>.color = shoeColor;</div><div class="line">  <span class="keyword">this</span>.gender = forGender;</div><div class="line">  <span class="keyword">this</span>.construction = constructStyle;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Shoe.prototype = &#123;</div><div class="line">  putOn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"Shoe's on!"</span>); &#125;;</div><div class="line">  takeOff: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"Uh, what's that smell?"</span>); &#125;;</div><div class="line"></div><div class="line">beachShoe.hasOwnProperty(<span class="string">"construction"</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p><strong>Prototypes can also refer back to the instance</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shoe</span> (<span class="params">shoeSize, shoeColor, forGender, constructStyle</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.size = shoeSize;</div><div class="line">  <span class="keyword">this</span>.color = shoeColor;</div><div class="line">  <span class="keyword">this</span>.gender = forGender;</div><div class="line">  <span class="keyword">this</span>.construction = constructStyle;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Shoe.prototype = &#123;</div><div class="line">  putOn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="string">"Your "</span> + <span class="keyword">this</span>.construction + <span class="string">"'s"</span> + <span class="string">"on!"</span>); &#125;,</div><div class="line">  takeOff: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert (<span class="string">"Phew! Somebody's size "</span> + <span class="keyword">this</span>.size + <span class="string">"'s"</span> + <span class="string">" are fragrant! "</span>); &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Overriding-Prototypal-Methods"><a href="#Overriding-Prototypal-Methods" class="headerlink" title="Overriding Prototypal Methods"></a>Overriding Prototypal Methods</h2><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">4</span>;</div><div class="line"><span class="keyword">var</span> y = <span class="string">"4"</span>;</div><div class="line"></div><div class="line">x.valueOf(); <span class="comment">// 4</span></div><div class="line">y.valueOf(); <span class="comment">// "4"</span></div><div class="line"></div><div class="line">x.valueOf() == y.valueOf(); <span class="comment">// true</span></div><div class="line">x.valueOf() === y.valueOf(); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<ul>
<li>The “value “in <code>valueOf()</code> isn’t looking for numbers necessarily, but instead returns whatever primitive type is associated with the object</li>
<li>Be careful! The <code>==</code> tries to help us out by using “typecoercion”, which turns a number contained within a stringinto an actual number. Here, the <code>&quot;4&quot;</code> we got back from <code>y.valueOf()</code> became <code>4</code> when the <code>==</code> examined it.</li>
<li>The <code>===</code> operator does <strong>NOT</strong> ignore the type of thevalue, and gives us a more detailed interpretation ofequality. JavaScript experts often prefer this comparator exclusively over <code>==</code> for this reason.</li>
</ul>
<p><strong>valueOf( ) on custom objects</strong></p>
<p>The <code>valueOf()</code> function for custom Objects just defaults to a list of their properties, just like logging them out.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Tornado = <span class="function"><span class="keyword">function</span> (<span class="params">category, affectedAreas, windGust</span>) </span>&#123;</div><div class="line"> <span class="keyword">this</span>.category = category;</div><div class="line"> <span class="keyword">this</span>.affectedAreas = affectedAreas;</div><div class="line"> <span class="keyword">this</span>.windGust = windGust;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cities = [ [<span class="string">"Kansas City"</span>, <span class="number">464310</span>], [<span class="string">"Topeka"</span>, <span class="number">127939</span>], [<span class="string">"Lenexa"</span>, <span class="number">49398</span>] ]; </div><div class="line"><span class="keyword">var</span> twister = <span class="keyword">new</span> Tornado( <span class="string">"F5"</span>, cities, <span class="number">220</span> );</div><div class="line"></div><div class="line">twister.valueOf();</div><div class="line"><span class="comment">// Tornado &#123;category: "F5", affectedAreas: Array[3], windGust: 220&#125;</span></div></pre></td></tr></table></figure>
<p><strong>Overriding prototypal properties</strong></p>
<ul>
<li><p>Many situations require special functionality that’s different from the first available property</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Tornado.prototype.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"> </span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.affectedAreas.length; i++) &#123;</div><div class="line">    sum += <span class="keyword">this</span>.affectedAreas[i][<span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">twister.valueOf(); <span class="comment">// 641647</span></div></pre></td></tr></table></figure>
</li>
<li><p>Each Tornado’s ‘affectedAreas’ property can be updated outside the object with no loss of accuracy.</p>
</li>
</ul>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString( )"></a>toString( )</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">4</span>;</div><div class="line"><span class="keyword">var</span> y = <span class="string">"4"</span>;</div><div class="line"><span class="keyword">var</span> a = [ <span class="number">3</span>, <span class="string">"blind"</span>, <span class="string">"mice"</span> ];</div><div class="line"><span class="keyword">var</span> double = <span class="function"><span class="keyword">function</span> (<span class="params"> param </span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> param *<span class="number">2</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">x.toString(); <span class="comment">// "4"</span></div><div class="line">y.toString(); <span class="comment">// "4"</span></div><div class="line">a.toString(); <span class="comment">// "3,blind,mice"</span></div><div class="line">double.toString(); </div><div class="line"><span class="comment">// "function ( param )&#123;</span></div><div class="line"><span class="comment">//   return param *2;</span></div><div class="line"><span class="comment">// &#125;"</span></div></pre></td></tr></table></figure>
<ul>
<li>A call to <code>toString</code> on an Array will just string-ify and concatenate all the contents, separating each entry by a comma withoutany whitespace. Overriding <code>toString</code> in the Array prototype is often desirable.</li>
</ul>
<h3 id="Finding-constructor-and-prototype"><a href="#Finding-constructor-and-prototype" class="headerlink" title="Finding constructor and prototype"></a>Finding constructor and prototype</h3><p>Some inherited properties provide ways to find an Object’s nearest prototype ancestor</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cities = [ [<span class="string">"Kansas City"</span>, <span class="number">464310</span>], [<span class="string">"Topeka"</span>, <span class="number">127939</span>], [<span class="string">"Lenexa"</span>, <span class="number">49398</span>] ]; </div><div class="line"><span class="keyword">var</span> twister = <span class="keyword">new</span> Tornado( <span class="string">"F5"</span>, cities, <span class="number">220</span> );</div><div class="line">cities.push( [<span class="string">"Olathe"</span>, <span class="number">130045</span>] );</div><div class="line"></div><div class="line">twister.constructor;</div><div class="line"><span class="comment">// function (category, affectedAreas, windGust) &#123;</span></div><div class="line"><span class="comment">//   this.category = category;</span></div><div class="line"><span class="comment">//   this.affectedAreas = affectedAreas;</span></div><div class="line"><span class="comment">//   this.windGust = windGust;</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"></div><div class="line">twister.constructor.prototype;</div><div class="line"><span class="comment">// Object &#123;valueOf: function, toString: function&#125;</span></div><div class="line"></div><div class="line">twister.__proto__;</div><div class="line"><span class="comment">// Object &#123;valueOf: function, toString: function&#125;</span></div></pre></td></tr></table></figure>
<h3 id="HasOwnProperty"><a href="#HasOwnProperty" class="headerlink" title="HasOwnProperty()"></a>HasOwnProperty()</h3><p>Searching prototype chains for potential overridden properties becomes easy with this function</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.findOwnerOfProperty = <span class="function"><span class="keyword">function</span> (<span class="params"> propName </span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> currentObject = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">while</span> (currentObject !== <span class="literal">null</span>)&#123;</div><div class="line">    <span class="keyword">if</span> (currentObject.hasOwnProperty(propName)) &#123;</div><div class="line">    	<span class="keyword">return</span> currentObject;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      currentObject = currentObject.__proto__;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="string">"No property found!"</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Closures&quot;&gt;&lt;a href=&quot;#Closures&quot; class=&quot;headerlink&quot; title=&quot;Closures&quot;&gt;&lt;/a&gt;Closures&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Closures help in function “construction zones”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A closure can make the creation of very similar functions ultra-efficient.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;buildCoveTicketMaker&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; transport &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt; name &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    alert(&lt;span class=&quot;string&quot;&gt;&quot;Here is your transportation ticket via the &quot;&lt;/span&gt; + transport + &lt;span class=&quot;string&quot;&gt;&quot;.\n&quot;&lt;/span&gt; + &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;string&quot;&gt;&quot;Welcome to the Cold Closures Cove, &quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getSubmarineTicket = buildCoveTicketMaker(&lt;span class=&quot;string&quot;&gt;&quot;Submarine&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getBattleshipTicket = buildCoveTicketMaker(&lt;span class=&quot;string&quot;&gt;&quot;Battleship&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; getGiantSeagullTicket = buildCoveTicketMaker(&lt;span class=&quot;string&quot;&gt;&quot;Giant Seagull&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://www.yuthon.com/categories/Notes/"/>
    
    
      <category term="CodeSchool" scheme="http://www.yuthon.com/tags/CodeSchool/"/>
    
      <category term="JavaScript" scheme="http://www.yuthon.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
